### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  id: RandomFunctions
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif
  langs:
  - csharp
  - vb
  name: RandomFunctions
  nameWithType: RandomFunctions
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: RandomFunctions
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  syntax:
    content: public class RandomFunctions
    content.vb: Public Class RandomFunctions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc
  id: CreateMc
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateMc()
  nameWithType: RandomFunctions.CreateMc()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateMc
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 13
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a mc() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateMc()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of random mc function.\n"
    content.vb: Public Shared Function CreateMc As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss
  id: CreateGauss
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateGauss()
  nameWithType: RandomFunctions.CreateGauss()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateGauss
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 24
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a gauss() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateGauss()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of random gauss function.\n"
    content.vb: Public Shared Function CreateGauss As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss
  id: CreateExtendedGauss
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateExtendedGauss()
  nameWithType: RandomFunctions.CreateExtendedGauss()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateExtendedGauss
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 35
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a gauss() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateExtendedGauss()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of random gauss function.\n"
    content.vb: Public Shared Function CreateExtendedGauss As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom
  id: CreateRandom
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateRandom()
  nameWithType: RandomFunctions.CreateRandom()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateRandom
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 46
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a random() function. It generates number between 0.0 and 1.0 (uniform distribution).\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateRandom()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of random function.\n"
    content.vb: Public Shared Function CreateRandom As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat
  id: CreateFlat
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateFlat()
  nameWithType: RandomFunctions.CreateFlat()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateFlat
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 57
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a flat() function. It generates number between -x and +x.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateFlat()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of random function.\n"
    content.vb: Public Shared Function CreateFlat As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit
  id: CreateLimit
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateLimit()
  nameWithType: RandomFunctions.CreateLimit()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateLimit
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 68
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a limit() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateLimit()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of limit function.\n"
    content.vb: Public Shared Function CreateLimit As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif
  id: CreateUnif
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateUnif()
  nameWithType: RandomFunctions.CreateUnif()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateUnif
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 79
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a unif() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateUnif()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of unif function.\n"
    content.vb: Public Shared Function CreateUnif As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif
  id: CreateAUnif
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateAUnif()
  nameWithType: RandomFunctions.CreateAUnif()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateAUnif
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 90
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a aunif() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateAUnif()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of aunif function.\n"
    content.vb: Public Shared Function CreateAUnif As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss
  id: CreateAGauss
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions
  langs:
  - csharp
  - vb
  name: CreateAGauss()
  nameWithType: RandomFunctions.CreateAGauss()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateAGauss
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/RandomFunctions.cs
    startLine: 101
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a agauss() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateAGauss()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of agauss function.\n"
    content.vb: Public Shared Function CreateAGauss As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc
  name: CreateMc
  nameWithType: RandomFunctions.CreateMc
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateMc
- uid: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
  parent: SpiceSharpParser.Common.Evaluation
  definition: SpiceSharpParser.Common.Evaluation.IFunction`2
  name: IFunction<Double, Double>
  nameWithType: IFunction<Double, Double>
  fullName: SpiceSharpParser.Common.Evaluation.IFunction<System.Double, System.Double>
  nameWithType.vb: IFunction(Of Double, Double)
  fullName.vb: SpiceSharpParser.Common.Evaluation.IFunction(Of System.Double, System.Double)
  name.vb: IFunction(Of Double, Double)
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.IFunction`2
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction`2
  name: IFunction<TInputArgumentType, TOutputType>
  nameWithType: IFunction<TInputArgumentType, TOutputType>
  fullName: SpiceSharpParser.Common.Evaluation.IFunction<TInputArgumentType, TOutputType>
  nameWithType.vb: IFunction(Of TInputArgumentType, TOutputType)
  fullName.vb: SpiceSharpParser.Common.Evaluation.IFunction(Of TInputArgumentType, TOutputType)
  name.vb: IFunction(Of TInputArgumentType, TOutputType)
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputArgumentType
    nameWithType: TInputArgumentType
    fullName: TInputArgumentType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutputType
    nameWithType: TOutputType
    fullName: TOutputType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputArgumentType
    nameWithType: TInputArgumentType
    fullName: TInputArgumentType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutputType
    nameWithType: TOutputType
    fullName: TOutputType
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss
  name: CreateGauss
  nameWithType: RandomFunctions.CreateGauss
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateGauss
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss
  name: CreateExtendedGauss
  nameWithType: RandomFunctions.CreateExtendedGauss
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateExtendedGauss
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom
  name: CreateRandom
  nameWithType: RandomFunctions.CreateRandom
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateRandom
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat
  name: CreateFlat
  nameWithType: RandomFunctions.CreateFlat
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateFlat
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit
  name: CreateLimit
  nameWithType: RandomFunctions.CreateLimit
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateLimit
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif
  name: CreateUnif
  nameWithType: RandomFunctions.CreateUnif
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateUnif
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif
  name: CreateAUnif
  nameWithType: RandomFunctions.CreateAUnif
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAUnif
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss
  name: CreateAGauss
  nameWithType: RandomFunctions.CreateAGauss
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.RandomFunctions.CreateAGauss
