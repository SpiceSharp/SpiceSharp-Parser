### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  id: ISwitchModelBaseParameters
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance
  langs:
  - csharp
  - vb
  name: ISwitchModelBaseParameters
  nameWithType: ISwitchModelBaseParameters
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ISwitchModelBaseParameters
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  syntax:
    content: 'public class ISwitchModelBaseParameters : ParameterSet, ICloneable, ICloneable<ParameterSet>'
    content.vb: >-
      Public Class ISwitchModelBaseParameters
          Inherits ParameterSet
          Implements ICloneable, ICloneable(Of ParameterSet)
  inheritance:
  - System.Object
  - SpiceSharp.ParameterSet
  implements:
  - SpiceSharp.ICloneable
  - SpiceSharp.ICloneable{SpiceSharp.ParameterSet}
  inheritedMembers:
  - SpiceSharp.ParameterSet.CalculateDefaults
  - SpiceSharp.ParameterSet.Clone
  - SpiceSharp.ParameterSet.SpiceSharp#ICloneable#Clone
  - SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)
  - SpiceSharp.ParameterSet.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance
  id: OnResistance
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  langs:
  - csharp
  - vb
  name: OnResistance
  nameWithType: ISwitchModelBaseParameters.OnResistance
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: OnResistance
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
    startLine: 7
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  syntax:
    content: >-
      [ParameterName("ron")]

      [ParameterInfo("Resistance when closed/on")]

      public GivenParameter<double> OnResistance { get; }
    parameters: []
    return:
      type: SpiceSharp.GivenParameter{System.Double}
    content.vb: >-
      <ParameterName("ron")>

      <ParameterInfo("Resistance when closed/on")>

      Public ReadOnly Property OnResistance As GivenParameter(Of Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance*
  attributes:
  - type: SpiceSharp.Attributes.ParameterNameAttribute
    ctor: SpiceSharp.Attributes.ParameterNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ron
  - type: SpiceSharp.Attributes.ParameterInfoAttribute
    ctor: SpiceSharp.Attributes.ParameterInfoAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Resistance when closed/on
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance
  id: OffResistance
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  langs:
  - csharp
  - vb
  name: OffResistance
  nameWithType: ISwitchModelBaseParameters.OffResistance
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: OffResistance
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
    startLine: 11
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  syntax:
    content: >-
      [ParameterName("roff")]

      [ParameterInfo("Resistance when off")]

      public GivenParameter<double> OffResistance { get; }
    parameters: []
    return:
      type: SpiceSharp.GivenParameter{System.Double}
    content.vb: >-
      <ParameterName("roff")>

      <ParameterInfo("Resistance when off")>

      Public ReadOnly Property OffResistance As GivenParameter(Of Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance*
  attributes:
  - type: SpiceSharp.Attributes.ParameterNameAttribute
    ctor: SpiceSharp.Attributes.ParameterNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: roff
  - type: SpiceSharp.Attributes.ParameterInfoAttribute
    ctor: SpiceSharp.Attributes.ParameterInfoAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Resistance when off
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent
  id: OnCurrent
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  langs:
  - csharp
  - vb
  name: OnCurrent
  nameWithType: ISwitchModelBaseParameters.OnCurrent
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: OnCurrent
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
    startLine: 15
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  syntax:
    content: >-
      [ParameterName("ion")]

      [ParameterInfo("On current")]

      public GivenParameter<double> OnCurrent { get; }
    parameters: []
    return:
      type: SpiceSharp.GivenParameter{System.Double}
    content.vb: >-
      <ParameterName("ion")>

      <ParameterInfo("On current")>

      Public ReadOnly Property OnCurrent As GivenParameter(Of Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent*
  attributes:
  - type: SpiceSharp.Attributes.ParameterNameAttribute
    ctor: SpiceSharp.Attributes.ParameterNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ion
  - type: SpiceSharp.Attributes.ParameterInfoAttribute
    ctor: SpiceSharp.Attributes.ParameterInfoAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: On current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent
  id: OffCurrent
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters
  langs:
  - csharp
  - vb
  name: OffCurrent
  nameWithType: ISwitchModelBaseParameters.OffCurrent
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: OffCurrent
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Custom/ISwitchModelBaseParameters.cs
    startLine: 19
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  syntax:
    content: >-
      [ParameterName("ioff")]

      [ParameterInfo("Off current")]

      public GivenParameter<double> OffCurrent { get; }
    parameters: []
    return:
      type: SpiceSharp.GivenParameter{System.Double}
    content.vb: >-
      <ParameterName("ioff")>

      <ParameterInfo("Off current")>

      Public ReadOnly Property OffCurrent As GivenParameter(Of Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent*
  attributes:
  - type: SpiceSharp.Attributes.ParameterNameAttribute
    ctor: SpiceSharp.Attributes.ParameterNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ioff
  - type: SpiceSharp.Attributes.ParameterInfoAttribute
    ctor: SpiceSharp.Attributes.ParameterInfoAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Off current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharp.ParameterSet
  commentId: T:SpiceSharp.ParameterSet
  parent: SpiceSharp
  isExternal: true
  name: ParameterSet
  nameWithType: ParameterSet
  fullName: SpiceSharp.ParameterSet
- uid: SpiceSharp.ICloneable
  commentId: T:SpiceSharp.ICloneable
  parent: SpiceSharp
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: SpiceSharp.ICloneable
- uid: SpiceSharp.ICloneable{SpiceSharp.ParameterSet}
  commentId: T:SpiceSharp.ICloneable{SpiceSharp.ParameterSet}
  parent: SpiceSharp
  definition: SpiceSharp.ICloneable`1
  name: ICloneable<ParameterSet>
  nameWithType: ICloneable<ParameterSet>
  fullName: SpiceSharp.ICloneable<SpiceSharp.ParameterSet>
  nameWithType.vb: ICloneable(Of ParameterSet)
  fullName.vb: SpiceSharp.ICloneable(Of SpiceSharp.ParameterSet)
  name.vb: ICloneable(Of ParameterSet)
  spec.csharp:
  - uid: SpiceSharp.ICloneable`1
    name: ICloneable
    nameWithType: ICloneable
    fullName: SpiceSharp.ICloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharp.ParameterSet
    name: ParameterSet
    nameWithType: ParameterSet
    fullName: SpiceSharp.ParameterSet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharp.ICloneable`1
    name: ICloneable
    nameWithType: ICloneable
    fullName: SpiceSharp.ICloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharp.ParameterSet
    name: ParameterSet
    nameWithType: ParameterSet
    fullName: SpiceSharp.ParameterSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.ParameterSet.CalculateDefaults
  commentId: M:SpiceSharp.ParameterSet.CalculateDefaults
  parent: SpiceSharp.ParameterSet
  isExternal: true
  name: CalculateDefaults()
  nameWithType: ParameterSet.CalculateDefaults()
  fullName: SpiceSharp.ParameterSet.CalculateDefaults()
  spec.csharp:
  - uid: SpiceSharp.ParameterSet.CalculateDefaults
    name: CalculateDefaults
    nameWithType: ParameterSet.CalculateDefaults
    fullName: SpiceSharp.ParameterSet.CalculateDefaults
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharp.ParameterSet.CalculateDefaults
    name: CalculateDefaults
    nameWithType: ParameterSet.CalculateDefaults
    fullName: SpiceSharp.ParameterSet.CalculateDefaults
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.ParameterSet.Clone
  commentId: M:SpiceSharp.ParameterSet.Clone
  parent: SpiceSharp.ParameterSet
  isExternal: true
  name: Clone()
  nameWithType: ParameterSet.Clone()
  fullName: SpiceSharp.ParameterSet.Clone()
  spec.csharp:
  - uid: SpiceSharp.ParameterSet.Clone
    name: Clone
    nameWithType: ParameterSet.Clone
    fullName: SpiceSharp.ParameterSet.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharp.ParameterSet.Clone
    name: Clone
    nameWithType: ParameterSet.Clone
    fullName: SpiceSharp.ParameterSet.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.ParameterSet.SpiceSharp#ICloneable#Clone
  commentId: M:SpiceSharp.ParameterSet.SpiceSharp#ICloneable#Clone
  parent: SpiceSharp.ParameterSet
  isExternal: true
  name: ICloneable.Clone()
  nameWithType: ParameterSet.ICloneable.Clone()
  fullName: SpiceSharp.ParameterSet.SpiceSharp.ICloneable.Clone()
  nameWithType.vb: ParameterSet.SpiceSharp.ICloneable.Clone()
  name.vb: SpiceSharp.ICloneable.Clone()
  spec.csharp:
  - uid: SpiceSharp.ParameterSet.SpiceSharp#ICloneable#Clone
    name: ICloneable.Clone
    nameWithType: ParameterSet.ICloneable.Clone
    fullName: SpiceSharp.ParameterSet.SpiceSharp.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharp.ParameterSet.SpiceSharp#ICloneable#Clone
    name: SpiceSharp.ICloneable.Clone
    nameWithType: ParameterSet.SpiceSharp.ICloneable.Clone
    fullName: SpiceSharp.ParameterSet.SpiceSharp.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)
  commentId: M:SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)
  parent: SpiceSharp.ParameterSet
  isExternal: true
  name: CopyFrom(ParameterSet)
  nameWithType: ParameterSet.CopyFrom(ParameterSet)
  fullName: SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)
  spec.csharp:
  - uid: SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)
    name: CopyFrom
    nameWithType: ParameterSet.CopyFrom
    fullName: SpiceSharp.ParameterSet.CopyFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.ParameterSet
    name: ParameterSet
    nameWithType: ParameterSet
    fullName: SpiceSharp.ParameterSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)
    name: CopyFrom
    nameWithType: ParameterSet.CopyFrom
    fullName: SpiceSharp.ParameterSet.CopyFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.ParameterSet
    name: ParameterSet
    nameWithType: ParameterSet
    fullName: SpiceSharp.ParameterSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.ParameterSet.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)
  commentId: M:SpiceSharp.ParameterSet.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)
  parent: SpiceSharp.ParameterSet
  isExternal: true
  name: ICloneable.CopyFrom(ICloneable)
  nameWithType: ParameterSet.ICloneable.CopyFrom(ICloneable)
  fullName: SpiceSharp.ParameterSet.SpiceSharp.ICloneable.CopyFrom(SpiceSharp.ICloneable)
  nameWithType.vb: ParameterSet.SpiceSharp.ICloneable.CopyFrom(ICloneable)
  name.vb: SpiceSharp.ICloneable.CopyFrom(ICloneable)
  spec.csharp:
  - uid: SpiceSharp.ParameterSet.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)
    name: ICloneable.CopyFrom
    nameWithType: ParameterSet.ICloneable.CopyFrom
    fullName: SpiceSharp.ParameterSet.SpiceSharp.ICloneable.CopyFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.ICloneable
    name: ICloneable
    nameWithType: ICloneable
    fullName: SpiceSharp.ICloneable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharp.ParameterSet.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)
    name: SpiceSharp.ICloneable.CopyFrom
    nameWithType: ParameterSet.SpiceSharp.ICloneable.CopyFrom
    fullName: SpiceSharp.ParameterSet.SpiceSharp.ICloneable.CopyFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.ICloneable
    name: ICloneable
    nameWithType: ICloneable
    fullName: SpiceSharp.ICloneable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharp
  commentId: N:SpiceSharp
  isExternal: true
  name: SpiceSharp
  nameWithType: SpiceSharp
  fullName: SpiceSharp
- uid: SpiceSharp.ICloneable`1
  commentId: T:SpiceSharp.ICloneable`1
  isExternal: true
  name: ICloneable<T>
  nameWithType: ICloneable<T>
  fullName: SpiceSharp.ICloneable<T>
  nameWithType.vb: ICloneable(Of T)
  fullName.vb: SpiceSharp.ICloneable(Of T)
  name.vb: ICloneable(Of T)
  spec.csharp:
  - uid: SpiceSharp.ICloneable`1
    name: ICloneable
    nameWithType: ICloneable
    fullName: SpiceSharp.ICloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharp.ICloneable`1
    name: ICloneable
    nameWithType: ICloneable
    fullName: SpiceSharp.ICloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance
  name: OnResistance
  nameWithType: ISwitchModelBaseParameters.OnResistance
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnResistance
- uid: SpiceSharp.GivenParameter{System.Double}
  commentId: T:SpiceSharp.GivenParameter{System.Double}
  parent: SpiceSharp
  definition: SpiceSharp.GivenParameter`1
  name: GivenParameter<Double>
  nameWithType: GivenParameter<Double>
  fullName: SpiceSharp.GivenParameter<System.Double>
  nameWithType.vb: GivenParameter(Of Double)
  fullName.vb: SpiceSharp.GivenParameter(Of System.Double)
  name.vb: GivenParameter(Of Double)
  spec.csharp:
  - uid: SpiceSharp.GivenParameter`1
    name: GivenParameter
    nameWithType: GivenParameter
    fullName: SpiceSharp.GivenParameter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharp.GivenParameter`1
    name: GivenParameter
    nameWithType: GivenParameter
    fullName: SpiceSharp.GivenParameter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.GivenParameter`1
  commentId: T:SpiceSharp.GivenParameter`1
  isExternal: true
  name: GivenParameter<T>
  nameWithType: GivenParameter<T>
  fullName: SpiceSharp.GivenParameter<T>
  nameWithType.vb: GivenParameter(Of T)
  fullName.vb: SpiceSharp.GivenParameter(Of T)
  name.vb: GivenParameter(Of T)
  spec.csharp:
  - uid: SpiceSharp.GivenParameter`1
    name: GivenParameter
    nameWithType: GivenParameter
    fullName: SpiceSharp.GivenParameter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharp.GivenParameter`1
    name: GivenParameter
    nameWithType: GivenParameter
    fullName: SpiceSharp.GivenParameter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance
  name: OffResistance
  nameWithType: ISwitchModelBaseParameters.OffResistance
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffResistance
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent
  name: OnCurrent
  nameWithType: ISwitchModelBaseParameters.OnCurrent
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OnCurrent
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent
  name: OffCurrent
  nameWithType: ISwitchModelBaseParameters.OffCurrent
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Custom.ISwitchModelBaseParameters.OffCurrent
