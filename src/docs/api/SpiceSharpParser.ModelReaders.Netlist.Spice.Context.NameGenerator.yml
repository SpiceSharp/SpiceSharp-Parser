### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  id: NameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal(System.String)
  langs:
  - csharp
  - vb
  name: NameGenerator
  nameWithType: NameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: NameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: 'public class NameGenerator : INameGenerator'
    content.vb: >-
      Public Class NameGenerator
          Implements INameGenerator
  inheritance:
  - System.Object
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator)
  id: '#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator)'
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: NameGenerator(INodeNameGenerator, IObjectNameGenerator)
  nameWithType: NameGenerator.NameGenerator(INodeNameGenerator, IObjectNameGenerator)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NameGenerator(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator, SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 7
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public NameGenerator(INodeNameGenerator nodeNameGenerator, IObjectNameGenerator objectNameGenerator)
    parameters:
    - id: nodeNameGenerator
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    - id: objectNameGenerator
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator
    content.vb: Public Sub New(nodeNameGenerator As INodeNameGenerator, objectNameGenerator As IObjectNameGenerator)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator
  id: NodeNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: NodeNameGenerator
  nameWithType: NameGenerator.NodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: NodeNameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 13
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: protected INodeNameGenerator NodeNameGenerator { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    content.vb: Protected ReadOnly Property NodeNameGenerator As INodeNameGenerator
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator
  id: ObjectNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: ObjectNameGenerator
  nameWithType: NameGenerator.ObjectNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ObjectNameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 15
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: protected IObjectNameGenerator ObjectNameGenerator { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator
    content.vb: Protected ReadOnly Property ObjectNameGenerator As IObjectNameGenerator
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals
  id: Globals
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: Globals
  nameWithType: NameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Globals
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 17
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public IEnumerable<string> Globals { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Globals As IEnumerable(Of String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.Globals
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName(System.String)
  id: ParseNodeName(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: ParseNodeName(String)
  nameWithType: NameGenerator.ParseNodeName(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParseNodeName
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 19
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public string ParseNodeName(string nodePath)
    parameters:
    - id: nodePath
      type: System.String
    return:
      type: System.String
    content.vb: Public Function ParseNodeName(nodePath As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName(System.String)
  id: GenerateObjectName(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: GenerateObjectName(String)
  nameWithType: NameGenerator.GenerateObjectName(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GenerateObjectName
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 24
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public string GenerateObjectName(string entityName)
    parameters:
    - id: entityName
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GenerateObjectName(entityName As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator(System.String)
  id: CreateChildNameGenerator(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: CreateChildNameGenerator(String)
  nameWithType: NameGenerator.CreateChildNameGenerator(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateChildNameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 29
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public IObjectNameGenerator CreateChildNameGenerator(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator
    content.vb: Public Function CreateChildNameGenerator(name As String) As IObjectNameGenerator
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName(System.String)
  id: GenerateNodeName(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: GenerateNodeName(String)
  nameWithType: NameGenerator.GenerateNodeName(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GenerateNodeName
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 34
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public string GenerateNodeName(string nodeName)
    parameters:
    - id: nodeName
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GenerateNodeName(nodeName As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  id: AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: AddChild(INodeNameGenerator)
  nameWithType: NameGenerator.AddChild(INodeNameGenerator)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AddChild
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 39
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void AddChild(INodeNameGenerator nodeNameGenerator)
    parameters:
    - id: nodeNameGenerator
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    content.vb: Public Sub AddChild(nodeNameGenerator As INodeNameGenerator)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal(System.String)
  id: SetGlobal(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator
  langs:
  - csharp
  - vb
  name: SetGlobal(String)
  nameWithType: NameGenerator.SetGlobal(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetGlobal
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/NameGenerator.cs
    startLine: 44
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void SetGlobal(string spImage)
    parameters:
    - id: spImage
      type: System.String
    content.vb: Public Sub SetGlobal(spImage As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: INameGenerator
  nameWithType: INameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.#ctor*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.#ctor
  name: NameGenerator
  nameWithType: NameGenerator.NameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  name: INodeNameGenerator
  nameWithType: INodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  name: IObjectNameGenerator
  nameWithType: IObjectNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.IObjectNameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator
  name: NodeNameGenerator
  nameWithType: NameGenerator.NodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.NodeNameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator
  name: ObjectNameGenerator
  nameWithType: NameGenerator.ObjectNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ObjectNameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals
  name: Globals
  nameWithType: NameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.Globals
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.Globals
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.Globals
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  name: Globals
  nameWithType: INameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.Globals
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName
  name: ParseNodeName
  nameWithType: NameGenerator.ParseNodeName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.ParseNodeName
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  isExternal: true
  name: ParseNodeName(String)
  nameWithType: INameGenerator.ParseNodeName(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName(System.String)
    name: ParseNodeName
    nameWithType: INameGenerator.ParseNodeName
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName(System.String)
    name: ParseNodeName
    nameWithType: INameGenerator.ParseNodeName
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.ParseNodeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName
  name: GenerateObjectName
  nameWithType: NameGenerator.GenerateObjectName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateObjectName
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  isExternal: true
  name: GenerateObjectName(String)
  nameWithType: INameGenerator.GenerateObjectName(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName(System.String)
    name: GenerateObjectName
    nameWithType: INameGenerator.GenerateObjectName
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName(System.String)
    name: GenerateObjectName
    nameWithType: INameGenerator.GenerateObjectName
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateObjectName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator
  name: CreateChildNameGenerator
  nameWithType: NameGenerator.CreateChildNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.CreateChildNameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  isExternal: true
  name: CreateChildNameGenerator(String)
  nameWithType: INameGenerator.CreateChildNameGenerator(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator(System.String)
    name: CreateChildNameGenerator
    nameWithType: INameGenerator.CreateChildNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator(System.String)
    name: CreateChildNameGenerator
    nameWithType: INameGenerator.CreateChildNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.CreateChildNameGenerator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName
  name: GenerateNodeName
  nameWithType: NameGenerator.GenerateNodeName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.GenerateNodeName
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  isExternal: true
  name: GenerateNodeName(String)
  nameWithType: INameGenerator.GenerateNodeName(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName(System.String)
    name: GenerateNodeName
    nameWithType: INameGenerator.GenerateNodeName
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName(System.String)
    name: GenerateNodeName
    nameWithType: INameGenerator.GenerateNodeName
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.GenerateNodeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild
  name: AddChild
  nameWithType: NameGenerator.AddChild
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.AddChild
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  name: AddChild(INodeNameGenerator)
  nameWithType: INameGenerator.AddChild(INodeNameGenerator)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
    name: AddChild
    nameWithType: INameGenerator.AddChild
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    name: INodeNameGenerator
    nameWithType: INodeNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
    name: AddChild
    nameWithType: INameGenerator.AddChild
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    name: INodeNameGenerator
    nameWithType: INodeNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal
  name: SetGlobal
  nameWithType: NameGenerator.SetGlobal
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.NameGenerator.SetGlobal
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  isExternal: true
  name: SetGlobal(String)
  nameWithType: INameGenerator.SetGlobal(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal(System.String)
    name: SetGlobal
    nameWithType: INameGenerator.SetGlobal
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal(System.String)
    name: SetGlobal
    nameWithType: INameGenerator.SetGlobal
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator.SetGlobal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
