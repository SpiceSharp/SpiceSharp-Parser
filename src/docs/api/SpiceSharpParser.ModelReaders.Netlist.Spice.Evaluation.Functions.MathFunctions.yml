### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  id: MathFunctions
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp
  langs:
  - csharp
  - vb
  name: MathFunctions
  nameWithType: MathFunctions
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: MathFunctions
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  syntax:
    content: public static class MathFunctions
    content.vb: Public Module MathFunctions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos
  id: CreatePos
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreatePos()
  nameWithType: MathFunctions.CreatePos()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreatePos
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 13
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a pos() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreatePos()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of poly function.\n"
    content.vb: Public Shared Function CreatePos As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly
  id: CreatePoly
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreatePoly()
  nameWithType: MathFunctions.CreatePoly()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreatePoly
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 24
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a poly() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreatePoly()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of poly function.\n"
    content.vb: Public Shared Function CreatePoly As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  id: CreatePwr(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreatePwr(SpiceExpressionMode)
  nameWithType: MathFunctions.CreatePwr(SpiceExpressionMode)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreatePwr
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 36
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a pwr() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreatePwr(SpiceExpressionMode mode)
    parameters:
    - id: mode
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode
      description: Evaluator mode.
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of pwr function.\n"
    content.vb: Public Shared Function CreatePwr(mode As SpiceExpressionMode) As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs
  id: CreatePwrs
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreatePwrs()
  nameWithType: MathFunctions.CreatePwrs()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreatePwrs
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 47
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a pwrs() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreatePwrs()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of pwrs function.\n"
    content.vb: Public Shared Function CreatePwrs As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin
  id: CreateMin
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateMin()
  nameWithType: MathFunctions.CreateMin()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateMin
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 58
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a min() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateMin()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of min function.\n"
    content.vb: Public Shared Function CreateMin As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint
  id: CreateNint
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateNint()
  nameWithType: MathFunctions.CreateNint()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateNint
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 69
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a nint() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateNint()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of min function.\n"
    content.vb: Public Shared Function CreateNint As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax
  id: CreateMax
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateMax()
  nameWithType: MathFunctions.CreateMax()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateMax
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 80
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a max() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateMax()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of max function.\n"
    content.vb: Public Shared Function CreateMax As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit
  id: CreateLimit
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateLimit()
  nameWithType: MathFunctions.CreateLimit()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateLimit
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 91
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a limit(x, xmin, xmax) function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateLimit()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of limit function.\n"
    content.vb: Public Shared Function CreateLimit As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn
  id: CreateLn
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateLn()
  nameWithType: MathFunctions.CreateLn()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateLn
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 102
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a ln() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateLn()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of ln function.\n"
    content.vb: Public Shared Function CreateLn As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt
  id: CreateCbrt
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateCbrt()
  nameWithType: MathFunctions.CreateCbrt()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateCbrt
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 113
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a cbrt() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateCbrt()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of cbrt function.\n"
    content.vb: Public Shared Function CreateCbrt As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf
  id: CreateBuf
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateBuf()
  nameWithType: MathFunctions.CreateBuf()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateBuf
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 124
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a buf() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateBuf()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of buf function.\n"
    content.vb: Public Shared Function CreateBuf As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil
  id: CreateCeil
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateCeil()
  nameWithType: MathFunctions.CreateCeil()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateCeil
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 135
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a ceil() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateCeil()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of ceil function.\n"
    content.vb: Public Shared Function CreateCeil As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor
  id: CreateFloor
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateFloor()
  nameWithType: MathFunctions.CreateFloor()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateFloor
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 146
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a floor() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateFloor()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of floor function.\n"
    content.vb: Public Shared Function CreateFloor As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot
  id: CreateHypot
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateHypot()
  nameWithType: MathFunctions.CreateHypot()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateHypot
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 157
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a hypot() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateHypot()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of hypot function.\n"
    content.vb: Public Shared Function CreateHypot As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt
  id: CreateInt
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateInt()
  nameWithType: MathFunctions.CreateInt()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateInt
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 168
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a int() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateInt()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of int function.\n"
    content.vb: Public Shared Function CreateInt As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv
  id: CreateInv
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateInv()
  nameWithType: MathFunctions.CreateInv()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateInv
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 179
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a inv() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateInv()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of int function.\n"
    content.vb: Public Shared Function CreateInv As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  id: CreateDb(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateDb(SpiceExpressionMode)
  nameWithType: MathFunctions.CreateDb(SpiceExpressionMode)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb(SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateDb
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 190
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a db() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateDb(SpiceExpressionMode mode)
    parameters:
    - id: mode
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of db function.\n"
    content.vb: Public Shared Function CreateDb(mode As SpiceExpressionMode) As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound
  id: CreateRound
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateRound()
  nameWithType: MathFunctions.CreateRound()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateRound
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 201
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a round() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateRound()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of round function.\n"
    content.vb: Public Shared Function CreateRound As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU
  id: CreateU
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateU()
  nameWithType: MathFunctions.CreateU()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateU
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 212
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a u() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateU()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of u function.\n"
    content.vb: Public Shared Function CreateU As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp
  id: CreateURamp
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateURamp()
  nameWithType: MathFunctions.CreateURamp()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateURamp
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 223
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a uramp() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateURamp()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of uramp function.\n"
    content.vb: Public Shared Function CreateURamp As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn
  id: CreateSgn
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateSgn()
  nameWithType: MathFunctions.CreateSgn()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateSgn
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 234
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a sgn() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateSgn()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of sgn function.\n"
    content.vb: Public Shared Function CreateSgn As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable
  id: CreateTable
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions
  langs:
  - csharp
  - vb
  name: CreateTable()
  nameWithType: MathFunctions.CreateTable()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateTable
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Evaluation/Functions/MathFunctions.cs
    startLine: 245
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  summary: "\nGet a table() function.\n"
  example: []
  syntax:
    content: public static IFunction<double, double> CreateTable()
    return:
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
      description: "\nA new instance of a table function.\n"
    content.vb: Public Shared Function CreateTable As IFunction(Of Double, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos
  name: CreatePos
  nameWithType: MathFunctions.CreatePos
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePos
- uid: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
  parent: SpiceSharpParser.Common.Evaluation
  definition: SpiceSharpParser.Common.Evaluation.IFunction`2
  name: IFunction<Double, Double>
  nameWithType: IFunction<Double, Double>
  fullName: SpiceSharpParser.Common.Evaluation.IFunction<System.Double, System.Double>
  nameWithType.vb: IFunction(Of Double, Double)
  fullName.vb: SpiceSharpParser.Common.Evaluation.IFunction(Of System.Double, System.Double)
  name.vb: IFunction(Of Double, Double)
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.IFunction`2
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction`2
  name: IFunction<TInputArgumentType, TOutputType>
  nameWithType: IFunction<TInputArgumentType, TOutputType>
  fullName: SpiceSharpParser.Common.Evaluation.IFunction<TInputArgumentType, TOutputType>
  nameWithType.vb: IFunction(Of TInputArgumentType, TOutputType)
  fullName.vb: SpiceSharpParser.Common.Evaluation.IFunction(Of TInputArgumentType, TOutputType)
  name.vb: IFunction(Of TInputArgumentType, TOutputType)
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputArgumentType
    nameWithType: TInputArgumentType
    fullName: TInputArgumentType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutputType
    nameWithType: TOutputType
    fullName: TOutputType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputArgumentType
    nameWithType: TInputArgumentType
    fullName: TInputArgumentType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutputType
    nameWithType: TOutputType
    fullName: TOutputType
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly
  name: CreatePoly
  nameWithType: MathFunctions.CreatePoly
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePoly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr
  name: CreatePwr
  nameWithType: MathFunctions.CreatePwr
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwr
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation
  name: SpiceExpressionMode
  nameWithType: SpiceExpressionMode
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceExpressionMode
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs
  name: CreatePwrs
  nameWithType: MathFunctions.CreatePwrs
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreatePwrs
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin
  name: CreateMin
  nameWithType: MathFunctions.CreateMin
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMin
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint
  name: CreateNint
  nameWithType: MathFunctions.CreateNint
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateNint
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax
  name: CreateMax
  nameWithType: MathFunctions.CreateMax
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateMax
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit
  name: CreateLimit
  nameWithType: MathFunctions.CreateLimit
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLimit
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn
  name: CreateLn
  nameWithType: MathFunctions.CreateLn
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateLn
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt
  name: CreateCbrt
  nameWithType: MathFunctions.CreateCbrt
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCbrt
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf
  name: CreateBuf
  nameWithType: MathFunctions.CreateBuf
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateBuf
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil
  name: CreateCeil
  nameWithType: MathFunctions.CreateCeil
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateCeil
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor
  name: CreateFloor
  nameWithType: MathFunctions.CreateFloor
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateFloor
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot
  name: CreateHypot
  nameWithType: MathFunctions.CreateHypot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateHypot
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt
  name: CreateInt
  nameWithType: MathFunctions.CreateInt
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInt
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv
  name: CreateInv
  nameWithType: MathFunctions.CreateInv
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateInv
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb
  name: CreateDb
  nameWithType: MathFunctions.CreateDb
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateDb
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound
  name: CreateRound
  nameWithType: MathFunctions.CreateRound
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateRound
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU
  name: CreateU
  nameWithType: MathFunctions.CreateU
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateU
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp
  name: CreateURamp
  nameWithType: MathFunctions.CreateURamp
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateURamp
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn
  name: CreateSgn
  nameWithType: MathFunctions.CreateSgn
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateSgn
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable
  name: CreateTable
  nameWithType: MathFunctions.CreateTable
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.Functions.MathFunctions.CreateTable
