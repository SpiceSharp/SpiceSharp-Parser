### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.LexerRegexRule
  commentId: T:SpiceSharpParser.Lexers.LexerRegexRule
  id: LexerRegexRule
  parent: SpiceSharpParser.Lexers
  children:
  - SpiceSharpParser.Lexers.LexerRegexRule.#ctor(System.String,System.String,System.Boolean)
  - SpiceSharpParser.Lexers.LexerRegexRule.Clone
  - SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  - SpiceSharpParser.Lexers.LexerRegexRule.Name
  - SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  - SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  langs:
  - csharp
  - vb
  name: LexerRegexRule
  nameWithType: LexerRegexRule
  fullName: SpiceSharpParser.Lexers.LexerRegexRule
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: LexerRegexRule
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 8
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nBase class for token rules in <xref href=\"SpiceSharpParser.Lexers.LexerGrammar%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class LexerRegexRule
    content.vb: Public MustInherit Class LexerRegexRule
  inheritance:
  - System.Object
  derivedClasses:
  - SpiceSharpParser.Lexers.LexerInternalRule
  - SpiceSharpParser.Lexers.LexerTokenRule`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SpiceSharpParser.Lexers.LexerRegexRule.#ctor(System.String,System.String,System.Boolean)
  commentId: M:SpiceSharpParser.Lexers.LexerRegexRule.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  langs:
  - csharp
  - vb
  name: LexerRegexRule(String, String, Boolean)
  nameWithType: LexerRegexRule.LexerRegexRule(String, String, Boolean)
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.LexerRegexRule(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 19
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.LexerRegexRule\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected LexerRegexRule(string ruleName, string regularExpressionPattern, bool ignoreCase)
    parameters:
    - id: ruleName
      type: System.String
      description: A name of lexer rule.
    - id: regularExpressionPattern
      type: System.String
      description: A regular expression.
    - id: ignoreCase
      type: System.Boolean
      description: Case is ignored.
    content.vb: Protected Sub New(ruleName As String, regularExpressionPattern As String, ignoreCase As Boolean)
  overload: SpiceSharpParser.Lexers.LexerRegexRule.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  id: IgnoreCase
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  langs:
  - csharp
  - vb
  name: IgnoreCase
  nameWithType: LexerRegexRule.IgnoreCase
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IgnoreCase
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 29
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets a value indicating whether case of characters in regular expression is ignored.\n"
  example: []
  syntax:
    content: public bool IgnoreCase { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IgnoreCase As Boolean
  overload: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Name
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.Name
  id: Name
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LexerRegexRule.Name
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Name
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Name
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 34
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets name of lexer rule.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SpiceSharpParser.Lexers.LexerRegexRule.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  id: RegularExpressionPattern
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  langs:
  - csharp
  - vb
  name: RegularExpressionPattern
  nameWithType: LexerRegexRule.RegularExpressionPattern
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: RegularExpressionPattern
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 39
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets or sets a regular expression pattern of lexer rule.\n"
  example: []
  syntax:
    content: public string RegularExpressionPattern { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RegularExpressionPattern As String
  overload: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  id: RegularExpression
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  langs:
  - csharp
  - vb
  name: RegularExpression
  nameWithType: LexerRegexRule.RegularExpression
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: RegularExpression
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 53
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets a regular expression of lexer rule.\n"
  example: []
  syntax:
    content: public Regex RegularExpression { get; }
    parameters: []
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: Public ReadOnly Property RegularExpression As Regex
  overload: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  commentId: M:SpiceSharpParser.Lexers.LexerRegexRule.Clone
  id: Clone
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: LexerRegexRule.Clone()
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerRegexRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Clone
    path: ../SpiceSharpParser/Lexers/LexerRegexRule.cs
    startLine: 79
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nClones the rule.\n"
  example: []
  syntax:
    content: public abstract LexerRegexRule Clone()
    return:
      type: SpiceSharpParser.Lexers.LexerRegexRule
      description: "\nClone of the rule.\n"
    content.vb: Public MustOverride Function Clone As LexerRegexRule
  overload: SpiceSharpParser.Lexers.LexerRegexRule.Clone*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: SpiceSharpParser.Lexers.LexerGrammar`1
  commentId: T:SpiceSharpParser.Lexers.LexerGrammar`1
  name: LexerGrammar<TLexerState>
  nameWithType: LexerGrammar<TLexerState>
  fullName: SpiceSharpParser.Lexers.LexerGrammar<TLexerState>
  nameWithType.vb: LexerGrammar(Of TLexerState)
  fullName.vb: SpiceSharpParser.Lexers.LexerGrammar(Of TLexerState)
  name.vb: LexerGrammar(Of TLexerState)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.LexerGrammar`1
    name: LexerGrammar
    nameWithType: LexerGrammar
    fullName: SpiceSharpParser.Lexers.LexerGrammar
  - name: <
    nameWithType: <
    fullName: <
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Lexers.LexerGrammar`1
    name: LexerGrammar
    nameWithType: LexerGrammar
    fullName: SpiceSharpParser.Lexers.LexerGrammar
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers
  commentId: N:SpiceSharpParser.Lexers
  name: SpiceSharpParser.Lexers
  nameWithType: SpiceSharpParser.Lexers
  fullName: SpiceSharpParser.Lexers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.LexerRegexRule
  commentId: T:SpiceSharpParser.Lexers.LexerRegexRule
  parent: SpiceSharpParser.Lexers
  name: LexerRegexRule
  nameWithType: LexerRegexRule
  fullName: SpiceSharpParser.Lexers.LexerRegexRule
- uid: SpiceSharpParser.Lexers.LexerRegexRule.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.LexerRegexRule.#ctor
  name: LexerRegexRule
  nameWithType: LexerRegexRule.LexerRegexRule
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.LexerRegexRule
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase*
  commentId: Overload:SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  name: IgnoreCase
  nameWithType: LexerRegexRule.IgnoreCase
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Name*
  commentId: Overload:SpiceSharpParser.Lexers.LexerRegexRule.Name
  name: Name
  nameWithType: LexerRegexRule.Name
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Name
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern*
  commentId: Overload:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  name: RegularExpressionPattern
  nameWithType: LexerRegexRule.RegularExpressionPattern
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression*
  commentId: Overload:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  name: RegularExpression
  nameWithType: LexerRegexRule.RegularExpression
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone*
  commentId: Overload:SpiceSharpParser.Lexers.LexerRegexRule.Clone
  name: Clone
  nameWithType: LexerRegexRule.Clone
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone
