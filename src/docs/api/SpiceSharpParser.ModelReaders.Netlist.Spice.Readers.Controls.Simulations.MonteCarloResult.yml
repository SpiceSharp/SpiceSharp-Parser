### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  id: MonteCarloResult
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect(SpiceSharp.Simulations.Simulation,System.Double)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot(System.String,System.Int32,System.Collections.Generic.List{System.Double})
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot(System.Int32)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot(System.Int32)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot(System.Int32)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot(System.Int32)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed
  langs:
  - csharp
  - vb
  name: MonteCarloResult
  nameWithType: MonteCarloResult
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: MonteCarloResult
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 11
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nResults of Monte Carlo Analysis.\n"
  example: []
  syntax:
    content: public class MonteCarloResult
    content.vb: Public Class MonteCarloResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled
  id: Enabled
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Enabled
  nameWithType: MonteCarloResult.Enabled
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Enabled
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 16
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets or sets a value indicating whether MC analysis was executed.\n"
  example: []
  syntax:
    content: public bool Enabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Enabled As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed
  id: Seed
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Seed
  nameWithType: MonteCarloResult.Seed
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Seed
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 21
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets or sets the random seed for Monte Carlo simulations evaluators.\n"
  example: []
  syntax:
    content: public int? Seed { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Seed As Integer?
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  id: Max
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: MonteCarloResult.Max
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Max
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 26
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets or sets the dictionary of max values.\n"
  example: []
  syntax:
    content: public Dictionary<Simulation, double> Max { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{SpiceSharp.Simulations.Simulation,System.Double}
    content.vb: Public Property Max As Dictionary(Of Simulation, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  id: Min
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: MonteCarloResult.Min
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Min
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 31
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets or sets the dictionary of min values.\n"
  example: []
  syntax:
    content: public Dictionary<Simulation, double> Min { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{SpiceSharp.Simulations.Simulation,System.Double}
    content.vb: Public Property Min As Dictionary(Of Simulation, Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable
  id: OutputVariable
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: OutputVariable
  nameWithType: MonteCarloResult.OutputVariable
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: OutputVariable
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 36
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets or sets the output variable name.\n"
  example: []
  syntax:
    content: public string OutputVariable { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property OutputVariable As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function
  id: Function
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Function
  nameWithType: MonteCarloResult.Function
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Function
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 41
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets or sets the function name.\n"
  example: []
  syntax:
    content: public string Function { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Function As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect(SpiceSharp.Simulations.Simulation,System.Double)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect(SpiceSharp.Simulations.Simulation,System.Double)
  id: Collect(SpiceSharp.Simulations.Simulation,System.Double)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Collect(Simulation, Double)
  nameWithType: MonteCarloResult.Collect(Simulation, Double)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect(SpiceSharp.Simulations.Simulation, System.Double)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Collect
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 48
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nCollects the result and updates <xref href=\"SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min\" data-throw-if-not-resolved=\"false\"></xref> dictionaries.\n"
  example: []
  syntax:
    content: public void Collect(Simulation simulation, double result)
    parameters:
    - id: simulation
      type: SpiceSharp.Simulations.Simulation
      description: Simulation of the result.
    - id: result
      type: System.Double
      description: Result value.
    content.vb: Public Sub Collect(simulation As Simulation, result As Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot(System.Int32)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot(System.Int32)
  id: GetPlot(System.Int32)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: GetPlot(Int32)
  nameWithType: MonteCarloResult.GetPlot(Int32)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot(System.Int32)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetPlot
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 84
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  summary: "\nGets the plot from Monte Carlo results.\n"
  example: []
  syntax:
    content: public HistogramPlot GetPlot(int bins)
    parameters:
    - id: bins
      type: System.Int32
      description: Number of bins.
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
      description: "\nA plot.\n"
    content.vb: Public Function GetPlot(bins As Integer) As HistogramPlot
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot(System.Int32)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot(System.Int32)
  id: GetYMaxPlot(System.Int32)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: GetYMaxPlot(Int32)
  nameWithType: MonteCarloResult.GetYMaxPlot(Int32)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot(System.Int32)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetYMaxPlot
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 101
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  syntax:
    content: protected HistogramPlot GetYMaxPlot(int bins)
    parameters:
    - id: bins
      type: System.Int32
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
    content.vb: Protected Function GetYMaxPlot(bins As Integer) As HistogramPlot
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot(System.Int32)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot(System.Int32)
  id: GetMaxPlot(System.Int32)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: GetMaxPlot(Int32)
  nameWithType: MonteCarloResult.GetMaxPlot(Int32)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot(System.Int32)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetMaxPlot
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 113
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  syntax:
    content: protected HistogramPlot GetMaxPlot(int bins)
    parameters:
    - id: bins
      type: System.Int32
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
    content.vb: Protected Function GetMaxPlot(bins As Integer) As HistogramPlot
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot(System.Int32)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot(System.Int32)
  id: GetMinPlot(System.Int32)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: GetMinPlot(Int32)
  nameWithType: MonteCarloResult.GetMinPlot(Int32)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot(System.Int32)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetMinPlot
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 119
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  syntax:
    content: protected HistogramPlot GetMinPlot(int bins)
    parameters:
    - id: bins
      type: System.Int32
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
    content.vb: Protected Function GetMinPlot(bins As Integer) As HistogramPlot
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot(System.String,System.Int32,System.Collections.Generic.List{System.Double})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot(System.String,System.Int32,System.Collections.Generic.List{System.Double})
  id: CreatePlot(System.String,System.Int32,System.Collections.Generic.List{System.Double})
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult
  langs:
  - csharp
  - vb
  name: CreatePlot(String, Int32, List<Double>)
  nameWithType: MonteCarloResult.CreatePlot(String, Int32, List<Double>)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot(System.String, System.Int32, System.Collections.Generic.List<System.Double>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreatePlot
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Simulations/MonteCarloResult.cs
    startLine: 125
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  syntax:
    content: protected HistogramPlot CreatePlot(string title, int bins, List<double> values)
    parameters:
    - id: title
      type: System.String
    - id: bins
      type: System.Int32
    - id: values
      type: System.Collections.Generic.List{System.Double}
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
    content.vb: Protected Function CreatePlot(title As String, bins As Integer, values As List(Of Double)) As HistogramPlot
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot*
  nameWithType.vb: MonteCarloResult.CreatePlot(String, Int32, List(Of Double))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot(System.String, System.Int32, System.Collections.Generic.List(Of System.Double))
  name.vb: CreatePlot(String, Int32, List(Of Double))
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled
  name: Enabled
  nameWithType: MonteCarloResult.Enabled
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Enabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed
  name: Seed
  nameWithType: MonteCarloResult.Seed
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Seed
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  name: Max
  nameWithType: MonteCarloResult.Max
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
- uid: System.Collections.Generic.Dictionary{SpiceSharp.Simulations.Simulation,System.Double}
  commentId: T:System.Collections.Generic.Dictionary{SpiceSharp.Simulations.Simulation,System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Simulation, Double>
  nameWithType: Dictionary<Simulation, Double>
  fullName: System.Collections.Generic.Dictionary<SpiceSharp.Simulations.Simulation, System.Double>
  nameWithType.vb: Dictionary(Of Simulation, Double)
  fullName.vb: System.Collections.Generic.Dictionary(Of SpiceSharp.Simulations.Simulation, System.Double)
  name.vb: Dictionary(Of Simulation, Double)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  name: Min
  nameWithType: MonteCarloResult.Min
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable
  name: OutputVariable
  nameWithType: MonteCarloResult.OutputVariable
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.OutputVariable
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function
  name: Function
  nameWithType: MonteCarloResult.Function
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Function
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Max
  isExternal: true
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Min
  isExternal: true
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect
  name: Collect
  nameWithType: MonteCarloResult.Collect
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.Collect
- uid: SpiceSharp.Simulations.Simulation
  commentId: T:SpiceSharp.Simulations.Simulation
  parent: SpiceSharp.Simulations
  isExternal: true
  name: Simulation
  nameWithType: Simulation
  fullName: SpiceSharp.Simulations.Simulation
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SpiceSharp.Simulations
  commentId: N:SpiceSharp.Simulations
  isExternal: true
  name: SpiceSharp.Simulations
  nameWithType: SpiceSharp.Simulations
  fullName: SpiceSharp.Simulations
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot
  name: GetPlot
  nameWithType: MonteCarloResult.GetPlot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetPlot
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
  name: HistogramPlot
  nameWithType: HistogramPlot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots.HistogramPlot
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot
  name: GetYMaxPlot
  nameWithType: MonteCarloResult.GetYMaxPlot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetYMaxPlot
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot
  name: GetMaxPlot
  nameWithType: MonteCarloResult.GetMaxPlot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMaxPlot
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot
  name: GetMinPlot
  nameWithType: MonteCarloResult.GetMinPlot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.GetMinPlot
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot
  name: CreatePlot
  nameWithType: MonteCarloResult.CreatePlot
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Simulations.MonteCarloResult.CreatePlot
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
