### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  id: IMapper`1
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  langs:
  - csharp
  - vb
  name: IMapper<TElement>
  nameWithType: IMapper<TElement>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>
  type: Interface
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IMapper
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
    startLine: 7
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nInterface for all mappers that have a string key and <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TElement</code> as element.\n"
  example: []
  syntax:
    content: 'public interface IMapper<TElement> : IEnumerable<KeyValuePair<string, TElement>>, IEnumerable'
    typeParameters:
    - id: TElement
    content.vb: >-
      Public Interface IMapper(Of TElement)
          Inherits IEnumerable(Of KeyValuePair(Of String, TElement))
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}.GetEnumerator
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: IMapper(Of TElement)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement)
  name.vb: IMapper(Of TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
  id: ContainsKey(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  langs:
  - csharp
  - vb
  name: ContainsKey(String, Boolean)
  nameWithType: IMapper<TElement>.ContainsKey(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.ContainsKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ContainsKey
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
    startLine: 17
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nGets a value indicating whether a element with given key is in the mapper.\n"
  example: []
  syntax:
    content: bool ContainsKey(string key, bool caseSensitive)
    parameters:
    - id: key
      type: System.String
      description: A key.
    - id: caseSensitive
      type: System.Boolean
      description: Is key case-sensitive.
    return:
      type: System.Boolean
      description: "\nA value indicating whether a element with specified key is in mapper.\n"
    content.vb: Function ContainsKey(key As String, caseSensitive As Boolean) As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey*
  nameWithType.vb: IMapper(Of TElement).ContainsKey(String, Boolean)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).ContainsKey(System.String, System.Boolean)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
  id: GetValue(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  langs:
  - csharp
  - vb
  name: GetValue(String, Boolean)
  nameWithType: IMapper<TElement>.GetValue(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.GetValue(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetValue
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
    startLine: 27
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nGets an element with given key.\n"
  example: []
  syntax:
    content: TElement GetValue(string key, bool caseSensitive)
    parameters:
    - id: key
      type: System.String
      description: A key of the element.
    - id: caseSensitive
      type: System.Boolean
      description: Is key case-sensitive.
    return:
      type: '{TElement}'
      description: "\nThe element or exception.\n"
    content.vb: Function GetValue(key As String, caseSensitive As Boolean) As TElement
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue*
  nameWithType.vb: IMapper(Of TElement).GetValue(String, Boolean)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).GetValue(System.String, System.Boolean)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  id: TryGetValue(System.String,System.Boolean,`0@)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  langs:
  - csharp
  - vb
  name: TryGetValue(String, Boolean, out TElement)
  nameWithType: IMapper<TElement>.TryGetValue(String, Boolean, out TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.TryGetValue(System.String, System.Boolean, out TElement)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: TryGetValue
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
    startLine: 38
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nTries to get the element for given key.\n"
  example: []
  syntax:
    content: bool TryGetValue(string key, bool caseSensitive, out TElement value)
    parameters:
    - id: key
      type: System.String
      description: A key of element.
    - id: caseSensitive
      type: System.Boolean
      description: Is key name case-sensitive.
    - id: value
      type: '{TElement}'
      description: A value of element.
    return:
      type: System.Boolean
      description: "\nA reference to the element.\n"
    content.vb: Function TryGetValue(key As String, caseSensitive As Boolean, ByRef value As TElement) As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue*
  nameWithType.vb: IMapper(Of TElement).TryGetValue(String, Boolean, ByRef TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).TryGetValue(System.String, System.Boolean, ByRef TElement)
  name.vb: TryGetValue(String, Boolean, ByRef TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
  id: Map(System.String,`0)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  langs:
  - csharp
  - vb
  name: Map(String, TElement)
  nameWithType: IMapper<TElement>.Map(String, TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map(System.String, TElement)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Map
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
    startLine: 45
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nMaps the key with given element.\n"
  example: []
  syntax:
    content: void Map(string key, TElement element)
    parameters:
    - id: key
      type: System.String
      description: A key of the element.
    - id: element
      type: '{TElement}'
      description: An element.
    content.vb: Sub Map(key As String, element As TElement)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map*
  nameWithType.vb: IMapper(Of TElement).Map(String, TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map(System.String, TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
  id: Map(System.String[],`0)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  langs:
  - csharp
  - vb
  name: Map(String[], TElement)
  nameWithType: IMapper<TElement>.Map(String[], TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map(System.String[], TElement)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Map
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/IMapper.cs
    startLine: 52
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nMaps the keys with given element.\n"
  example: []
  syntax:
    content: void Map(string[] key, TElement element)
    parameters:
    - id: key
      type: System.String[]
      description: Keys of the element.
    - id: element
      type: '{TElement}'
      description: An element.
    content.vb: Sub Map(key As String(), element As TElement)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map*
  nameWithType.vb: IMapper(Of TElement).Map(String(), TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map(System.String(), TElement)
  name.vb: Map(String(), TElement)
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, TElement>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, TElement)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, TElement>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, TElement)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, TElement>>
  nameWithType: IEnumerable<KeyValuePair<String, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, TElement))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement))
  name.vb: IEnumerable(Of KeyValuePair(Of String, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey
  name: ContainsKey
  nameWithType: IMapper<TElement>.ContainsKey
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.ContainsKey
  nameWithType.vb: IMapper(Of TElement).ContainsKey
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).ContainsKey
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue
  name: GetValue
  nameWithType: IMapper<TElement>.GetValue
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.GetValue
  nameWithType.vb: IMapper(Of TElement).GetValue
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).GetValue
- uid: '{TElement}'
  commentId: '!:TElement'
  definition: TElement
  name: TElement
  nameWithType: TElement
  fullName: TElement
- uid: TElement
  name: TElement
  nameWithType: TElement
  fullName: TElement
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue
  name: TryGetValue
  nameWithType: IMapper<TElement>.TryGetValue
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.TryGetValue
  nameWithType.vb: IMapper(Of TElement).TryGetValue
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).TryGetValue
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map
  name: Map
  nameWithType: IMapper<TElement>.Map
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map
  nameWithType.vb: IMapper(Of TElement).Map
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
