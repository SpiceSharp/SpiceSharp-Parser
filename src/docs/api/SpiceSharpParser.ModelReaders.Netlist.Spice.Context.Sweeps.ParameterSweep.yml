### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep
  id: ParameterSweep
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep
  langs:
  - csharp
  - vb
  name: ParameterSweep
  nameWithType: ParameterSweep
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Sweeps/ParameterSweep.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParameterSweep
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Sweeps/ParameterSweep.cs
    startLine: 7
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  summary: "\nA parameter sweep.\n"
  example: []
  syntax:
    content: public class ParameterSweep
    content.vb: Public Class ParameterSweep
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter
  id: Parameter
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep
  langs:
  - csharp
  - vb
  name: Parameter
  nameWithType: ParameterSweep.Parameter
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Sweeps/ParameterSweep.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Sweeps/ParameterSweep.cs
    startLine: 12
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  summary: "\nGets or sets the parameter for parameter sweep.\n"
  example: []
  syntax:
    content: public Parameter Parameter { get; set; }
    parameters: []
    return:
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    content.vb: Public Property Parameter As Parameter
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep
  id: Sweep
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep
  langs:
  - csharp
  - vb
  name: Sweep
  nameWithType: ParameterSweep.Sweep
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Sweeps/ParameterSweep.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Sweep
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Sweeps/ParameterSweep.cs
    startLine: 17
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  summary: "\nGets or sets the sweep for parameter sweep.\n"
  example: []
  syntax:
    content: public Sweep<double> Sweep { get; set; }
    parameters: []
    return:
      type: SpiceSharp.Simulations.Sweep{System.Double}
    content.vb: Public Property Sweep As Sweep(Of Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter
  name: Parameter
  nameWithType: ParameterSweep.Parameter
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Parameter
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  commentId: T:SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  parent: SpiceSharpParser.Models.Netlist.Spice.Objects
  name: Parameter
  nameWithType: Parameter
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects
  commentId: N:SpiceSharpParser.Models.Netlist.Spice.Objects
  name: SpiceSharpParser.Models.Netlist.Spice.Objects
  nameWithType: SpiceSharpParser.Models.Netlist.Spice.Objects
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep
  name: Sweep
  nameWithType: ParameterSweep.Sweep
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Sweeps.ParameterSweep.Sweep
- uid: SpiceSharp.Simulations.Sweep{System.Double}
  commentId: T:SpiceSharp.Simulations.Sweep{System.Double}
  parent: SpiceSharp.Simulations
  definition: SpiceSharp.Simulations.Sweep`1
  name: Sweep<Double>
  nameWithType: Sweep<Double>
  fullName: SpiceSharp.Simulations.Sweep<System.Double>
  nameWithType.vb: Sweep(Of Double)
  fullName.vb: SpiceSharp.Simulations.Sweep(Of System.Double)
  name.vb: Sweep(Of Double)
  spec.csharp:
  - uid: SpiceSharp.Simulations.Sweep`1
    name: Sweep
    nameWithType: Sweep
    fullName: SpiceSharp.Simulations.Sweep
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharp.Simulations.Sweep`1
    name: Sweep
    nameWithType: Sweep
    fullName: SpiceSharp.Simulations.Sweep
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.Simulations.Sweep`1
  commentId: T:SpiceSharp.Simulations.Sweep`1
  isExternal: true
  name: Sweep<T>
  nameWithType: Sweep<T>
  fullName: SpiceSharp.Simulations.Sweep<T>
  nameWithType.vb: Sweep(Of T)
  fullName.vb: SpiceSharp.Simulations.Sweep(Of T)
  name.vb: Sweep(Of T)
  spec.csharp:
  - uid: SpiceSharp.Simulations.Sweep`1
    name: Sweep
    nameWithType: Sweep
    fullName: SpiceSharp.Simulations.Sweep
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharp.Simulations.Sweep`1
    name: Sweep
    nameWithType: Sweep
    fullName: SpiceSharp.Simulations.Sweep
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharp.Simulations
  commentId: N:SpiceSharp.Simulations
  isExternal: true
  name: SpiceSharp.Simulations
  nameWithType: SpiceSharp.Simulations
  fullName: SpiceSharp.Simulations
