### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  commentId: T:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  id: ParseTreeNonTerminalNode
  parent: SpiceSharpParser.Parsers.Netlist
  children:
  - SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor(SpiceSharpParser.Parsers.Netlist.ParseTreeNode,System.String)
  - SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor(System.String)
  - SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children
  - SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name
  langs:
  - csharp
  - vb
  name: ParseTreeNonTerminalNode
  nameWithType: ParseTreeNonTerminalNode
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParseTreeNonTerminalNode
    path: ../SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
    startLine: 8
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist
  summary: "\nA non-terminal node in a parse tree.\n"
  example: []
  syntax:
    content: 'public class ParseTreeNonTerminalNode : ParseTreeNode'
    content.vb: >-
      Public Class ParseTreeNonTerminalNode
          Inherits ParseTreeNode
  inheritance:
  - System.Object
  - SpiceSharpParser.Parsers.Netlist.ParseTreeNode
  inheritedMembers:
  - SpiceSharpParser.Parsers.Netlist.ParseTreeNode.Parent
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor(System.String)
  commentId: M:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  langs:
  - csharp
  - vb
  name: ParseTreeNonTerminalNode(String)
  nameWithType: ParseTreeNonTerminalNode.ParseTreeNonTerminalNode(String)
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.ParseTreeNonTerminalNode(System.String)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
    startLine: 14
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ParseTreeNonTerminalNode(string name)
    parameters:
    - id: name
      type: System.String
      description: A name of the non-terminal node.
    content.vb: Public Sub New(name As String)
  overload: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor(SpiceSharpParser.Parsers.Netlist.ParseTreeNode,System.String)
  commentId: M:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor(SpiceSharpParser.Parsers.Netlist.ParseTreeNode,System.String)
  id: '#ctor(SpiceSharpParser.Parsers.Netlist.ParseTreeNode,System.String)'
  parent: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  langs:
  - csharp
  - vb
  name: ParseTreeNonTerminalNode(ParseTreeNode, String)
  nameWithType: ParseTreeNonTerminalNode.ParseTreeNonTerminalNode(ParseTreeNode, String)
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.ParseTreeNonTerminalNode(SpiceSharpParser.Parsers.Netlist.ParseTreeNode, System.String)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
    startLine: 25
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ParseTreeNonTerminalNode(ParseTreeNode parent, string name)
    parameters:
    - id: parent
      type: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
      description: A parent of the node.
    - id: name
      type: System.String
      description: A name of the non-terminal node.
    content.vb: Public Sub New(parent As ParseTreeNode, name As String)
  overload: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name
  commentId: P:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name
  id: Name
  parent: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ParseTreeNonTerminalNode.Name
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Name
    path: ../SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
    startLine: 35
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist
  summary: "\nGets name of non-terminal.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children
  commentId: P:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children
  id: Children
  parent: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: ParseTreeNonTerminalNode.Children
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Children
    path: ../SpiceSharpParser/Parsers/Netlist/ParseTreeNonTerminalNode.cs
    startLine: 40
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist
  summary: "\nGets children of non-terminal.\n"
  example: []
  syntax:
    content: public List<ParseTreeNode> Children { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SpiceSharpParser.Parsers.Netlist.ParseTreeNode}
    content.vb: Public ReadOnly Property Children As List(Of ParseTreeNode)
  overload: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SpiceSharpParser.Parsers.Netlist
  commentId: N:SpiceSharpParser.Parsers.Netlist
  name: SpiceSharpParser.Parsers.Netlist
  nameWithType: SpiceSharpParser.Parsers.Netlist
  fullName: SpiceSharpParser.Parsers.Netlist
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
  commentId: T:SpiceSharpParser.Parsers.Netlist.ParseTreeNode
  parent: SpiceSharpParser.Parsers.Netlist
  name: ParseTreeNode
  nameWithType: ParseTreeNode
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNode.Parent
  commentId: P:SpiceSharpParser.Parsers.Netlist.ParseTreeNode.Parent
  parent: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
  name: Parent
  nameWithType: ParseTreeNode.Parent
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNode.Parent
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  commentId: T:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  parent: SpiceSharpParser.Parsers.Netlist
  name: ParseTreeNonTerminalNode
  nameWithType: ParseTreeNonTerminalNode
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor*
  commentId: Overload:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.#ctor
  name: ParseTreeNonTerminalNode
  nameWithType: ParseTreeNonTerminalNode.ParseTreeNonTerminalNode
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.ParseTreeNonTerminalNode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name*
  commentId: Overload:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name
  name: Name
  nameWithType: ParseTreeNonTerminalNode.Name
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Name
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children*
  commentId: Overload:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children
  name: Children
  nameWithType: ParseTreeNonTerminalNode.Children
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode.Children
- uid: System.Collections.Generic.List{SpiceSharpParser.Parsers.Netlist.ParseTreeNode}
  commentId: T:System.Collections.Generic.List{SpiceSharpParser.Parsers.Netlist.ParseTreeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ParseTreeNode>
  nameWithType: List<ParseTreeNode>
  fullName: System.Collections.Generic.List<SpiceSharpParser.Parsers.Netlist.ParseTreeNode>
  nameWithType.vb: List(Of ParseTreeNode)
  fullName.vb: System.Collections.Generic.List(Of SpiceSharpParser.Parsers.Netlist.ParseTreeNode)
  name.vb: List(Of ParseTreeNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
    name: ParseTreeNode
    nameWithType: ParseTreeNode
    fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
    name: ParseTreeNode
    nameWithType: ParseTreeNode
    fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
