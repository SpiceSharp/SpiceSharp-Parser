### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.LexerDynamicRule
  commentId: T:SpiceSharpParser.Lexers.LexerDynamicRule
  id: LexerDynamicRule
  parent: SpiceSharpParser.Lexers
  children:
  - SpiceSharpParser.Lexers.LexerDynamicRule.#ctor(System.Int32,System.String,System.String,System.Func{System.String,System.Tuple{System.String,System.Int32}})
  - SpiceSharpParser.Lexers.LexerDynamicRule.Action
  - SpiceSharpParser.Lexers.LexerDynamicRule.Prefix
  - SpiceSharpParser.Lexers.LexerDynamicRule.RuleName
  - SpiceSharpParser.Lexers.LexerDynamicRule.TokenType
  langs:
  - csharp
  - vb
  name: LexerDynamicRule
  nameWithType: LexerDynamicRule
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerDynamicRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: LexerDynamicRule
    path: ../SpiceSharpParser/Lexers/LexerDynamicRule.cs
    startLine: 4
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  syntax:
    content: public class LexerDynamicRule
    content.vb: Public Class LexerDynamicRule
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.#ctor(System.Int32,System.String,System.String,System.Func{System.String,System.Tuple{System.String,System.Int32}})
  commentId: M:SpiceSharpParser.Lexers.LexerDynamicRule.#ctor(System.Int32,System.String,System.String,System.Func{System.String,System.Tuple{System.String,System.Int32}})
  id: '#ctor(System.Int32,System.String,System.String,System.Func{System.String,System.Tuple{System.String,System.Int32}})'
  parent: SpiceSharpParser.Lexers.LexerDynamicRule
  langs:
  - csharp
  - vb
  name: LexerDynamicRule(Int32, String, String, Func<String, Tuple<String, Int32>>)
  nameWithType: LexerDynamicRule.LexerDynamicRule(Int32, String, String, Func<String, Tuple<String, Int32>>)
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.LexerDynamicRule(System.Int32, System.String, System.String, System.Func<System.String, System.Tuple<System.String, System.Int32>>)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerDynamicRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/LexerDynamicRule.cs
    startLine: 9
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.LexerDynamicRule\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public LexerDynamicRule(int tokenType, string ruleName, string prefix, Func<string, Tuple<string, int>> action)
    parameters:
    - id: tokenType
      type: System.Int32
    - id: ruleName
      type: System.String
    - id: prefix
      type: System.String
    - id: action
      type: System.Func{System.String,System.Tuple{System.String,System.Int32}}
    content.vb: Public Sub New(tokenType As Integer, ruleName As String, prefix As String, action As Func(Of String, Tuple(Of String, Integer)))
  overload: SpiceSharpParser.Lexers.LexerDynamicRule.#ctor*
  nameWithType.vb: LexerDynamicRule.LexerDynamicRule(Int32, String, String, Func(Of String, Tuple(Of String, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Lexers.LexerDynamicRule.LexerDynamicRule(System.Int32, System.String, System.String, System.Func(Of System.String, System.Tuple(Of System.String, System.Int32)))
  name.vb: LexerDynamicRule(Int32, String, String, Func(Of String, Tuple(Of String, Int32)))
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.TokenType
  commentId: P:SpiceSharpParser.Lexers.LexerDynamicRule.TokenType
  id: TokenType
  parent: SpiceSharpParser.Lexers.LexerDynamicRule
  langs:
  - csharp
  - vb
  name: TokenType
  nameWithType: LexerDynamicRule.TokenType
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.TokenType
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerDynamicRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: TokenType
    path: ../SpiceSharpParser/Lexers/LexerDynamicRule.cs
    startLine: 17
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  syntax:
    content: public int TokenType { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TokenType As Integer
  overload: SpiceSharpParser.Lexers.LexerDynamicRule.TokenType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.RuleName
  commentId: P:SpiceSharpParser.Lexers.LexerDynamicRule.RuleName
  id: RuleName
  parent: SpiceSharpParser.Lexers.LexerDynamicRule
  langs:
  - csharp
  - vb
  name: RuleName
  nameWithType: LexerDynamicRule.RuleName
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.RuleName
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerDynamicRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: RuleName
    path: ../SpiceSharpParser/Lexers/LexerDynamicRule.cs
    startLine: 19
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  syntax:
    content: public string RuleName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RuleName As String
  overload: SpiceSharpParser.Lexers.LexerDynamicRule.RuleName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.Prefix
  commentId: P:SpiceSharpParser.Lexers.LexerDynamicRule.Prefix
  id: Prefix
  parent: SpiceSharpParser.Lexers.LexerDynamicRule
  langs:
  - csharp
  - vb
  name: Prefix
  nameWithType: LexerDynamicRule.Prefix
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.Prefix
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerDynamicRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Prefix
    path: ../SpiceSharpParser/Lexers/LexerDynamicRule.cs
    startLine: 21
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  syntax:
    content: public string Prefix { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Prefix As String
  overload: SpiceSharpParser.Lexers.LexerDynamicRule.Prefix*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.Action
  commentId: P:SpiceSharpParser.Lexers.LexerDynamicRule.Action
  id: Action
  parent: SpiceSharpParser.Lexers.LexerDynamicRule
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: LexerDynamicRule.Action
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.Action
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerDynamicRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Action
    path: ../SpiceSharpParser/Lexers/LexerDynamicRule.cs
    startLine: 23
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  syntax:
    content: public Func<string, Tuple<string, int>> Action { get; }
    parameters: []
    return:
      type: System.Func{System.String,System.Tuple{System.String,System.Int32}}
    content.vb: Public ReadOnly Property Action As Func(Of String, Tuple(Of String, Integer))
  overload: SpiceSharpParser.Lexers.LexerDynamicRule.Action*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SpiceSharpParser.Lexers
  commentId: N:SpiceSharpParser.Lexers
  name: SpiceSharpParser.Lexers
  nameWithType: SpiceSharpParser.Lexers
  fullName: SpiceSharpParser.Lexers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.LexerDynamicRule
  commentId: T:SpiceSharpParser.Lexers.LexerDynamicRule
  parent: SpiceSharpParser.Lexers
  name: LexerDynamicRule
  nameWithType: LexerDynamicRule
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.LexerDynamicRule.#ctor
  name: LexerDynamicRule
  nameWithType: LexerDynamicRule.LexerDynamicRule
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.LexerDynamicRule
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String,System.Tuple{System.String,System.Int32}}
  commentId: T:System.Func{System.String,System.Tuple{System.String,System.Int32}}
  parent: System
  definition: System.Func`2
  name: Func<String, Tuple<String, Int32>>
  nameWithType: Func<String, Tuple<String, Int32>>
  fullName: System.Func<System.String, System.Tuple<System.String, System.Int32>>
  nameWithType.vb: Func(Of String, Tuple(Of String, Int32))
  fullName.vb: System.Func(Of System.String, System.Tuple(Of System.String, System.Int32))
  name.vb: Func(Of String, Tuple(Of String, Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.TokenType*
  commentId: Overload:SpiceSharpParser.Lexers.LexerDynamicRule.TokenType
  name: TokenType
  nameWithType: LexerDynamicRule.TokenType
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.TokenType
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.RuleName*
  commentId: Overload:SpiceSharpParser.Lexers.LexerDynamicRule.RuleName
  name: RuleName
  nameWithType: LexerDynamicRule.RuleName
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.RuleName
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.Prefix*
  commentId: Overload:SpiceSharpParser.Lexers.LexerDynamicRule.Prefix
  name: Prefix
  nameWithType: LexerDynamicRule.Prefix
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.Prefix
- uid: SpiceSharpParser.Lexers.LexerDynamicRule.Action*
  commentId: Overload:SpiceSharpParser.Lexers.LexerDynamicRule.Action
  name: Action
  nameWithType: LexerDynamicRule.Action
  fullName: SpiceSharpParser.Lexers.LexerDynamicRule.Action
