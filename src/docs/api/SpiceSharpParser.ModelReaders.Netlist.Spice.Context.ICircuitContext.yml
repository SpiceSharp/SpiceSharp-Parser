### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  id: ICircuitContext
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes(SpiceSharp.Components.Component,SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read(SpiceSharpParser.Models.Netlist.Spice.Objects.Statements,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage(System.String,System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter,System.Boolean,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity,System.String,System.String,System.Boolean,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory
  langs:
  - csharp
  - vb
  name: ICircuitContext
  nameWithType: ICircuitContext
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  type: Interface
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ICircuitContext
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public interface ICircuitContext
    content.vb: Public Interface ICircuitContext
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations
  id: SimulationPreparations
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: SimulationPreparations
  nameWithType: ICircuitContext.SimulationPreparations
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SimulationPreparations
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 15
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets the simulation parameters.\n"
  example: []
  syntax:
    content: ISimulationPreparations SimulationPreparations { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ISimulationPreparations
    content.vb: ReadOnly Property SimulationPreparations As ISimulationPreparations
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent
  id: Parent
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ICircuitContext.Parent
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parent
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 20
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets the parent of the context.\n"
  example: []
  syntax:
    content: ICircuitContext Parent { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
    content.vb: ReadOnly Property Parent As ICircuitContext
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters
  id: Exporters
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: Exporters
  nameWithType: ICircuitContext.Exporters
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Exporters
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 25
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets exporter mapper.\n"
  example: []
  syntax:
    content: IMapper<Exporter> Exporters { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter}
    content.vb: ReadOnly Property Exporters As IMapper(Of Exporter)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator
  id: Evaluator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: Evaluator
  nameWithType: ICircuitContext.Evaluator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Evaluator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 30
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or set circuit evaluator.\n"
  example: []
  syntax:
    content: ICircuitEvaluator Evaluator { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
    content.vb: ReadOnly Property Evaluator As ICircuitEvaluator
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children
  id: Children
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: ICircuitContext.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Children
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 35
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets the children of the reading context.\n"
  example: []
  syntax:
    content: ICollection<ICircuitContext> Children { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext}
    content.vb: ReadOnly Property Children As ICollection(Of ICircuitContext)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits
  id: AvailableSubcircuits
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: AvailableSubcircuits
  nameWithType: ICircuitContext.AvailableSubcircuits
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AvailableSubcircuits
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 40
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets the list of available subcircuit for the context.\n"
  example: []
  syntax:
    content: ICollection<SubCircuit> AvailableSubcircuits { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit}
    content.vb: ReadOnly Property AvailableSubcircuits As ICollection(Of SubCircuit)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result
  id: Result
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: ICircuitContext.Result
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Result
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 45
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets the result service for the context.\n"
  example: []
  syntax:
    content: IResultService Result { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
    content.vb: ReadOnly Property Result As IResultService
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator
  id: NameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: NameGenerator
  nameWithType: ICircuitContext.NameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: NameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 50
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or set name generator.\n"
  example: []
  syntax:
    content: INameGenerator NameGenerator { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
    content.vb: ReadOnly Property NameGenerator As INameGenerator
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry
  id: ModelsRegistry
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: ModelsRegistry
  nameWithType: ICircuitContext.ModelsRegistry
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ModelsRegistry
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 55
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets the stochastic models registry.\n"
  example: []
  syntax:
    content: IModelsRegistry ModelsRegistry { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models.IModelsRegistry
    content.vb: ReadOnly Property ModelsRegistry As IModelsRegistry
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader
  id: StatementsReader
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: StatementsReader
  nameWithType: ICircuitContext.StatementsReader
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: StatementsReader
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 60
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or sets the statements reader.\n"
  example: []
  syntax:
    content: ISpiceStatementsReader StatementsReader { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsReader
    content.vb: ReadOnly Property StatementsReader As ISpiceStatementsReader
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader
  id: WaveformReader
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: WaveformReader
  nameWithType: ICircuitContext.WaveformReader
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: WaveformReader
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 65
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or sets the waveform reader.\n"
  example: []
  syntax:
    content: IWaveformReader WaveformReader { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.IWaveformReader
    content.vb: ReadOnly Property WaveformReader As IWaveformReader
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity
  id: CaseSensitivity
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: CaseSensitivity
  nameWithType: ICircuitContext.CaseSensitivity
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CaseSensitivity
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 70
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or sets case-sensitivity settings.\n"
  example: []
  syntax:
    content: ISpiceNetlistCaseSensitivitySettings CaseSensitivity { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
    content.vb: ReadOnly Property CaseSensitivity As ISpiceNetlistCaseSensitivitySettings
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory
  id: WorkingDirectory
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: WorkingDirectory
  nameWithType: ICircuitContext.WorkingDirectory
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: WorkingDirectory
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 75
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or sets working directory.\n"
  example: []
  syntax:
    content: string WorkingDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property WorkingDirectory As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData
  id: InstanceData
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: InstanceData
  nameWithType: ICircuitContext.InstanceData
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: InstanceData
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 80
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nGets or sets instance data.\n"
  example: []
  syntax:
    content: InstanceData InstanceData { get; }
    parameters: []
    return:
      type: SpiceSharp.Circuits.InstanceData
    content.vb: ReadOnly Property InstanceData As InstanceData
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity,System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity,System.String,System.String,System.Boolean,System.Boolean)
  id: SetParameter(SpiceSharp.Circuits.Entity,System.String,System.String,System.Boolean,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: SetParameter(Entity, String, String, Boolean, Boolean)
  nameWithType: ICircuitContext.SetParameter(Entity, String, String, Boolean, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity, System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 90
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nSets parameter of entity to value of expression.\n"
  example: []
  syntax:
    content: void SetParameter(Entity entity, string parameterName, string valueExpression, bool beforeTemperature = true, bool onload = true)
    parameters:
    - id: entity
      type: SpiceSharp.Circuits.Entity
      description: Entity.
    - id: parameterName
      type: System.String
      description: Parameter name.
    - id: valueExpression
      type: System.String
      description: Value expression.
    - id: beforeTemperature
      type: System.Boolean
      description: Should be re-evaluated before temperature.
    - id: onload
      type: System.Boolean
      description: Should be re-evaluated OnBeforeLoad.
    content.vb: Sub SetParameter(entity As Entity, parameterName As String, valueExpression As String, beforeTemperature As Boolean = True, onload As Boolean = True)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter*
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter,System.Boolean,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter,System.Boolean,System.Boolean)
  id: SetParameter(SpiceSharp.Circuits.Entity,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter,System.Boolean,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: SetParameter(Entity, String, Parameter, Boolean, Boolean)
  nameWithType: ICircuitContext.SetParameter(Entity, String, Parameter, Boolean, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter(SpiceSharp.Circuits.Entity, System.String, SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 100
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nSets parameter of entity to value of expression.\n"
  example: []
  syntax:
    content: void SetParameter(Entity entity, string parameterName, Parameter valueExpression, bool beforeTemperature = true, bool onload = true)
    parameters:
    - id: entity
      type: SpiceSharp.Circuits.Entity
      description: Entity.
    - id: parameterName
      type: System.String
      description: Parameter name.
    - id: valueExpression
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
      description: Value expression.
    - id: beforeTemperature
      type: System.Boolean
      description: Should be re-evaluated before temperature.
    - id: onload
      type: System.Boolean
      description: Should be re-evaluated OnBeforeLoad.
    content.vb: Sub SetParameter(entity As Entity, parameterName As String, valueExpression As Parameter, beforeTemperature As Boolean = True, onload As Boolean = True)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter*
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage(System.String,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage(System.String,System.String)
  id: SetICVoltage(System.String,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: SetICVoltage(String, String)
  nameWithType: ICircuitContext.SetICVoltage(String, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetICVoltage
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 107
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nSets the initial voltage.\n"
  example: []
  syntax:
    content: void SetICVoltage(string nodeName, string expression)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name.
    - id: expression
      type: System.String
      description: Node voltage expression.
    content.vb: Sub SetICVoltage(nodeName As String, expression As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage*
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes(SpiceSharp.Components.Component,SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes(SpiceSharp.Components.Component,SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection)
  id: CreateNodes(SpiceSharp.Components.Component,SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: CreateNodes(Component, ParameterCollection)
  nameWithType: ICircuitContext.CreateNodes(Component, ParameterCollection)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes(SpiceSharp.Components.Component, SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateNodes
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 114
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nCreates nodes for a component.\n"
  example: []
  syntax:
    content: void CreateNodes(Component component, ParameterCollection parameters)
    parameters:
    - id: component
      type: SpiceSharp.Components.Component
      description: A component
    - id: parameters
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection
      description: Parameters of component
    content.vb: Sub CreateNodes(component As Component, parameters As ParameterCollection)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes*
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read(SpiceSharpParser.Models.Netlist.Spice.Objects.Statements,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read(SpiceSharpParser.Models.Netlist.Spice.Objects.Statements,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer)
  id: Read(SpiceSharpParser.Models.Netlist.Spice.Objects.Statements,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  langs:
  - csharp
  - vb
  name: Read(Statements, ISpiceStatementsOrderer)
  nameWithType: ICircuitContext.Read(Statements, ISpiceStatementsOrderer)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read(SpiceSharpParser.Models.Netlist.Spice.Objects.Statements, SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Read
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/ICircuitContext.cs
    startLine: 121
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nReads the statements with given order.\n"
  example: []
  syntax:
    content: void Read(Statements statements, ISpiceStatementsOrderer orderer)
    parameters:
    - id: statements
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.Statements
      description: Statements.
    - id: orderer
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer
      description: Orderer of statements.
    content.vb: Sub Read(statements As Statements, orderer As ISpiceStatementsOrderer)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read*
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations
  name: SimulationPreparations
  nameWithType: ICircuitContext.SimulationPreparations
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SimulationPreparations
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ISimulationPreparations
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ISimulationPreparations
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: ISimulationPreparations
  nameWithType: ISimulationPreparations
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ISimulationPreparations
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent
  name: Parent
  nameWithType: ICircuitContext.Parent
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Parent
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: ICircuitContext
  nameWithType: ICircuitContext
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters
  name: Exporters
  nameWithType: ICircuitContext.Exporters
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Exporters
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter}
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter}
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  name: IMapper<Exporter>
  nameWithType: IMapper<Exporter>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter>
  nameWithType.vb: IMapper(Of Exporter)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter)
  name.vb: IMapper(Of Exporter)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter
    name: Exporter
    nameWithType: Exporter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter
    name: Exporter
    nameWithType: Exporter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Exporters.Exporter
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  name: IMapper<TElement>
  nameWithType: IMapper<TElement>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>
  nameWithType.vb: IMapper(Of TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement)
  name.vb: IMapper(Of TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator
  name: Evaluator
  nameWithType: ICircuitContext.Evaluator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Evaluator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: ICircuitEvaluator
  nameWithType: ICircuitEvaluator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children
  name: Children
  nameWithType: ICircuitContext.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Children
- uid: System.Collections.Generic.ICollection{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext}
  commentId: T:System.Collections.Generic.ICollection{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ICircuitContext>
  nameWithType: ICollection<ICircuitContext>
  fullName: System.Collections.Generic.ICollection<SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext>
  nameWithType.vb: ICollection(Of ICircuitContext)
  fullName.vb: System.Collections.Generic.ICollection(Of SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext)
  name.vb: ICollection(Of ICircuitContext)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
    name: ICircuitContext
    nameWithType: ICircuitContext
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
    name: ICircuitContext
    nameWithType: ICircuitContext
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits
  name: AvailableSubcircuits
  nameWithType: ICircuitContext.AvailableSubcircuits
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.AvailableSubcircuits
- uid: System.Collections.Generic.ICollection{SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit}
  commentId: T:System.Collections.Generic.ICollection{SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<SubCircuit>
  nameWithType: ICollection<SubCircuit>
  fullName: System.Collections.Generic.ICollection<SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit>
  nameWithType.vb: ICollection(Of SubCircuit)
  fullName.vb: System.Collections.Generic.ICollection(Of SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit)
  name.vb: ICollection(Of SubCircuit)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
    name: SubCircuit
    nameWithType: SubCircuit
    fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
    name: SubCircuit
    nameWithType: SubCircuit
    fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result
  name: Result
  nameWithType: ICircuitContext.Result
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Result
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: IResultService
  nameWithType: IResultService
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator
  name: NameGenerator
  nameWithType: ICircuitContext.NameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.NameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: INameGenerator
  nameWithType: INameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry
  name: ModelsRegistry
  nameWithType: ICircuitContext.ModelsRegistry
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.ModelsRegistry
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models.IModelsRegistry
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models.IModelsRegistry
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models
  name: IModelsRegistry
  nameWithType: IModelsRegistry
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models.IModelsRegistry
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Models
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader
  name: StatementsReader
  nameWithType: ICircuitContext.StatementsReader
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.StatementsReader
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsReader
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsReader
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice
  name: ISpiceStatementsReader
  nameWithType: ISpiceStatementsReader
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsReader
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice
  name: SpiceSharpParser.ModelReaders.Netlist.Spice
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader
  name: WaveformReader
  nameWithType: ICircuitContext.WaveformReader
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WaveformReader
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.IWaveformReader
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.IWaveformReader
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers
  name: IWaveformReader
  nameWithType: IWaveformReader
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.IWaveformReader
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity
  name: CaseSensitivity
  nameWithType: ICircuitContext.CaseSensitivity
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CaseSensitivity
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice
  name: ISpiceNetlistCaseSensitivitySettings
  nameWithType: ISpiceNetlistCaseSensitivitySettings
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory
  name: WorkingDirectory
  nameWithType: ICircuitContext.WorkingDirectory
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.WorkingDirectory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData
  name: InstanceData
  nameWithType: ICircuitContext.InstanceData
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.InstanceData
- uid: SpiceSharp.Circuits.InstanceData
  commentId: T:SpiceSharp.Circuits.InstanceData
  parent: SpiceSharp.Circuits
  isExternal: true
  name: InstanceData
  nameWithType: InstanceData
  fullName: SpiceSharp.Circuits.InstanceData
- uid: SpiceSharp.Circuits
  commentId: N:SpiceSharp.Circuits
  isExternal: true
  name: SpiceSharp.Circuits
  nameWithType: SpiceSharp.Circuits
  fullName: SpiceSharp.Circuits
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter
  name: SetParameter
  nameWithType: ICircuitContext.SetParameter
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetParameter
- uid: SpiceSharp.Circuits.Entity
  commentId: T:SpiceSharp.Circuits.Entity
  parent: SpiceSharp.Circuits
  isExternal: true
  name: Entity
  nameWithType: Entity
  fullName: SpiceSharp.Circuits.Entity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  commentId: T:SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  parent: SpiceSharpParser.Models.Netlist.Spice.Objects
  name: Parameter
  nameWithType: Parameter
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects
  commentId: N:SpiceSharpParser.Models.Netlist.Spice.Objects
  name: SpiceSharpParser.Models.Netlist.Spice.Objects
  nameWithType: SpiceSharpParser.Models.Netlist.Spice.Objects
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage
  name: SetICVoltage
  nameWithType: ICircuitContext.SetICVoltage
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.SetICVoltage
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes
  name: CreateNodes
  nameWithType: ICircuitContext.CreateNodes
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.CreateNodes
- uid: SpiceSharp.Components.Component
  commentId: T:SpiceSharp.Components.Component
  parent: SpiceSharp.Components
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: SpiceSharp.Components.Component
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection
  commentId: T:SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection
  parent: SpiceSharpParser.Models.Netlist.Spice.Objects
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.ParameterCollection
- uid: SpiceSharp.Components
  commentId: N:SpiceSharp.Components
  isExternal: true
  name: SpiceSharp.Components
  nameWithType: SpiceSharp.Components
  fullName: SpiceSharp.Components
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read
  name: Read
  nameWithType: ICircuitContext.Read
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitContext.Read
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Statements
  commentId: T:SpiceSharpParser.Models.Netlist.Spice.Objects.Statements
  parent: SpiceSharpParser.Models.Netlist.Spice.Objects
  name: Statements
  nameWithType: Statements
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Statements
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice
  name: ISpiceStatementsOrderer
  nameWithType: ISpiceStatementsOrderer
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceStatementsOrderer
