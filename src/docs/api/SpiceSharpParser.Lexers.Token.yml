### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.Token
  commentId: T:SpiceSharpParser.Lexers.Token
  id: Token
  parent: SpiceSharpParser.Lexers
  children:
  - SpiceSharpParser.Lexers.Token.#ctor(System.Int32,System.String,System.Int32)
  - SpiceSharpParser.Lexers.Token.Lexem
  - SpiceSharpParser.Lexers.Token.LineNumber
  - SpiceSharpParser.Lexers.Token.Type
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: Token
  fullName: SpiceSharpParser.Lexers.Token
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Token.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Token
    path: ../SpiceSharpParser/Lexers/Token.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nA token produces by <xref href=\"SpiceSharpParser.Lexers.Lexer%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class Token
    content.vb: Public Class Token
  inheritance:
  - System.Object
  derivedClasses:
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Lexers.Token.#ctor(System.Int32,System.String,System.Int32)
  commentId: M:SpiceSharpParser.Lexers.Token.#ctor(System.Int32,System.String,System.Int32)
  id: '#ctor(System.Int32,System.String,System.Int32)'
  parent: SpiceSharpParser.Lexers.Token
  langs:
  - csharp
  - vb
  name: Token(Int32, String, Int32)
  nameWithType: Token.Token(Int32, String, Int32)
  fullName: SpiceSharpParser.Lexers.Token.Token(System.Int32, System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Token.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/Token.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.Token\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Token(int tokenType, string lexem, int lineNumber)
    parameters:
    - id: tokenType
      type: System.Int32
    - id: lexem
      type: System.String
    - id: lineNumber
      type: System.Int32
    content.vb: Public Sub New(tokenType As Integer, lexem As String, lineNumber As Integer)
  overload: SpiceSharpParser.Lexers.Token.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.Token.Type
  commentId: P:SpiceSharpParser.Lexers.Token.Type
  id: Type
  parent: SpiceSharpParser.Lexers.Token
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Token.Type
  fullName: SpiceSharpParser.Lexers.Token.Type
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Token.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Type
    path: ../SpiceSharpParser/Lexers/Token.cs
    startLine: 20
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets token type.\n"
  example: []
  syntax:
    content: public int Type { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Type As Integer
  overload: SpiceSharpParser.Lexers.Token.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Lexers.Token.LineNumber
  commentId: P:SpiceSharpParser.Lexers.Token.LineNumber
  id: LineNumber
  parent: SpiceSharpParser.Lexers.Token
  langs:
  - csharp
  - vb
  name: LineNumber
  nameWithType: Token.LineNumber
  fullName: SpiceSharpParser.Lexers.Token.LineNumber
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Token.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: LineNumber
    path: ../SpiceSharpParser/Lexers/Token.cs
    startLine: 25
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets token line number.\n"
  example: []
  syntax:
    content: public int LineNumber { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LineNumber As Integer
  overload: SpiceSharpParser.Lexers.Token.LineNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.Token.Lexem
  commentId: P:SpiceSharpParser.Lexers.Token.Lexem
  id: Lexem
  parent: SpiceSharpParser.Lexers.Token
  langs:
  - csharp
  - vb
  name: Lexem
  nameWithType: Token.Lexem
  fullName: SpiceSharpParser.Lexers.Token.Lexem
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Token.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Lexem
    path: ../SpiceSharpParser/Lexers/Token.cs
    startLine: 30
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets token lexem.\n"
  example: []
  syntax:
    content: public string Lexem { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Lexem As String
  overload: SpiceSharpParser.Lexers.Token.Lexem*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.Lexers.Lexer`1
  commentId: T:SpiceSharpParser.Lexers.Lexer`1
  name: Lexer<TLexerState>
  nameWithType: Lexer<TLexerState>
  fullName: SpiceSharpParser.Lexers.Lexer<TLexerState>
  nameWithType.vb: Lexer(Of TLexerState)
  fullName.vb: SpiceSharpParser.Lexers.Lexer(Of TLexerState)
  name.vb: Lexer(Of TLexerState)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.Lexer`1
    name: Lexer
    nameWithType: Lexer
    fullName: SpiceSharpParser.Lexers.Lexer
  - name: <
    nameWithType: <
    fullName: <
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Lexers.Lexer`1
    name: Lexer
    nameWithType: Lexer
    fullName: SpiceSharpParser.Lexers.Lexer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers
  commentId: N:SpiceSharpParser.Lexers
  name: SpiceSharpParser.Lexers
  nameWithType: SpiceSharpParser.Lexers
  fullName: SpiceSharpParser.Lexers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.Token
  commentId: T:SpiceSharpParser.Lexers.Token
  parent: SpiceSharpParser.Lexers
  name: Token
  nameWithType: Token
  fullName: SpiceSharpParser.Lexers.Token
- uid: SpiceSharpParser.Lexers.Token.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.Token.#ctor
  name: Token
  nameWithType: Token.Token
  fullName: SpiceSharpParser.Lexers.Token.Token
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Lexers.Token.Type*
  commentId: Overload:SpiceSharpParser.Lexers.Token.Type
  name: Type
  nameWithType: Token.Type
  fullName: SpiceSharpParser.Lexers.Token.Type
- uid: SpiceSharpParser.Lexers.Token.LineNumber*
  commentId: Overload:SpiceSharpParser.Lexers.Token.LineNumber
  name: LineNumber
  nameWithType: Token.LineNumber
  fullName: SpiceSharpParser.Lexers.Token.LineNumber
- uid: SpiceSharpParser.Lexers.Token.Lexem*
  commentId: Overload:SpiceSharpParser.Lexers.Token.Lexem
  name: Lexem
  nameWithType: Token.Lexem
  fullName: SpiceSharpParser.Lexers.Token.Lexem
