### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  id: CircuitEvaluator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext(System.String,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression(System.String,System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,System.Double)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts
  langs:
  - csharp
  - vb
  name: CircuitEvaluator
  nameWithType: CircuitEvaluator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CircuitEvaluator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 8
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: 'public class CircuitEvaluator : ICircuitEvaluator'
    content.vb: >-
      Public Class CircuitEvaluator
          Implements ICircuitEvaluator
  inheritance:
  - System.Object
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  id: '#ctor(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts,SpiceSharpParser.Common.Evaluation.EvaluationContext)'
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: CircuitEvaluator(SimulationEvaluationContexts, EvaluationContext)
  nameWithType: CircuitEvaluator.CircuitEvaluator(SimulationEvaluationContexts, EvaluationContext)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CircuitEvaluator(SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts, SpiceSharpParser.Common.Evaluation.EvaluationContext)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public CircuitEvaluator(SimulationEvaluationContexts simulationContexts, EvaluationContext parsingContext)
    parameters:
    - id: simulationContexts
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts
    - id: parsingContext
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    content.vb: Public Sub New(simulationContexts As SimulationEvaluationContexts, parsingContext As EvaluationContext)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed
  id: Seed
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: Seed
  nameWithType: CircuitEvaluator.Seed
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Seed
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 18
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public int? Seed { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Seed As Integer?
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.Seed
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts
  id: SimulationContexts
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: SimulationContexts
  nameWithType: CircuitEvaluator.SimulationContexts
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SimulationContexts
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 25
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: protected SimulationEvaluationContexts SimulationContexts { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts
    content.vb: Protected ReadOnly Property SimulationContexts As SimulationEvaluationContexts
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext
  id: ParsingContext
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: ParsingContext
  nameWithType: CircuitEvaluator.ParsingContext
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParsingContext
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 27
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: protected EvaluationContext ParsingContext { get; }
    parameters: []
    return:
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    content.vb: Protected ReadOnly Property ParsingContext As EvaluationContext
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  id: EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateDouble(String, Simulation)
  nameWithType: CircuitEvaluator.EvaluateDouble(String, Simulation)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String, SpiceSharp.Simulations.Simulation)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: EvaluateDouble
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 36
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  summary: "\nParses an expression to double.\n"
  example: []
  syntax:
    content: public double EvaluateDouble(string expression, Simulation simulation)
    parameters:
    - id: expression
      type: System.String
      description: Expression to parse.
    - id: simulation
      type: SpiceSharp.Simulations.Simulation
    return:
      type: System.Double
      description: "\nA value of expression..\n"
    content.vb: Public Function EvaluateDouble(expression As String, simulation As Simulation) As Double
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String)
  id: EvaluateDouble(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateDouble(String)
  nameWithType: CircuitEvaluator.EvaluateDouble(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: EvaluateDouble
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 57
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public double EvaluateDouble(string expression)
    parameters:
    - id: expression
      type: System.String
    return:
      type: System.Double
    content.vb: Public Function EvaluateDouble(expression As String) As Double
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  id: EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateDouble(Parameter)
  nameWithType: CircuitEvaluator.EvaluateDouble(Parameter)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: EvaluateDouble
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 73
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public double EvaluateDouble(Parameter parameter)
    parameters:
    - id: parameter
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    return:
      type: System.Double
    content.vb: Public Function EvaluateDouble(parameter As Parameter) As Double
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,System.Double)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,System.Double)
  id: SetParameter(System.String,System.Double)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: SetParameter(String, Double)
  nameWithType: CircuitEvaluator.SetParameter(String, Double)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 89
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void SetParameter(string parameterName, double value)
    parameters:
    - id: parameterName
      type: System.String
    - id: value
      type: System.Double
    content.vb: Public Sub SetParameter(parameterName As String, value As Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  id: SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: SetParameter(Simulation, String, Double)
  nameWithType: CircuitEvaluator.SetParameter(Simulation, String, Double)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation, System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 94
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void SetParameter(Simulation simulation, string parameterName, double value)
    parameters:
    - id: simulation
      type: SpiceSharp.Simulations.Simulation
    - id: parameterName
      type: System.String
    - id: value
      type: System.Double
    content.vb: Public Sub SetParameter(simulation As Simulation, parameterName As String, value As Double)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  id: SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: SetParameter(String, Parameter)
  nameWithType: CircuitEvaluator.SetParameter(String, Parameter)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String, SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 99
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void SetParameter(string parameterName, Parameter parameter)
    parameters:
    - id: parameterName
      type: System.String
    - id: parameter
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    content.vb: Public Sub SetParameter(parameterName As String, parameter As Parameter)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String,System.String)
  id: SetParameter(System.String,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: SetParameter(String, String)
  nameWithType: CircuitEvaluator.SetParameter(String, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 104
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void SetParameter(string parameterName, string parameterExpression)
    parameters:
    - id: parameterName
      type: System.String
    - id: parameterExpression
      type: System.String
    content.vb: Public Sub SetParameter(parameterName As String, parameterExpression As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  id: AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: AddFunction(String, List<String>, String)
  nameWithType: CircuitEvaluator.AddFunction(String, List<String>, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String, System.Collections.Generic.List<System.String>, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AddFunction
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 109
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void AddFunction(string functionName, List<string> arguments, string body)
    parameters:
    - id: functionName
      type: System.String
    - id: arguments
      type: System.Collections.Generic.List{System.String}
    - id: body
      type: System.String
    content.vb: Public Sub AddFunction(functionName As String, arguments As List(Of String), body As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  nameWithType.vb: CircuitEvaluator.AddFunction(String, List(Of String), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String, System.Collections.Generic.List(Of System.String), System.String)
  name.vb: AddFunction(String, List(Of String), String)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  id: AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: AddFunction(String, IFunction<Double, Double>)
  nameWithType: CircuitEvaluator.AddFunction(String, IFunction<Double, Double>)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String, SpiceSharpParser.Common.Evaluation.IFunction<System.Double, System.Double>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AddFunction
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 129
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void AddFunction(string functionName, IFunction<double, double> function)
    parameters:
    - id: functionName
      type: System.String
    - id: function
      type: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
    content.vb: Public Sub AddFunction(functionName As String, function As IFunction(Of Double, Double))
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  nameWithType.vb: CircuitEvaluator.AddFunction(String, IFunction(Of Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction(System.String, SpiceSharpParser.Common.Evaluation.IFunction(Of System.Double, System.Double))
  name.vb: AddFunction(String, IFunction(Of Double, Double))
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression(System.String,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression(System.String,System.String)
  id: SetNamedExpression(System.String,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: SetNamedExpression(String, String)
  nameWithType: CircuitEvaluator.SetNamedExpression(String, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetNamedExpression
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 134
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public void SetNamedExpression(string expressionName, string expression)
    parameters:
    - id: expressionName
      type: System.String
    - id: expression
      type: System.String
    content.vb: Public Sub SetNamedExpression(expressionName As String, expression As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  id: GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: GetEvaluationContext(Simulation)
  nameWithType: CircuitEvaluator.GetEvaluationContext(Simulation)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetEvaluationContext
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 149
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public EvaluationContext GetEvaluationContext(Simulation simulation)
    parameters:
    - id: simulation
      type: SpiceSharp.Simulations.Simulation
    return:
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    content.vb: Public Function GetEvaluationContext(simulation As Simulation) As EvaluationContext
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  id: HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: HaveParameter(Simulation, String)
  nameWithType: CircuitEvaluator.HaveParameter(Simulation, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: HaveParameter
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 159
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public bool HaveParameter(Simulation simulation, string parameterName)
    parameters:
    - id: simulation
      type: SpiceSharp.Simulations.Simulation
    - id: parameterName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function HaveParameter(simulation As Simulation, parameterName As String) As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext(System.String,System.Boolean)
  id: CreateChildContext(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: CreateChildContext(String, Boolean)
  nameWithType: CircuitEvaluator.CreateChildContext(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateChildContext
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 164
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public EvaluationContext CreateChildContext(string name, bool addToChildren)
    parameters:
    - id: name
      type: System.String
    - id: addToChildren
      type: System.Boolean
    return:
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    content.vb: Public Function CreateChildContext(name As String, addToChildren As Boolean) As EvaluationContext
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  id: GetSeed(SpiceSharp.Simulations.Simulation)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: GetSeed(Simulation)
  nameWithType: CircuitEvaluator.GetSeed(Simulation)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetSeed
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 169
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public int? GetSeed(Simulation sim)
    parameters:
    - id: sim
      type: SpiceSharp.Simulations.Simulation
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Function GetSeed(sim As Simulation) As Integer?
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression(System.String)
  id: GetExpression(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: GetExpression(String)
  nameWithType: CircuitEvaluator.GetExpression(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpression
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 174
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public Expression GetExpression(string expressionName)
    parameters:
    - id: expressionName
      type: System.String
    return:
      type: SpiceSharpParser.Common.Evaluation.Expression
    content.vb: Public Function GetExpression(expressionName As String) As Expression
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames
  id: GetExpressionNames
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator
  langs:
  - csharp
  - vb
  name: GetExpressionNames()
  nameWithType: CircuitEvaluator.GetExpressionNames()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpressionNames
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/CircuitEvaluator.cs
    startLine: 179
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  syntax:
    content: public IEnumerable<string> GetExpressionNames()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Function GetExpressionNames As IEnumerable(Of String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: ICircuitEvaluator
  nameWithType: ICircuitEvaluator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.#ctor*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.#ctor
  name: CircuitEvaluator
  nameWithType: CircuitEvaluator.CircuitEvaluator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CircuitEvaluator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: SimulationEvaluationContexts
  nameWithType: SimulationEvaluationContexts
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.SimulationEvaluationContexts
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext
  commentId: T:SpiceSharpParser.Common.Evaluation.EvaluationContext
  parent: SpiceSharpParser.Common.Evaluation
  name: EvaluationContext
  nameWithType: EvaluationContext
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed
  name: Seed
  nameWithType: CircuitEvaluator.Seed
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.Seed
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.Seed
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.Seed
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  name: Seed
  nameWithType: ICircuitEvaluator.Seed
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.Seed
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts
  name: SimulationContexts
  nameWithType: CircuitEvaluator.SimulationContexts
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SimulationContexts
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext
  name: ParsingContext
  nameWithType: CircuitEvaluator.ParsingContext
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.ParsingContext
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble
  name: EvaluateDouble
  nameWithType: CircuitEvaluator.EvaluateDouble
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.EvaluateDouble
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: EvaluateDouble(String, Simulation)
  nameWithType: ICircuitEvaluator.EvaluateDouble(String, Simulation)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String, SpiceSharp.Simulations.Simulation)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
    name: EvaluateDouble
    nameWithType: ICircuitEvaluator.EvaluateDouble
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String,SpiceSharp.Simulations.Simulation)
    name: EvaluateDouble
    nameWithType: ICircuitEvaluator.EvaluateDouble
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharp.Simulations.Simulation
  commentId: T:SpiceSharp.Simulations.Simulation
  parent: SpiceSharp.Simulations
  isExternal: true
  name: Simulation
  nameWithType: Simulation
  fullName: SpiceSharp.Simulations.Simulation
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SpiceSharp.Simulations
  commentId: N:SpiceSharp.Simulations
  isExternal: true
  name: SpiceSharp.Simulations
  nameWithType: SpiceSharp.Simulations
  fullName: SpiceSharp.Simulations
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: EvaluateDouble(String)
  nameWithType: ICircuitEvaluator.EvaluateDouble(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String)
    name: EvaluateDouble
    nameWithType: ICircuitEvaluator.EvaluateDouble
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(System.String)
    name: EvaluateDouble
    nameWithType: ICircuitEvaluator.EvaluateDouble
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  name: EvaluateDouble(Parameter)
  nameWithType: ICircuitEvaluator.EvaluateDouble(Parameter)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
    name: EvaluateDouble
    nameWithType: ICircuitEvaluator.EvaluateDouble
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble(SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
    name: EvaluateDouble
    nameWithType: ICircuitEvaluator.EvaluateDouble
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.EvaluateDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  commentId: T:SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  parent: SpiceSharpParser.Models.Netlist.Spice.Objects
  name: Parameter
  nameWithType: Parameter
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects
  commentId: N:SpiceSharpParser.Models.Netlist.Spice.Objects
  name: SpiceSharpParser.Models.Netlist.Spice.Objects
  nameWithType: SpiceSharpParser.Models.Netlist.Spice.Objects
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter
  name: SetParameter
  nameWithType: CircuitEvaluator.SetParameter
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetParameter
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.Double)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.Double)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: SetParameter(String, Double)
  nameWithType: ICircuitEvaluator.SetParameter(String, Double)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String, System.Double)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.Double)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.Double)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: SetParameter(Simulation, String, Double)
  nameWithType: ICircuitEvaluator.SetParameter(Simulation, String, Double)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation, System.String, System.Double)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(SpiceSharp.Simulations.Simulation,System.String,System.Double)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: SetParameter(String, Parameter)
  nameWithType: ICircuitEvaluator.SetParameter(String, Parameter)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String, SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.Parameter
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: SetParameter(String, String)
  nameWithType: ICircuitEvaluator.SetParameter(String, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String, System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.String)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter(System.String,System.String)
    name: SetParameter
    nameWithType: ICircuitEvaluator.SetParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction
  name: AddFunction
  nameWithType: CircuitEvaluator.AddFunction
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.AddFunction
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: AddFunction(String, List<String>, String)
  nameWithType: ICircuitEvaluator.AddFunction(String, List<String>, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String, System.Collections.Generic.List<System.String>, System.String)
  nameWithType.vb: ICircuitEvaluator.AddFunction(String, List(Of String), String)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String, System.Collections.Generic.List(Of System.String), System.String)
  name.vb: AddFunction(String, List(Of String), String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
    name: AddFunction
    nameWithType: ICircuitEvaluator.AddFunction
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,System.Collections.Generic.List{System.String},System.String)
    name: AddFunction
    nameWithType: ICircuitEvaluator.AddFunction
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: AddFunction(String, IFunction<Double, Double>)
  nameWithType: ICircuitEvaluator.AddFunction(String, IFunction<Double, Double>)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String, SpiceSharpParser.Common.Evaluation.IFunction<System.Double, System.Double>)
  nameWithType.vb: ICircuitEvaluator.AddFunction(String, IFunction(Of Double, Double))
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String, SpiceSharpParser.Common.Evaluation.IFunction(Of System.Double, System.Double))
  name.vb: AddFunction(String, IFunction(Of Double, Double))
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
    name: AddFunction
    nameWithType: ICircuitEvaluator.AddFunction
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double})
    name: AddFunction
    nameWithType: ICircuitEvaluator.AddFunction
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.AddFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction{System.Double,System.Double}
  parent: SpiceSharpParser.Common.Evaluation
  definition: SpiceSharpParser.Common.Evaluation.IFunction`2
  name: IFunction<Double, Double>
  nameWithType: IFunction<Double, Double>
  fullName: SpiceSharpParser.Common.Evaluation.IFunction<System.Double, System.Double>
  nameWithType.vb: IFunction(Of Double, Double)
  fullName.vb: SpiceSharpParser.Common.Evaluation.IFunction(Of System.Double, System.Double)
  name.vb: IFunction(Of Double, Double)
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.IFunction`2
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction`2
  name: IFunction<TInputArgumentType, TOutputType>
  nameWithType: IFunction<TInputArgumentType, TOutputType>
  fullName: SpiceSharpParser.Common.Evaluation.IFunction<TInputArgumentType, TOutputType>
  nameWithType.vb: IFunction(Of TInputArgumentType, TOutputType)
  fullName.vb: SpiceSharpParser.Common.Evaluation.IFunction(Of TInputArgumentType, TOutputType)
  name.vb: IFunction(Of TInputArgumentType, TOutputType)
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputArgumentType
    nameWithType: TInputArgumentType
    fullName: TInputArgumentType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutputType
    nameWithType: TOutputType
    fullName: TOutputType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.IFunction`2
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputArgumentType
    nameWithType: TInputArgumentType
    fullName: TInputArgumentType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutputType
    nameWithType: TOutputType
    fullName: TOutputType
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression
  name: SetNamedExpression
  nameWithType: CircuitEvaluator.SetNamedExpression
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.SetNamedExpression
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression(System.String,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression(System.String,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: SetNamedExpression(String, String)
  nameWithType: ICircuitEvaluator.SetNamedExpression(String, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression(System.String, System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression(System.String,System.String)
    name: SetNamedExpression
    nameWithType: ICircuitEvaluator.SetNamedExpression
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression(System.String,System.String)
    name: SetNamedExpression
    nameWithType: ICircuitEvaluator.SetNamedExpression
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.SetNamedExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext
  name: GetEvaluationContext
  nameWithType: CircuitEvaluator.GetEvaluationContext
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetEvaluationContext
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: GetEvaluationContext(Simulation)
  nameWithType: ICircuitEvaluator.GetEvaluationContext(Simulation)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
    name: GetEvaluationContext
    nameWithType: ICircuitEvaluator.GetEvaluationContext
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext(SpiceSharp.Simulations.Simulation)
    name: GetEvaluationContext
    nameWithType: ICircuitEvaluator.GetEvaluationContext
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetEvaluationContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter
  name: HaveParameter
  nameWithType: CircuitEvaluator.HaveParameter
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.HaveParameter
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: HaveParameter(Simulation, String)
  nameWithType: ICircuitEvaluator.HaveParameter(Simulation, String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation, System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
    name: HaveParameter
    nameWithType: ICircuitEvaluator.HaveParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter(SpiceSharp.Simulations.Simulation,System.String)
    name: HaveParameter
    nameWithType: ICircuitEvaluator.HaveParameter
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.HaveParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext
  name: CreateChildContext
  nameWithType: CircuitEvaluator.CreateChildContext
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.CreateChildContext
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: CreateChildContext(String, Boolean)
  nameWithType: ICircuitEvaluator.CreateChildContext(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext(System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext(System.String,System.Boolean)
    name: CreateChildContext
    nameWithType: ICircuitEvaluator.CreateChildContext
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext(System.String,System.Boolean)
    name: CreateChildContext
    nameWithType: ICircuitEvaluator.CreateChildContext
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.CreateChildContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed
  name: GetSeed
  nameWithType: CircuitEvaluator.GetSeed
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetSeed
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: GetSeed(Simulation)
  nameWithType: ICircuitEvaluator.GetSeed(Simulation)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
    name: GetSeed
    nameWithType: ICircuitEvaluator.GetSeed
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed(SpiceSharp.Simulations.Simulation)
    name: GetSeed
    nameWithType: ICircuitEvaluator.GetSeed
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetSeed
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharp.Simulations.Simulation
    name: Simulation
    nameWithType: Simulation
    fullName: SpiceSharp.Simulations.Simulation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression
  name: GetExpression
  nameWithType: CircuitEvaluator.GetExpression
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpression
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  isExternal: true
  name: GetExpression(String)
  nameWithType: ICircuitEvaluator.GetExpression(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression(System.String)
    name: GetExpression
    nameWithType: ICircuitEvaluator.GetExpression
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression(System.String)
    name: GetExpression
    nameWithType: ICircuitEvaluator.GetExpression
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.Expression
  commentId: T:SpiceSharpParser.Common.Evaluation.Expression
  parent: SpiceSharpParser.Common.Evaluation
  name: Expression
  nameWithType: Expression
  fullName: SpiceSharpParser.Common.Evaluation.Expression
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames
  name: GetExpressionNames
  nameWithType: CircuitEvaluator.GetExpressionNames
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.CircuitEvaluator.GetExpressionNames
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator
  name: GetExpressionNames()
  nameWithType: ICircuitEvaluator.GetExpressionNames()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames()
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
    name: GetExpressionNames
    nameWithType: ICircuitEvaluator.GetExpressionNames
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
    name: GetExpressionNames
    nameWithType: ICircuitEvaluator.GetExpressionNames
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.ICircuitEvaluator.GetExpressionNames
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
