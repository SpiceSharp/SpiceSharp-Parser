### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  id: SpiceLexerSettings
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  children:
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive
  langs:
  - csharp
  - vb
  name: SpiceLexerSettings
  nameWithType: SpiceLexerSettings
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexerSettings.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SpiceLexerSettings
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexerSettings.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nSettings for <xref href=\"SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class SpiceLexerSettings
    content.vb: Public Class SpiceLexerSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle
  commentId: P:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle
  id: HasTitle
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  langs:
  - csharp
  - vb
  name: HasTitle
  nameWithType: SpiceLexerSettings.HasTitle
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexerSettings.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: HasTitle
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexerSettings.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nGets or sets a value indicating whether text has a first line with the title.\n"
  example: []
  syntax:
    content: public bool HasTitle { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasTitle As Boolean
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive
  commentId: P:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive
  id: IsDotStatementNameCaseSensitive
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  langs:
  - csharp
  - vb
  name: IsDotStatementNameCaseSensitive
  nameWithType: SpiceLexerSettings.IsDotStatementNameCaseSensitive
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexerSettings.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IsDotStatementNameCaseSensitive
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexerSettings.cs
    startLine: 15
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nGets or sets a value indicating whether dot statements names are case-sensitive.\n"
  example: []
  syntax:
    content: public bool IsDotStatementNameCaseSensitive { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsDotStatementNameCaseSensitive As Boolean
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  name: SpiceLexer
  nameWithType: SpiceLexer
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
- uid: SpiceSharpParser.Lexers.Netlist.Spice
  commentId: N:SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceSharpParser.Lexers.Netlist.Spice
  nameWithType: SpiceSharpParser.Lexers.Netlist.Spice
  fullName: SpiceSharpParser.Lexers.Netlist.Spice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle
  name: HasTitle
  nameWithType: SpiceLexerSettings.HasTitle
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.HasTitle
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive
  name: IsDotStatementNameCaseSensitive
  nameWithType: SpiceLexerSettings.IsDotStatementNameCaseSensitive
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings.IsDotStatementNameCaseSensitive
