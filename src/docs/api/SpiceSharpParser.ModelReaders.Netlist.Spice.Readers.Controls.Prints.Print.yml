### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  id: Print
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.#ctor(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw
  langs:
  - csharp
  - vb
  name: Print
  nameWithType: Print
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Print
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
    startLine: 9
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  summary: "\nRepresents a printed data that has columns and rows.\n"
  example: []
  syntax:
    content: public class Print
    content.vb: Public Class Print
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(System.String,System.String,System.String,System.Nullable{System.Boolean})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.#ctor(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  langs:
  - csharp
  - vb
  name: Print(String)
  nameWithType: Print.Print(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Print(System.String)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
    startLine: 15
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Print(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of print.
    content.vb: Public Sub New(name As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name
  id: Name
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Print.Name
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Name
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
    startLine: 25
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  summary: "\nGets the name of the print.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows
  id: Rows
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  langs:
  - csharp
  - vb
  name: Rows
  nameWithType: Print.Rows
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Rows
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
    startLine: 30
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  summary: "\nGets the rows.\n"
  example: []
  syntax:
    content: public List<Row> Rows { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row}
    content.vb: Public ReadOnly Property Rows As List(Of Row)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames
  id: ColumnNames
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  langs:
  - csharp
  - vb
  name: ColumnNames
  nameWithType: Print.ColumnNames
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ColumnNames
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
    startLine: 35
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  summary: "\nGets the columns names.\n"
  example: []
  syntax:
    content: public List<string> ColumnNames { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property ColumnNames As List(Of String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw
  id: ToRaw
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  langs:
  - csharp
  - vb
  name: ToRaw()
  nameWithType: Print.ToRaw()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ToRaw
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Readers/Controls/Prints/Print.cs
    startLine: 40
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  summary: "\nConvert print data to raw data.\n"
  example: []
  syntax:
    content: public Tuple<string, IEnumerable<string>, IEnumerable<double[]>> ToRaw()
    return:
      type: System.Tuple{System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double[]}}
    content.vb: Public Function ToRaw As Tuple(Of String, IEnumerable(Of String), IEnumerable(Of Double()))
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(System.String,System.String,System.String,System.Nullable{System.Boolean})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print,System.String,System.String,System.String,System.Nullable{System.Boolean})
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print,System.String,System.String,System.String,System.Nullable{System.Boolean})
  name: ToCsv(String, String, String, Nullable<Boolean>)
  nameWithType: PrintCsvWriter.ToCsv(String, String, String, Nullable<Boolean>)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(System.String, System.String, System.String, System.Nullable<System.Boolean>)
  nameWithType.vb: PrintCsvWriter.ToCsv(String, String, String, Nullable(Of Boolean))
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(System.String, System.String, System.String, System.Nullable(Of System.Boolean))
  name.vb: ToCsv(String, String, String, Nullable(Of Boolean))
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(System.String,System.String,System.String,System.Nullable{System.Boolean})
    name: ToCsv
    nameWithType: PrintCsvWriter.ToCsv
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(System.String,System.String,System.String,System.Nullable{System.Boolean})
    name: ToCsv
    nameWithType: PrintCsvWriter.ToCsv
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print,System.String,System.String,System.String,System.Nullable{System.Boolean})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print,System.String,System.String,System.String,System.Nullable{System.Boolean})
  isExternal: true
  name: ToCsv(Print, String, String, String, Nullable<Boolean>)
  nameWithType: PrintCsvWriter.ToCsv(Print, String, String, String, Nullable<Boolean>)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print, System.String, System.String, System.String, System.Nullable<System.Boolean>)
  nameWithType.vb: PrintCsvWriter.ToCsv(Print, String, String, String, Nullable(Of Boolean))
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print, System.String, System.String, System.String, System.Nullable(Of System.Boolean))
  name.vb: ToCsv(Print, String, String, String, Nullable(Of Boolean))
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print,System.String,System.String,System.String,System.Nullable{System.Boolean})
    name: ToCsv
    nameWithType: PrintCsvWriter.ToCsv
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
    name: Print
    nameWithType: Print
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv(SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print,System.String,System.String,System.String,System.Nullable{System.Boolean})
    name: ToCsv
    nameWithType: PrintCsvWriter.ToCsv
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter.ToCsv
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
    name: Print
    nameWithType: Print
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  name: PrintCsvWriter
  nameWithType: PrintCsvWriter
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.PrintCsvWriter
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints
  name: Print
  nameWithType: Print
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.#ctor*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.#ctor
  name: Print
  nameWithType: Print.Print
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Print
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name
  name: Name
  nameWithType: Print.Name
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Name
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows
  name: Rows
  nameWithType: Print.Rows
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.Rows
- uid: System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row}
  commentId: T:System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Row>
  nameWithType: List<Row>
  fullName: System.Collections.Generic.List<SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row>
  nameWithType.vb: List(Of Row)
  fullName.vb: System.Collections.Generic.List(Of SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row)
  name.vb: List(Of Row)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row
    name: Row
    nameWithType: Row
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row
    name: Row
    nameWithType: Row
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Row
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames
  name: ColumnNames
  nameWithType: Print.ColumnNames
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ColumnNames
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw
  name: ToRaw
  nameWithType: Print.ToRaw
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Prints.Print.ToRaw
- uid: System.Tuple{System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double[]}}
  commentId: T:System.Tuple{System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double[]}}
  parent: System
  definition: System.Tuple`3
  name: Tuple<String, IEnumerable<String>, IEnumerable<Double[]>>
  nameWithType: Tuple<String, IEnumerable<String>, IEnumerable<Double[]>>
  fullName: System.Tuple<System.String, System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<System.Double[]>>
  nameWithType.vb: Tuple(Of String, IEnumerable(Of String), IEnumerable(Of Double()))
  fullName.vb: System.Tuple(Of System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of System.Double()))
  name.vb: Tuple(Of String, IEnumerable(Of String), IEnumerable(Of Double()))
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
