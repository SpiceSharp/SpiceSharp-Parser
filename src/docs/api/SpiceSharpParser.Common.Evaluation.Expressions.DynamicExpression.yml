### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  commentId: T:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  id: DynamicExpression
  parent: SpiceSharpParser.Common.Evaluation.Expressions
  children:
  - SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.#ctor(System.String)
  - SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly
  - SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone
  - SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue
  langs:
  - csharp
  - vb
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: DynamicExpression
    path: ../SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
    startLine: 2
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation.Expressions
  syntax:
    content: 'public class DynamicExpression : Expression'
    content.vb: >-
      Public Class DynamicExpression
          Inherits Expression
  inheritance:
  - System.Object
  - SpiceSharpParser.Common.Evaluation.Expression
  inheritedMembers:
  - SpiceSharpParser.Common.Evaluation.Expression.ValueExpression
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.#ctor(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: DynamicExpression(String)
  nameWithType: DynamicExpression.DynamicExpression(String)
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.DynamicExpression(System.String)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
    startLine: 4
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation.Expressions
  syntax:
    content: public DynamicExpression(string expression)
    parameters:
    - id: expression
      type: System.String
    content.vb: Public Sub New(expression As String)
  overload: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly
  commentId: P:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly
  id: CanProvideValueDirectly
  parent: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: CanProvideValueDirectly
  nameWithType: DynamicExpression.CanProvideValueDirectly
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CanProvideValueDirectly
    path: ../SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
    startLine: 9
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation.Expressions
  syntax:
    content: public override bool CanProvideValueDirectly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanProvideValueDirectly As Boolean
  overridden: SpiceSharpParser.Common.Evaluation.Expression.CanProvideValueDirectly
  overload: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone
  commentId: M:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone
  id: Clone
  parent: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: DynamicExpression.Clone()
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Clone
    path: ../SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
    startLine: 11
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation.Expressions
  syntax:
    content: public override Expression Clone()
    return:
      type: SpiceSharpParser.Common.Evaluation.Expression
    content.vb: Public Overrides Function Clone As Expression
  overridden: SpiceSharpParser.Common.Evaluation.Expression.Clone
  overload: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue
  commentId: M:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue
  id: GetValue
  parent: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: GetValue()
  nameWithType: DynamicExpression.GetValue()
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetValue
    path: ../SpiceSharpParser/Common/Evaluation/Expressions/DynamicExpression.cs
    startLine: 16
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation.Expressions
  syntax:
    content: public override double GetValue()
    return:
      type: System.Double
    content.vb: Public Overrides Function GetValue As Double
  overridden: SpiceSharpParser.Common.Evaluation.Expression.GetValue
  overload: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: SpiceSharpParser.Common.Evaluation.Expressions
  commentId: N:SpiceSharpParser.Common.Evaluation.Expressions
  name: SpiceSharpParser.Common.Evaluation.Expressions
  nameWithType: SpiceSharpParser.Common.Evaluation.Expressions
  fullName: SpiceSharpParser.Common.Evaluation.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.Common.Evaluation.Expression
  commentId: T:SpiceSharpParser.Common.Evaluation.Expression
  parent: SpiceSharpParser.Common.Evaluation
  name: Expression
  nameWithType: Expression
  fullName: SpiceSharpParser.Common.Evaluation.Expression
- uid: SpiceSharpParser.Common.Evaluation.Expression.ValueExpression
  commentId: P:SpiceSharpParser.Common.Evaluation.Expression.ValueExpression
  parent: SpiceSharpParser.Common.Evaluation.Expression
  name: ValueExpression
  nameWithType: Expression.ValueExpression
  fullName: SpiceSharpParser.Common.Evaluation.Expression.ValueExpression
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.#ctor*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.#ctor
  name: DynamicExpression
  nameWithType: DynamicExpression.DynamicExpression
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.DynamicExpression
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Common.Evaluation.Expression.CanProvideValueDirectly
  commentId: P:SpiceSharpParser.Common.Evaluation.Expression.CanProvideValueDirectly
  parent: SpiceSharpParser.Common.Evaluation.Expression
  name: CanProvideValueDirectly
  nameWithType: Expression.CanProvideValueDirectly
  fullName: SpiceSharpParser.Common.Evaluation.Expression.CanProvideValueDirectly
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly
  name: CanProvideValueDirectly
  nameWithType: DynamicExpression.CanProvideValueDirectly
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.CanProvideValueDirectly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Common.Evaluation.Expression.Clone
  commentId: M:SpiceSharpParser.Common.Evaluation.Expression.Clone
  parent: SpiceSharpParser.Common.Evaluation.Expression
  name: Clone()
  nameWithType: Expression.Clone()
  fullName: SpiceSharpParser.Common.Evaluation.Expression.Clone()
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.Expression.Clone
    name: Clone
    nameWithType: Expression.Clone
    fullName: SpiceSharpParser.Common.Evaluation.Expression.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.Expression.Clone
    name: Clone
    nameWithType: Expression.Clone
    fullName: SpiceSharpParser.Common.Evaluation.Expression.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone
  name: Clone
  nameWithType: DynamicExpression.Clone
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.Clone
- uid: SpiceSharpParser.Common.Evaluation.Expression.GetValue
  commentId: M:SpiceSharpParser.Common.Evaluation.Expression.GetValue
  parent: SpiceSharpParser.Common.Evaluation.Expression
  name: GetValue()
  nameWithType: Expression.GetValue()
  fullName: SpiceSharpParser.Common.Evaluation.Expression.GetValue()
  spec.csharp:
  - uid: SpiceSharpParser.Common.Evaluation.Expression.GetValue
    name: GetValue
    nameWithType: Expression.GetValue
    fullName: SpiceSharpParser.Common.Evaluation.Expression.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Common.Evaluation.Expression.GetValue
    name: GetValue
    nameWithType: Expression.GetValue
    fullName: SpiceSharpParser.Common.Evaluation.Expression.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue
  name: GetValue
  nameWithType: DynamicExpression.GetValue
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.DynamicExpression.GetValue
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
