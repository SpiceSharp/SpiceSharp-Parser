### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  id: SubcircuitNodeNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.#ctor(System.String,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit
  langs:
  - csharp
  - vb
  name: SubcircuitNodeNameGenerator
  nameWithType: SubcircuitNodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SubcircuitNodeNameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 9
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  syntax:
    content: 'public class SubcircuitNodeNameGenerator : INodeNameGenerator'
    content.vb: >-
      Public Class SubcircuitNodeNameGenerator
          Implements INodeNameGenerator
  inheritance:
  - System.Object
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.#ctor(System.String,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.#ctor(System.String,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  id: '#ctor(System.String,System.String,SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)'
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: SubcircuitNodeNameGenerator(String, String, SubCircuit, List<String>, IEnumerable<String>, Boolean)
  nameWithType: SubcircuitNodeNameGenerator.SubcircuitNodeNameGenerator(String, String, SubCircuit, List<String>, IEnumerable<String>, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubcircuitNodeNameGenerator(System.String, System.String, SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit, System.Collections.Generic.List<System.String>, System.Collections.Generic.IEnumerable<System.String>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 23
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SubcircuitNodeNameGenerator(string subcircuitFullName, string subCircuitName, SubCircuit currentSubCircuit, List<string> pinInstanceNames, IEnumerable<string> globals, bool isNodeNameCaseSensitive)
    parameters:
    - id: subcircuitFullName
      type: System.String
      description: The fullname of subcircuit.
    - id: subCircuitName
      type: System.String
      description: The name of subcircuit.
    - id: currentSubCircuit
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
      description: The current subcircuit.
    - id: pinInstanceNames
      type: System.Collections.Generic.List{System.String}
      description: The names of pins.
    - id: globals
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Global pin names.
    - id: isNodeNameCaseSensitive
      type: System.Boolean
      description: Is node name case sensitive.
    content.vb: Public Sub New(subcircuitFullName As String, subCircuitName As String, currentSubCircuit As SubCircuit, pinInstanceNames As List(Of String), globals As IEnumerable(Of String), isNodeNameCaseSensitive As Boolean)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.#ctor*
  nameWithType.vb: SubcircuitNodeNameGenerator.SubcircuitNodeNameGenerator(String, String, SubCircuit, List(Of String), IEnumerable(Of String), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubcircuitNodeNameGenerator(System.String, System.String, SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit, System.Collections.Generic.List(Of System.String), System.Collections.Generic.IEnumerable(Of System.String), System.Boolean)
  name.vb: SubcircuitNodeNameGenerator(String, String, SubCircuit, List(Of String), IEnumerable(Of String), Boolean)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  id: IsNodeNameCaseSensitive
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: IsNodeNameCaseSensitive
  nameWithType: SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IsNodeNameCaseSensitive
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 53
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  syntax:
    content: public bool IsNodeNameCaseSensitive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNodeNameCaseSensitive As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit
  id: SubCircuit
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: SubCircuit
  nameWithType: SubcircuitNodeNameGenerator.SubCircuit
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SubCircuit
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 58
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets the subcircuit of this node name generator.\n"
  example: []
  syntax:
    content: public SubCircuit SubCircuit { get; }
    parameters: []
    return:
      type: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
    content.vb: Public ReadOnly Property SubCircuit As SubCircuit
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames
  id: PinInstanceNames
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: PinInstanceNames
  nameWithType: SubcircuitNodeNameGenerator.PinInstanceNames
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: PinInstanceNames
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 63
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets the names of pins for the current subcircuit.\n"
  example: []
  syntax:
    content: public List<string> PinInstanceNames { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property PinInstanceNames As List(Of String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals
  id: Globals
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: Globals
  nameWithType: SubcircuitNodeNameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Globals
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 68
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets the globals.\n"
  example: []
  syntax:
    content: public IEnumerable<string> Globals { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Globals As IEnumerable(Of String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName
  id: RootName
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: RootName
  nameWithType: SubcircuitNodeNameGenerator.RootName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: RootName
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 73
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets or sets the root name.\n"
  example: []
  syntax:
    content: public string RootName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RootName As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName
  id: FullName
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: SubcircuitNodeNameGenerator.FullName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: FullName
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 78
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets or sets the full name.\n"
  example: []
  syntax:
    content: public string FullName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FullName As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children
  id: Children
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: SubcircuitNodeNameGenerator.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Children
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 83
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets or sets children of node name generator.\n"
  example: []
  syntax:
    content: public List<INodeNameGenerator> Children { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator}
    content.vb: Public Property Children As List(Of INodeNameGenerator)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate(System.String)
  id: Generate(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: Generate(String)
  nameWithType: SubcircuitNodeNameGenerator.Generate(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Generate
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 92
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGenerates node name.\n"
  example: []
  syntax:
    content: public string Generate(string pinName)
    parameters:
    - id: pinName
      type: System.String
      description: Pin name.
    return:
      type: System.String
      description: "\nNode name.\n"
    content.vb: Public Function Generate(pinName As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal(System.String)
  id: SetGlobal(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: SetGlobal(String)
  nameWithType: SubcircuitNodeNameGenerator.SetGlobal(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetGlobal
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 125
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nMakes a pin name a global pin name.\n"
  example: []
  syntax:
    content: public void SetGlobal(string pinName)
    parameters:
    - id: pinName
      type: System.String
      description: Pin name.
    content.vb: Public Sub SetGlobal(pinName As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse(System.String)
  id: Parse(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: SubcircuitNodeNameGenerator.Parse(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parse
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/SubcircuitNodeNameGenerator.cs
    startLine: 145
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nParses a path and generate a node name.\n"
  example: []
  syntax:
    content: public string Parse(string path)
    parameters:
    - id: path
      type: System.String
      description: Node path.
    return:
      type: System.String
      description: "\nA node name.\n"
    content.vb: Public Function Parse(path As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  name: INodeNameGenerator
  nameWithType: INodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
  name: SubcircuitNodeNameGenerator
  nameWithType: SubcircuitNodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.#ctor*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.#ctor
  name: SubcircuitNodeNameGenerator
  nameWithType: SubcircuitNodeNameGenerator.SubcircuitNodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubcircuitNodeNameGenerator
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
  commentId: T:SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
  parent: SpiceSharpParser.Models.Netlist.Spice.Objects
  name: SubCircuit
  nameWithType: SubCircuit
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects.SubCircuit
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Models.Netlist.Spice.Objects
  commentId: N:SpiceSharpParser.Models.Netlist.Spice.Objects
  name: SpiceSharpParser.Models.Netlist.Spice.Objects
  nameWithType: SpiceSharpParser.Models.Netlist.Spice.Objects
  fullName: SpiceSharpParser.Models.Netlist.Spice.Objects
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  name: IsNodeNameCaseSensitive
  nameWithType: SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.IsNodeNameCaseSensitive
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit
  name: SubCircuit
  nameWithType: SubcircuitNodeNameGenerator.SubCircuit
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SubCircuit
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames
  name: PinInstanceNames
  nameWithType: SubcircuitNodeNameGenerator.PinInstanceNames
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.PinInstanceNames
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals
  name: Globals
  nameWithType: SubcircuitNodeNameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Globals
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  name: Globals
  nameWithType: INodeNameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName
  name: RootName
  nameWithType: SubcircuitNodeNameGenerator.RootName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.RootName
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  name: RootName
  nameWithType: INodeNameGenerator.RootName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName
  name: FullName
  nameWithType: SubcircuitNodeNameGenerator.FullName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.FullName
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children
  name: Children
  nameWithType: SubcircuitNodeNameGenerator.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Children
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  name: Children
  nameWithType: INodeNameGenerator.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
- uid: System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator}
  commentId: T:System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<INodeNameGenerator>
  nameWithType: List<INodeNameGenerator>
  fullName: System.Collections.Generic.List<SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator>
  nameWithType.vb: List(Of INodeNameGenerator)
  fullName.vb: System.Collections.Generic.List(Of SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  name.vb: List(Of INodeNameGenerator)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    name: INodeNameGenerator
    nameWithType: INodeNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    name: INodeNameGenerator
    nameWithType: INodeNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate
  name: Generate
  nameWithType: SubcircuitNodeNameGenerator.Generate
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Generate
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  isExternal: true
  name: Generate(String)
  nameWithType: INodeNameGenerator.Generate(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
    name: Generate
    nameWithType: INodeNameGenerator.Generate
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
    name: Generate
    nameWithType: INodeNameGenerator.Generate
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal
  name: SetGlobal
  nameWithType: SubcircuitNodeNameGenerator.SetGlobal
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.SetGlobal
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  isExternal: true
  name: SetGlobal(String)
  nameWithType: INodeNameGenerator.SetGlobal(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
    name: SetGlobal
    nameWithType: INodeNameGenerator.SetGlobal
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
    name: SetGlobal
    nameWithType: INodeNameGenerator.SetGlobal
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse
  name: Parse
  nameWithType: SubcircuitNodeNameGenerator.Parse
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.SubcircuitNodeNameGenerator.Parse
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  isExternal: true
  name: Parse(String)
  nameWithType: INodeNameGenerator.Parse(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
    name: Parse
    nameWithType: INodeNameGenerator.Parse
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
    name: Parse
    nameWithType: INodeNameGenerator.Parse
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
