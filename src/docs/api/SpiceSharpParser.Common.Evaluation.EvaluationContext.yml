### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext
  commentId: T:SpiceSharpParser.Common.Evaluation.EvaluationContext
  id: EvaluationContext
  parent: SpiceSharpParser.Common.Evaluation
  children:
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.#ctor(System.String,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings,SpiceSharpParser.Common.Mathematics.Probability.IRandomizer,SpiceSharpParser.Parsers.Expression.IExpressionParser,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Children
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext(System.String,System.Boolean)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(SpiceSharpParser.Common.Evaluation.Expression)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Find(System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression(System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters(System.String,System.Boolean)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions(System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties(System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Name
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression(System.String,System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.Double)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.Func{System.Double})
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.String)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.String,SpiceSharpParser.Common.Evaluation.Expression)
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})
  - SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation
  langs:
  - csharp
  - vb
  name: EvaluationContext
  nameWithType: EvaluationContext
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: EvaluationContext
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 14
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public class EvaluationContext
    content.vb: Public Class EvaluationContext
  inheritance:
  - System.Object
  derivedClasses:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Evaluation.SpiceEvaluationContext
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.#ctor(System.String,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings,SpiceSharpParser.Common.Mathematics.Probability.IRandomizer,SpiceSharpParser.Parsers.Expression.IExpressionParser,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.#ctor(System.String,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings,SpiceSharpParser.Common.Mathematics.Probability.IRandomizer,SpiceSharpParser.Parsers.Expression.IExpressionParser,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService)
  id: '#ctor(System.String,SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings,SpiceSharpParser.Common.Mathematics.Probability.IRandomizer,SpiceSharpParser.Parsers.Expression.IExpressionParser,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator,SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService)'
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: EvaluationContext(String, ISpiceNetlistCaseSensitivitySettings, IRandomizer, IExpressionParser, INameGenerator, IResultService)
  nameWithType: EvaluationContext.EvaluationContext(String, ISpiceNetlistCaseSensitivitySettings, IRandomizer, IExpressionParser, INameGenerator, IResultService)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.EvaluationContext(System.String, SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings, SpiceSharpParser.Common.Mathematics.Probability.IRandomizer, SpiceSharpParser.Parsers.Expression.IExpressionParser, SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator, SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 19
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public EvaluationContext(string name, ISpiceNetlistCaseSensitivitySettings caseSettings, IRandomizer randomizer, IExpressionParser parser, INameGenerator nameGenerator, IResultService resultService)
    parameters:
    - id: name
      type: System.String
    - id: caseSettings
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
    - id: randomizer
      type: SpiceSharpParser.Common.Mathematics.Probability.IRandomizer
    - id: parser
      type: SpiceSharpParser.Parsers.Expression.IExpressionParser
    - id: nameGenerator
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
    - id: resultService
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
    content.vb: Public Sub New(name As String, caseSettings As ISpiceNetlistCaseSensitivitySettings, randomizer As IRandomizer, parser As IExpressionParser, nameGenerator As INameGenerator, resultService As IResultService)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Name
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Name
  id: Name
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EvaluationContext.Name
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Name
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Name
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 44
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the name of the context.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed
  id: Seed
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Seed
  nameWithType: EvaluationContext.Seed
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Seed
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 49
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets or sets the random seed for the evaluator.\n"
  example: []
  syntax:
    content: public int? Seed { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Seed As Integer?
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer
  id: Randomizer
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Randomizer
  nameWithType: EvaluationContext.Randomizer
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Randomizer
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 64
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public IRandomizer Randomizer { get; set; }
    parameters: []
    return:
      type: SpiceSharpParser.Common.Mathematics.Probability.IRandomizer
    content.vb: Public Property Randomizer As IRandomizer
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters
  id: Parameters
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: EvaluationContext.Parameters
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parameters
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 69
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets or sets the parameters.\n"
  example: []
  syntax:
    content: public Dictionary<string, Expression> Parameters { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
    content.vb: Public Property Parameters As Dictionary(Of String, Expression)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments
  id: Arguments
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Arguments
  nameWithType: EvaluationContext.Arguments
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Arguments
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 74
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets or sets the parameters.\n"
  example: []
  syntax:
    content: public Dictionary<string, Expression> Arguments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
    content.vb: Public ReadOnly Property Arguments As Dictionary(Of String, Expression)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions
  id: Functions
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: EvaluationContext.Functions
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Functions
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 79
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets or sets custom functions.\n"
  example: []
  syntax:
    content: public Dictionary<string, List<IFunction>> Functions { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.IFunction}}
    content.vb: Public Property Functions As Dictionary(Of String, List(Of IFunction))
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry
  id: ExpressionRegistry
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: ExpressionRegistry
  nameWithType: EvaluationContext.ExpressionRegistry
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ExpressionRegistry
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 84
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets or sets expression registry for the context.\n"
  example: []
  syntax:
    content: public ExpressionRegistry ExpressionRegistry { get; set; }
    parameters: []
    return:
      type: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
    content.vb: Public Property ExpressionRegistry As ExpressionRegistry
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Children
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Children
  id: Children
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: EvaluationContext.Children
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Children
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Children
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 89
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets or sets the children simulationEvaluators.\n"
  example: []
  syntax:
    content: public List<EvaluationContext> Children { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.EvaluationContext}
    content.vb: Public Property Children As List(Of EvaluationContext)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Children*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation
  id: Simulation
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Simulation
  nameWithType: EvaluationContext.Simulation
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Simulation
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 91
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public Simulation Simulation { get; set; }
    parameters: []
    return:
      type: SpiceSharp.Simulations.Simulation
    content.vb: Public Property Simulation As Simulation
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator
  id: NameGenerator
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: NameGenerator
  nameWithType: EvaluationContext.NameGenerator
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: NameGenerator
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 104
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public INameGenerator NameGenerator { get; set; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
    content.vb: Public Property NameGenerator As INameGenerator
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService
  id: ResultService
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: ResultService
  nameWithType: EvaluationContext.ResultService
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ResultService
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 106
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public IResultService ResultService { get; }
    parameters: []
    return:
      type: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
    content.vb: Public ReadOnly Property ResultService As IResultService
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser
  commentId: P:SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser
  id: Parser
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Parser
  nameWithType: EvaluationContext.Parser
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parser
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 108
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: protected IExpressionParser Parser { get; }
    parameters: []
    return:
      type: SpiceSharpParser.Parsers.Expression.IExpressionParser
    content.vb: Protected ReadOnly Property Parser As IExpressionParser
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.Double)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.Double)
  id: SetParameter(System.String,System.Double)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: SetParameter(String, Double)
  nameWithType: EvaluationContext.SetParameter(String, Double)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 115
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string parameterName, double value)
    parameters:
    - id: parameterName
      type: System.String
      description: A name of parameter.
    - id: value
      type: System.Double
      description: A value of parameter.
    content.vb: Public Sub SetParameter(parameterName As String, value As Double)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.Func{System.Double})
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.Func{System.Double})
  id: SetParameter(System.String,System.Func{System.Double})
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: SetParameter(String, Func<Double>)
  nameWithType: EvaluationContext.SetParameter(String, Func<Double>)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String, System.Func<System.Double>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 138
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string parameterName, Func<double> value)
    parameters:
    - id: parameterName
      type: System.String
      description: A name of parameter.
    - id: value
      type: System.Func{System.Double}
      description: A value of parameter.
    content.vb: Public Sub SetParameter(parameterName As String, value As Func(Of Double))
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter*
  nameWithType.vb: EvaluationContext.SetParameter(String, Func(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String, System.Func(Of System.Double))
  name.vb: SetParameter(String, Func(Of Double))
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.String)
  id: SetParameter(System.String,System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: SetParameter(String, String)
  nameWithType: EvaluationContext.SetParameter(String, String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 161
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string parameterName, string expression)
    parameters:
    - id: parameterName
      type: System.String
      description: A name of parameter.
    - id: expression
      type: System.String
      description: An expression of parameter.
    content.vb: Public Sub SetParameter(parameterName As String, expression As String)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames
  id: GetExpressionNames
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: GetExpressionNames()
  nameWithType: EvaluationContext.GetExpressionNames()
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpressionNames
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 183
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the expression names.\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetExpressionNames()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\nEnumerable of strings.\n"
    content.vb: Public Function GetExpressionNames As IEnumerable(Of String)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression(System.String,System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression(System.String,System.String)
  id: SetNamedExpression(System.String,System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: SetNamedExpression(String, String)
  nameWithType: EvaluationContext.SetNamedExpression(String, String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetNamedExpression
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 193
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nSets the named expression.\n"
  example: []
  syntax:
    content: public void SetNamedExpression(string expressionName, string expression)
    parameters:
    - id: expressionName
      type: System.String
      description: Expression name.
    - id: expression
      type: System.String
      description: Expression.
    content.vb: Public Sub SetNamedExpression(expressionName As String, expression As String)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression(System.String)
  id: GetExpression(System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: GetExpression(String)
  nameWithType: EvaluationContext.GetExpression(String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpression
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 217
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the expression by name.\n"
  example: []
  syntax:
    content: public Expression GetExpression(string expressionName)
    parameters:
    - id: expressionName
      type: System.String
      description: Name of expression.
    return:
      type: SpiceSharpParser.Common.Evaluation.Expression
      description: "\nExpression.\n"
    content.vb: Public Function GetExpression(expressionName As String) As Expression
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext(System.String,System.Boolean)
  id: CreateChildContext(System.String,System.Boolean)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: CreateChildContext(String, Boolean)
  nameWithType: EvaluationContext.CreateChildContext(String, Boolean)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateChildContext
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 235
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nCreates a child context.\n"
  example: []
  syntax:
    content: public virtual EvaluationContext CreateChildContext(string name, bool addToChildren)
    parameters:
    - id: name
      type: System.String
      description: Name of a context.
    - id: addToChildren
      type: System.Boolean
      description: Specifies whether context should be added to children.
    return:
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
      description: "\nA child context.\n"
    content.vb: Public Overridable Function CreateChildContext(name As String, addToChildren As Boolean) As EvaluationContext
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone
  id: Clone
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: EvaluationContext.Clone()
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Clone
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 259
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public virtual EvaluationContext Clone()
    return:
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    content.vb: Public Overridable Function Clone As EvaluationContext
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})
  id: SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: SetParameters(Dictionary<String, String>)
  nameWithType: EvaluationContext.SetParameters(Dictionary<String, String>)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameters
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 282
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public void SetParameters(Dictionary<string, string> parameters)
    parameters:
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Sub SetParameters(parameters As Dictionary(Of String, String))
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters*
  nameWithType.vb: EvaluationContext.SetParameters(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: SetParameters(Dictionary(Of String, String))
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Find(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.Find(System.String)
  id: Find(System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Find(String)
  nameWithType: EvaluationContext.Find(String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Find(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Find
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 295
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public EvaluationContext Find(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    content.vb: Public Function Find(name As String) As EvaluationContext
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Find*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction)
  id: AddFunction(System.String,SpiceSharpParser.Common.Evaluation.IFunction)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: AddFunction(String, IFunction)
  nameWithType: EvaluationContext.AddFunction(String, IFunction)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction(System.String, SpiceSharpParser.Common.Evaluation.IFunction)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AddFunction
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 320
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public void AddFunction(string name, IFunction function)
    parameters:
    - id: name
      type: System.String
    - id: function
      type: SpiceSharpParser.Common.Evaluation.IFunction
    content.vb: Public Sub AddFunction(name As String, function As IFunction)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions
  id: CreateCommonFunctions
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: CreateCommonFunctions()
  nameWithType: EvaluationContext.CreateCommonFunctions()
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CreateCommonFunctions
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 337
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public void CreateCommonFunctions()
    content.vb: Public Sub CreateCommonFunctions
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.String,SpiceSharpParser.Common.Evaluation.Expression)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String,System.String,SpiceSharpParser.Common.Evaluation.Expression)
  id: SetParameter(System.String,System.String,SpiceSharpParser.Common.Evaluation.Expression)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: SetParameter(String, String, Expression)
  nameWithType: EvaluationContext.SetParameter(String, String, Expression)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter(System.String, System.String, SpiceSharpParser.Common.Evaluation.Expression)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetParameter
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 345
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: protected void SetParameter(string parameterName, string expression, Expression parameter)
    parameters:
    - id: parameterName
      type: System.String
    - id: expression
      type: System.String
    - id: parameter
      type: SpiceSharpParser.Common.Evaluation.Expression
    content.vb: Protected Sub SetParameter(parameterName As String, expression As String, parameter As Expression)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(System.String)
  id: Evaluate(System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Evaluate(String)
  nameWithType: EvaluationContext.Evaluate(String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Evaluate
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 367
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nEvaluates a specific expression to double.\n"
  example: []
  syntax:
    content: public virtual double Evaluate(string expression)
    parameters:
    - id: expression
      type: System.String
      description: An expression to evaluate.
    return:
      type: System.Double
      description: "\nA double value.\n"
    content.vb: Public Overridable Function Evaluate(expression As String) As Double
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(SpiceSharpParser.Common.Evaluation.Expression)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(SpiceSharpParser.Common.Evaluation.Expression)
  id: Evaluate(SpiceSharpParser.Common.Evaluation.Expression)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: Evaluate(Expression)
  nameWithType: EvaluationContext.Evaluate(Expression)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate(SpiceSharpParser.Common.Evaluation.Expression)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Evaluate
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 377
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public virtual double Evaluate(Expression expression)
    parameters:
    - id: expression
      type: SpiceSharpParser.Common.Evaluation.Expression
    return:
      type: System.Double
    content.vb: Public Overridable Function Evaluate(expression As Expression) As Double
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties(System.String)
  id: HaveSpiceProperties(System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: HaveSpiceProperties(String)
  nameWithType: EvaluationContext.HaveSpiceProperties(String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: HaveSpiceProperties
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 392
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public bool HaveSpiceProperties(string expression)
    parameters:
    - id: expression
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function HaveSpiceProperties(expression As String) As Boolean
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions(System.String)
  id: HaveFunctions(System.String)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: HaveFunctions(String)
  nameWithType: EvaluationContext.HaveFunctions(String)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: HaveFunctions
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 397
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public bool HaveFunctions(string expression)
    parameters:
    - id: expression
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function HaveFunctions(expression As String) As Boolean
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters(System.String,System.Boolean)
  id: GetExpressionParameters(System.String,System.Boolean)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: GetExpressionParameters(String, Boolean)
  nameWithType: EvaluationContext.GetExpressionParameters(String, Boolean)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpressionParameters
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 402
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public List<string> GetExpressionParameters(string expression, bool b)
    parameters:
    - id: expression
      type: System.String
    - id: b
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Function GetExpressionParameters(expression As String, b As Boolean) As List(Of String)
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext)
  commentId: M:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext)
  id: GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext)
  parent: SpiceSharpParser.Common.Evaluation.EvaluationContext
  langs:
  - csharp
  - vb
  name: GetDeriveParser(EvaluationContext)
  nameWithType: EvaluationContext.GetDeriveParser(EvaluationContext)
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetDeriveParser
    path: ../SpiceSharpParser/Common/Evaluation/EvaluationContext.cs
    startLine: 407
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public SimpleDerivativeParser GetDeriveParser(EvaluationContext context = null)
    parameters:
    - id: context
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    return:
      type: SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
    content.vb: Public Function GetDeriveParser(context As EvaluationContext = Nothing) As SimpleDerivativeParser
  overload: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.#ctor*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.#ctor
  name: EvaluationContext
  nameWithType: EvaluationContext.EvaluationContext
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.EvaluationContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice
  name: ISpiceNetlistCaseSensitivitySettings
  nameWithType: ISpiceNetlistCaseSensitivitySettings
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.ISpiceNetlistCaseSensitivitySettings
- uid: SpiceSharpParser.Common.Mathematics.Probability.IRandomizer
  commentId: T:SpiceSharpParser.Common.Mathematics.Probability.IRandomizer
  parent: SpiceSharpParser.Common.Mathematics.Probability
  name: IRandomizer
  nameWithType: IRandomizer
  fullName: SpiceSharpParser.Common.Mathematics.Probability.IRandomizer
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser
  commentId: T:SpiceSharpParser.Parsers.Expression.IExpressionParser
  parent: SpiceSharpParser.Parsers.Expression
  name: IExpressionParser
  nameWithType: IExpressionParser
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: INameGenerator
  nameWithType: INameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.INameGenerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: IResultService
  nameWithType: IResultService
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.IResultService
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice
  name: SpiceSharpParser.ModelReaders.Netlist.Spice
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice
- uid: SpiceSharpParser.Common.Mathematics.Probability
  commentId: N:SpiceSharpParser.Common.Mathematics.Probability
  name: SpiceSharpParser.Common.Mathematics.Probability
  nameWithType: SpiceSharpParser.Common.Mathematics.Probability
  fullName: SpiceSharpParser.Common.Mathematics.Probability
- uid: SpiceSharpParser.Parsers.Expression
  commentId: N:SpiceSharpParser.Parsers.Expression
  name: SpiceSharpParser.Parsers.Expression
  nameWithType: SpiceSharpParser.Parsers.Expression
  fullName: SpiceSharpParser.Parsers.Expression
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Name*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Name
  name: Name
  nameWithType: EvaluationContext.Name
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Name
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed
  name: Seed
  nameWithType: EvaluationContext.Seed
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Seed
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer
  name: Randomizer
  nameWithType: EvaluationContext.Randomizer
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Randomizer
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters
  name: Parameters
  nameWithType: EvaluationContext.Parameters
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parameters
- uid: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Expression>
  nameWithType: Dictionary<String, Expression>
  fullName: System.Collections.Generic.Dictionary<System.String, SpiceSharpParser.Common.Evaluation.Expression>
  nameWithType.vb: Dictionary(Of String, Expression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SpiceSharpParser.Common.Evaluation.Expression)
  name.vb: Dictionary(Of String, Expression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments
  name: Arguments
  nameWithType: EvaluationContext.Arguments
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Arguments
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions
  name: Functions
  nameWithType: EvaluationContext.Functions
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Functions
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.IFunction}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.IFunction}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<IFunction>>
  nameWithType: Dictionary<String, List<IFunction>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<SpiceSharpParser.Common.Evaluation.IFunction>>
  nameWithType.vb: Dictionary(Of String, List(Of IFunction))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of SpiceSharpParser.Common.Evaluation.IFunction))
  name.vb: Dictionary(Of String, List(Of IFunction))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Common.Evaluation.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Common.Evaluation.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: SpiceSharpParser.Common.Evaluation.IFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry
  name: ExpressionRegistry
  nameWithType: EvaluationContext.ExpressionRegistry
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.ExpressionRegistry
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  commentId: T:SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  parent: SpiceSharpParser.Common.Evaluation
  name: ExpressionRegistry
  nameWithType: ExpressionRegistry
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Children*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Children
  name: Children
  nameWithType: EvaluationContext.Children
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Children
- uid: System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.EvaluationContext}
  commentId: T:System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.EvaluationContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EvaluationContext>
  nameWithType: List<EvaluationContext>
  fullName: System.Collections.Generic.List<SpiceSharpParser.Common.Evaluation.EvaluationContext>
  nameWithType.vb: List(Of EvaluationContext)
  fullName.vb: System.Collections.Generic.List(Of SpiceSharpParser.Common.Evaluation.EvaluationContext)
  name.vb: List(Of EvaluationContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Common.Evaluation.EvaluationContext
    name: EvaluationContext
    nameWithType: EvaluationContext
    fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Common.Evaluation.EvaluationContext
    name: EvaluationContext
    nameWithType: EvaluationContext
    fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation
  name: Simulation
  nameWithType: EvaluationContext.Simulation
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Simulation
- uid: SpiceSharp.Simulations.Simulation
  commentId: T:SpiceSharp.Simulations.Simulation
  parent: SpiceSharp.Simulations
  isExternal: true
  name: Simulation
  nameWithType: Simulation
  fullName: SpiceSharp.Simulations.Simulation
- uid: SpiceSharp.Simulations
  commentId: N:SpiceSharp.Simulations
  isExternal: true
  name: SpiceSharp.Simulations
  nameWithType: SpiceSharp.Simulations
  fullName: SpiceSharp.Simulations
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator
  name: NameGenerator
  nameWithType: EvaluationContext.NameGenerator
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.NameGenerator
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService
  name: ResultService
  nameWithType: EvaluationContext.ResultService
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.ResultService
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser
  name: Parser
  nameWithType: EvaluationContext.Parser
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Parser
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter
  name: SetParameter
  nameWithType: EvaluationContext.SetParameter
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameter
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Func{System.Double}
  commentId: T:System.Func{System.Double}
  parent: System
  definition: System.Func`1
  name: Func<Double>
  nameWithType: Func<Double>
  fullName: System.Func<System.Double>
  nameWithType.vb: Func(Of Double)
  fullName.vb: System.Func(Of System.Double)
  name.vb: Func(Of Double)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames
  name: GetExpressionNames
  nameWithType: EvaluationContext.GetExpressionNames
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionNames
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression
  name: SetNamedExpression
  nameWithType: EvaluationContext.SetNamedExpression
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetNamedExpression
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression
  name: GetExpression
  nameWithType: EvaluationContext.GetExpression
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpression
- uid: SpiceSharpParser.Common.Evaluation.Expression
  commentId: T:SpiceSharpParser.Common.Evaluation.Expression
  parent: SpiceSharpParser.Common.Evaluation
  name: Expression
  nameWithType: Expression
  fullName: SpiceSharpParser.Common.Evaluation.Expression
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext
  name: CreateChildContext
  nameWithType: EvaluationContext.CreateChildContext
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateChildContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext
  commentId: T:SpiceSharpParser.Common.Evaluation.EvaluationContext
  parent: SpiceSharpParser.Common.Evaluation
  name: EvaluationContext
  nameWithType: EvaluationContext
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone
  name: Clone
  nameWithType: EvaluationContext.Clone
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Clone
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters
  name: SetParameters
  nameWithType: EvaluationContext.SetParameters
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.SetParameters
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Find*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Find
  name: Find
  nameWithType: EvaluationContext.Find
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Find
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction
  name: AddFunction
  nameWithType: EvaluationContext.AddFunction
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.AddFunction
- uid: SpiceSharpParser.Common.Evaluation.IFunction
  commentId: T:SpiceSharpParser.Common.Evaluation.IFunction
  parent: SpiceSharpParser.Common.Evaluation
  name: IFunction
  nameWithType: IFunction
  fullName: SpiceSharpParser.Common.Evaluation.IFunction
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions
  name: CreateCommonFunctions
  nameWithType: EvaluationContext.CreateCommonFunctions
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.CreateCommonFunctions
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate
  name: Evaluate
  nameWithType: EvaluationContext.Evaluate
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.Evaluate
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties
  name: HaveSpiceProperties
  nameWithType: EvaluationContext.HaveSpiceProperties
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveSpiceProperties
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions
  name: HaveFunctions
  nameWithType: EvaluationContext.HaveFunctions
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.HaveFunctions
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters
  name: GetExpressionParameters
  nameWithType: EvaluationContext.GetExpressionParameters
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetExpressionParameters
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser
  name: GetDeriveParser
  nameWithType: EvaluationContext.GetDeriveParser
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext.GetDeriveParser
- uid: SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
  commentId: T:SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
  parent: SpiceSharpBehavioral.Parsers
  isExternal: true
  name: SimpleDerivativeParser
  nameWithType: SimpleDerivativeParser
  fullName: SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
- uid: SpiceSharpBehavioral.Parsers
  commentId: N:SpiceSharpBehavioral.Parsers
  isExternal: true
  name: SpiceSharpBehavioral.Parsers
  nameWithType: SpiceSharpBehavioral.Parsers
  fullName: SpiceSharpBehavioral.Parsers
