### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser
  commentId: T:SpiceSharpParser.Parsers.Expression.IExpressionParser
  id: IExpressionParser
  parent: SpiceSharpParser.Parsers.Expression
  children:
  - SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  - SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  - SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  - SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  - SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  langs:
  - csharp
  - vb
  name: IExpressionParser
  nameWithType: IExpressionParser
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser
  type: Interface
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IExpressionParser
    path: ../SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
    startLine: 6
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Expression
  syntax:
    content: public interface IExpressionParser
    content.vb: Public Interface IExpressionParser
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  commentId: M:SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  id: GetExpressionValue(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  parent: SpiceSharpParser.Parsers.Expression.IExpressionParser
  langs:
  - csharp
  - vb
  name: GetExpressionValue(String, EvaluationContext, Boolean)
  nameWithType: IExpressionParser.GetExpressionValue(String, EvaluationContext, Boolean)
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue(System.String, SpiceSharpParser.Common.Evaluation.EvaluationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpressionValue
    path: ../SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
    startLine: 8
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Expression
  syntax:
    content: double GetExpressionValue(string expression, EvaluationContext context, bool throw = true)
    parameters:
    - id: expression
      type: System.String
    - id: context
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    - id: throw
      type: System.Boolean
    return:
      type: System.Double
    content.vb: Function GetExpressionValue(expression As String, context As EvaluationContext, throw As Boolean = True) As Double
  overload: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue*
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  commentId: M:SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  id: GetExpressionParameters(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  parent: SpiceSharpParser.Parsers.Expression.IExpressionParser
  langs:
  - csharp
  - vb
  name: GetExpressionParameters(String, EvaluationContext, Boolean)
  nameWithType: IExpressionParser.GetExpressionParameters(String, EvaluationContext, Boolean)
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters(System.String, SpiceSharpParser.Common.Evaluation.EvaluationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpressionParameters
    path: ../SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Expression
  syntax:
    content: List<string> GetExpressionParameters(string expression, EvaluationContext context, bool throw = true)
    parameters:
    - id: expression
      type: System.String
    - id: context
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    - id: throw
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Function GetExpressionParameters(expression As String, context As EvaluationContext, throw As Boolean = True) As List(Of String)
  overload: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters*
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  commentId: M:SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  id: GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext,System.Boolean)
  parent: SpiceSharpParser.Parsers.Expression.IExpressionParser
  langs:
  - csharp
  - vb
  name: GetDeriveParser(EvaluationContext, Boolean)
  nameWithType: IExpressionParser.GetDeriveParser(EvaluationContext, Boolean)
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser(SpiceSharpParser.Common.Evaluation.EvaluationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetDeriveParser
    path: ../SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
    startLine: 12
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Expression
  syntax:
    content: SimpleDerivativeParser GetDeriveParser(EvaluationContext context, bool throw = true)
    parameters:
    - id: context
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    - id: throw
      type: System.Boolean
    return:
      type: SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
    content.vb: Function GetDeriveParser(context As EvaluationContext, throw As Boolean = True) As SimpleDerivativeParser
  overload: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser*
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  commentId: M:SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  id: HaveSpiceProperties(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  parent: SpiceSharpParser.Parsers.Expression.IExpressionParser
  langs:
  - csharp
  - vb
  name: HaveSpiceProperties(String, EvaluationContext)
  nameWithType: IExpressionParser.HaveSpiceProperties(String, EvaluationContext)
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties(System.String, SpiceSharpParser.Common.Evaluation.EvaluationContext)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: HaveSpiceProperties
    path: ../SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
    startLine: 14
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Expression
  syntax:
    content: bool HaveSpiceProperties(string expression, EvaluationContext context)
    parameters:
    - id: expression
      type: System.String
    - id: context
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    return:
      type: System.Boolean
    content.vb: Function HaveSpiceProperties(expression As String, context As EvaluationContext) As Boolean
  overload: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties*
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  commentId: M:SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  id: HaveFunctions(System.String,SpiceSharpParser.Common.Evaluation.EvaluationContext)
  parent: SpiceSharpParser.Parsers.Expression.IExpressionParser
  langs:
  - csharp
  - vb
  name: HaveFunctions(String, EvaluationContext)
  nameWithType: IExpressionParser.HaveFunctions(String, EvaluationContext)
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions(System.String, SpiceSharpParser.Common.Evaluation.EvaluationContext)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: HaveFunctions
    path: ../SpiceSharpParser/Parsers/Expression/IExpressionParser.cs
    startLine: 16
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Expression
  syntax:
    content: bool HaveFunctions(string expression, EvaluationContext context)
    parameters:
    - id: expression
      type: System.String
    - id: context
      type: SpiceSharpParser.Common.Evaluation.EvaluationContext
    return:
      type: System.Boolean
    content.vb: Function HaveFunctions(expression As String, context As EvaluationContext) As Boolean
  overload: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions*
references:
- uid: SpiceSharpParser.Parsers.Expression
  commentId: N:SpiceSharpParser.Parsers.Expression
  name: SpiceSharpParser.Parsers.Expression
  nameWithType: SpiceSharpParser.Parsers.Expression
  fullName: SpiceSharpParser.Parsers.Expression
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue*
  commentId: Overload:SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue
  name: GetExpressionValue
  nameWithType: IExpressionParser.GetExpressionValue
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Common.Evaluation.EvaluationContext
  commentId: T:SpiceSharpParser.Common.Evaluation.EvaluationContext
  parent: SpiceSharpParser.Common.Evaluation
  name: EvaluationContext
  nameWithType: EvaluationContext
  fullName: SpiceSharpParser.Common.Evaluation.EvaluationContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters*
  commentId: Overload:SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters
  name: GetExpressionParameters
  nameWithType: IExpressionParser.GetExpressionParameters
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetExpressionParameters
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser*
  commentId: Overload:SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser
  name: GetDeriveParser
  nameWithType: IExpressionParser.GetDeriveParser
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.GetDeriveParser
- uid: SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
  commentId: T:SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
  parent: SpiceSharpBehavioral.Parsers
  isExternal: true
  name: SimpleDerivativeParser
  nameWithType: SimpleDerivativeParser
  fullName: SpiceSharpBehavioral.Parsers.SimpleDerivativeParser
- uid: SpiceSharpBehavioral.Parsers
  commentId: N:SpiceSharpBehavioral.Parsers
  isExternal: true
  name: SpiceSharpBehavioral.Parsers
  nameWithType: SpiceSharpBehavioral.Parsers
  fullName: SpiceSharpBehavioral.Parsers
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties*
  commentId: Overload:SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties
  name: HaveSpiceProperties
  nameWithType: IExpressionParser.HaveSpiceProperties
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveSpiceProperties
- uid: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions*
  commentId: Overload:SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions
  name: HaveFunctions
  nameWithType: IExpressionParser.HaveFunctions
  fullName: SpiceSharpParser.Parsers.Expression.IExpressionParser.HaveFunctions
