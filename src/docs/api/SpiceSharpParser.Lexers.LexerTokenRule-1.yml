### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1
  commentId: T:SpiceSharpParser.Lexers.LexerTokenRule`1
  id: LexerTokenRule`1
  parent: SpiceSharpParser.Lexers
  children:
  - SpiceSharpParser.Lexers.LexerTokenRule`1.#ctor(System.Int32,System.String,System.String,System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision},System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision},System.Boolean,System.Boolean)
  - SpiceSharpParser.Lexers.LexerTokenRule`1.CanUse(`0,System.String)
  - SpiceSharpParser.Lexers.LexerTokenRule`1.Clone
  - SpiceSharpParser.Lexers.LexerTokenRule`1.ReturnDecisionProvider
  - SpiceSharpParser.Lexers.LexerTokenRule`1.TokenType
  - SpiceSharpParser.Lexers.LexerTokenRule`1.TopRule
  - SpiceSharpParser.Lexers.LexerTokenRule`1.UseDecisionProvider
  langs:
  - csharp
  - vb
  name: LexerTokenRule<TLexerState>
  nameWithType: LexerTokenRule<TLexerState>
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: LexerTokenRule
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 8
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nThe lexer token rule class. It defines how and when a token will be generated for given regular expression pattern.\n"
  example: []
  syntax:
    content: 'public class LexerTokenRule<TLexerState> : LexerRegexRule where TLexerState : LexerState'
    typeParameters:
    - id: TLexerState
      description: Type of lexer state.
    content.vb: >-
      Public Class LexerTokenRule(Of TLexerState As LexerState)
          Inherits LexerRegexRule
  inheritance:
  - System.Object
  - SpiceSharpParser.Lexers.LexerRegexRule
  inheritedMembers:
  - SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  - SpiceSharpParser.Lexers.LexerRegexRule.Name
  - SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  - SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: LexerTokenRule(Of TLexerState)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState)
  name.vb: LexerTokenRule(Of TLexerState)
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.#ctor(System.Int32,System.String,System.String,System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision},System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision},System.Boolean,System.Boolean)
  commentId: M:SpiceSharpParser.Lexers.LexerTokenRule`1.#ctor(System.Int32,System.String,System.String,System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision},System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision},System.Boolean,System.Boolean)
  id: '#ctor(System.Int32,System.String,System.String,System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision},System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision},System.Boolean,System.Boolean)'
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: LexerTokenRule(Int32, String, String, Func<TLexerState, String, LexerRuleReturnDecision>, Func<TLexerState, String, LexerRuleUseDecision>, Boolean, Boolean)
  nameWithType: LexerTokenRule<TLexerState>.LexerTokenRule(Int32, String, String, Func<TLexerState, String, LexerRuleReturnDecision>, Func<TLexerState, String, LexerRuleUseDecision>, Boolean, Boolean)
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.LexerTokenRule(System.Int32, System.String, System.String, System.Func<TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleReturnDecision>, System.Func<TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleUseDecision>, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 21
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.LexerTokenRule%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public LexerTokenRule(int tokenType, string ruleName, string regularExpressionPattern, Func<TLexerState, string, LexerRuleReturnDecision> returnDecisionProvider = null, Func<TLexerState, string, LexerRuleUseDecision> useDecisionProvider = null, bool ignoreCase = true, bool topRule = false)
    parameters:
    - id: tokenType
      type: System.Int32
      description: Token type.
    - id: ruleName
      type: System.String
      description: Rule name.
    - id: regularExpressionPattern
      type: System.String
      description: A token rule pattern.
    - id: returnDecisionProvider
      type: System.Func{{TLexerState},System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision}
      description: A token rule return decision provider.
    - id: useDecisionProvider
      type: System.Func{{TLexerState},System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision}
      description: A token rule use decision provider.
    - id: ignoreCase
      type: System.Boolean
      description: Ignore case.
    - id: topRule
      type: System.Boolean
      description: Is most important rule.
    content.vb: Public Sub New(tokenType As Integer, ruleName As String, regularExpressionPattern As String, returnDecisionProvider As Func(Of TLexerState, String, LexerRuleReturnDecision) = Nothing, useDecisionProvider As Func(Of TLexerState, String, LexerRuleUseDecision) = Nothing, ignoreCase As Boolean = True, topRule As Boolean = False)
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.#ctor*
  nameWithType.vb: LexerTokenRule(Of TLexerState).LexerTokenRule(Int32, String, String, Func(Of TLexerState, String, LexerRuleReturnDecision), Func(Of TLexerState, String, LexerRuleUseDecision), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).LexerTokenRule(System.Int32, System.String, System.String, System.Func(Of TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleReturnDecision), System.Func(Of TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleUseDecision), System.Boolean, System.Boolean)
  name.vb: LexerTokenRule(Int32, String, String, Func(Of TLexerState, String, LexerRuleReturnDecision), Func(Of TLexerState, String, LexerRuleUseDecision), Boolean, Boolean)
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.TokenType
  commentId: P:SpiceSharpParser.Lexers.LexerTokenRule`1.TokenType
  id: TokenType
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: TokenType
  nameWithType: LexerTokenRule<TLexerState>.TokenType
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.TokenType
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: TokenType
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 40
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets the type of a generated token.\n"
  example: []
  syntax:
    content: public int TokenType { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TokenType As Integer
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.TokenType*
  nameWithType.vb: LexerTokenRule(Of TLexerState).TokenType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).TokenType
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.TopRule
  commentId: P:SpiceSharpParser.Lexers.LexerTokenRule`1.TopRule
  id: TopRule
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: TopRule
  nameWithType: LexerTokenRule<TLexerState>.TopRule
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.TopRule
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: TopRule
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 45
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets the value indicating whether rule is most important.\n"
  example: []
  syntax:
    content: public bool TopRule { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property TopRule As Boolean
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.TopRule*
  nameWithType.vb: LexerTokenRule(Of TLexerState).TopRule
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).TopRule
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.ReturnDecisionProvider
  commentId: P:SpiceSharpParser.Lexers.LexerTokenRule`1.ReturnDecisionProvider
  id: ReturnDecisionProvider
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: ReturnDecisionProvider
  nameWithType: LexerTokenRule<TLexerState>.ReturnDecisionProvider
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.ReturnDecisionProvider
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ReturnDecisionProvider
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 50
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets the provider that tells whether the rule should be returned.\n"
  example: []
  syntax:
    content: public Func<TLexerState, string, LexerRuleReturnDecision> ReturnDecisionProvider { get; }
    parameters: []
    return:
      type: System.Func{{TLexerState},System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision}
    content.vb: Public ReadOnly Property ReturnDecisionProvider As Func(Of TLexerState, String, LexerRuleReturnDecision)
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.ReturnDecisionProvider*
  nameWithType.vb: LexerTokenRule(Of TLexerState).ReturnDecisionProvider
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).ReturnDecisionProvider
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.UseDecisionProvider
  commentId: P:SpiceSharpParser.Lexers.LexerTokenRule`1.UseDecisionProvider
  id: UseDecisionProvider
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: UseDecisionProvider
  nameWithType: LexerTokenRule<TLexerState>.UseDecisionProvider
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.UseDecisionProvider
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: UseDecisionProvider
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 55
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nGets the provider that tells whether the rule should be used.\n"
  example: []
  syntax:
    content: public Func<TLexerState, string, LexerRuleUseDecision> UseDecisionProvider { get; }
    parameters: []
    return:
      type: System.Func{{TLexerState},System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision}
    content.vb: Public ReadOnly Property UseDecisionProvider As Func(Of TLexerState, String, LexerRuleUseDecision)
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.UseDecisionProvider*
  nameWithType.vb: LexerTokenRule(Of TLexerState).UseDecisionProvider
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).UseDecisionProvider
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.CanUse(`0,System.String)
  commentId: M:SpiceSharpParser.Lexers.LexerTokenRule`1.CanUse(`0,System.String)
  id: CanUse(`0,System.String)
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: CanUse(TLexerState, String)
  nameWithType: LexerTokenRule<TLexerState>.CanUse(TLexerState, String)
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.CanUse(TLexerState, System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: CanUse
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 65
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nReturns true if the rule is active or should be skipped.\n"
  example: []
  syntax:
    content: public bool CanUse(TLexerState lexerState, string lexem)
    parameters:
    - id: lexerState
      type: '{TLexerState}'
      description: The current lexer state.
    - id: lexem
      type: System.String
      description: A lexem value.
    return:
      type: System.Boolean
      description: "\nTrue if the lexer token rule is active or should be skipped.\n"
    content.vb: Public Function CanUse(lexerState As TLexerState, lexem As String) As Boolean
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.CanUse*
  nameWithType.vb: LexerTokenRule(Of TLexerState).CanUse(TLexerState, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).CanUse(TLexerState, System.String)
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.Clone
  commentId: M:SpiceSharpParser.Lexers.LexerTokenRule`1.Clone
  id: Clone
  parent: SpiceSharpParser.Lexers.LexerTokenRule`1
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: LexerTokenRule<TLexerState>.Clone()
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.Clone()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerTokenRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Clone
    path: ../SpiceSharpParser/Lexers/LexerTokenRule.cs
    startLine: 76
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nClones the rule.\n"
  example: []
  syntax:
    content: public override LexerRegexRule Clone()
    return:
      type: SpiceSharpParser.Lexers.LexerRegexRule
      description: "\nA clone of rule.\n"
    content.vb: Public Overrides Function Clone As LexerRegexRule
  overridden: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  overload: SpiceSharpParser.Lexers.LexerTokenRule`1.Clone*
  nameWithType.vb: LexerTokenRule(Of TLexerState).Clone()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).Clone()
references:
- uid: SpiceSharpParser.Lexers
  commentId: N:SpiceSharpParser.Lexers
  name: SpiceSharpParser.Lexers
  nameWithType: SpiceSharpParser.Lexers
  fullName: SpiceSharpParser.Lexers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.Lexers.LexerRegexRule
  commentId: T:SpiceSharpParser.Lexers.LexerRegexRule
  parent: SpiceSharpParser.Lexers
  name: LexerRegexRule
  nameWithType: LexerRegexRule
  fullName: SpiceSharpParser.Lexers.LexerRegexRule
- uid: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: IgnoreCase
  nameWithType: LexerRegexRule.IgnoreCase
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Name
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.Name
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: Name
  nameWithType: LexerRegexRule.Name
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Name
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: RegularExpressionPattern
  nameWithType: LexerRegexRule.RegularExpressionPattern
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: RegularExpression
  nameWithType: LexerRegexRule.RegularExpression
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1
  commentId: T:SpiceSharpParser.Lexers.LexerTokenRule`1
  name: LexerTokenRule<TLexerState>
  nameWithType: LexerTokenRule<TLexerState>
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>
  nameWithType.vb: LexerTokenRule(Of TLexerState)
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState)
  name.vb: LexerTokenRule(Of TLexerState)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.LexerTokenRule`1
    name: LexerTokenRule
    nameWithType: LexerTokenRule
    fullName: SpiceSharpParser.Lexers.LexerTokenRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.Lexers.LexerTokenRule`1
    name: LexerTokenRule
    nameWithType: LexerTokenRule
    fullName: SpiceSharpParser.Lexers.LexerTokenRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.#ctor
  name: LexerTokenRule
  nameWithType: LexerTokenRule<TLexerState>.LexerTokenRule
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.LexerTokenRule
  nameWithType.vb: LexerTokenRule(Of TLexerState).LexerTokenRule
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).LexerTokenRule
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{{TLexerState},System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision}
  commentId: T:System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleReturnDecision}
  parent: System
  definition: System.Func`3
  name: Func<TLexerState, String, LexerRuleReturnDecision>
  nameWithType: Func<TLexerState, String, LexerRuleReturnDecision>
  fullName: System.Func<TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleReturnDecision>
  nameWithType.vb: Func(Of TLexerState, String, LexerRuleReturnDecision)
  fullName.vb: System.Func(Of TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleReturnDecision)
  name.vb: Func(Of TLexerState, String, LexerRuleReturnDecision)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Lexers.LexerRuleReturnDecision
    name: LexerRuleReturnDecision
    nameWithType: LexerRuleReturnDecision
    fullName: SpiceSharpParser.Lexers.LexerRuleReturnDecision
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Lexers.LexerRuleReturnDecision
    name: LexerRuleReturnDecision
    nameWithType: LexerRuleReturnDecision
    fullName: SpiceSharpParser.Lexers.LexerRuleReturnDecision
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TLexerState},System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision}
  commentId: T:System.Func{`0,System.String,SpiceSharpParser.Lexers.LexerRuleUseDecision}
  parent: System
  definition: System.Func`3
  name: Func<TLexerState, String, LexerRuleUseDecision>
  nameWithType: Func<TLexerState, String, LexerRuleUseDecision>
  fullName: System.Func<TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleUseDecision>
  nameWithType.vb: Func(Of TLexerState, String, LexerRuleUseDecision)
  fullName.vb: System.Func(Of TLexerState, System.String, SpiceSharpParser.Lexers.LexerRuleUseDecision)
  name.vb: Func(Of TLexerState, String, LexerRuleUseDecision)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Lexers.LexerRuleUseDecision
    name: LexerRuleUseDecision
    nameWithType: LexerRuleUseDecision
    fullName: SpiceSharpParser.Lexers.LexerRuleUseDecision
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLexerState
    nameWithType: TLexerState
    fullName: TLexerState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Lexers.LexerRuleUseDecision
    name: LexerRuleUseDecision
    nameWithType: LexerRuleUseDecision
    fullName: SpiceSharpParser.Lexers.LexerRuleUseDecision
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.TokenType*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.TokenType
  name: TokenType
  nameWithType: LexerTokenRule<TLexerState>.TokenType
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.TokenType
  nameWithType.vb: LexerTokenRule(Of TLexerState).TokenType
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).TokenType
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.TopRule*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.TopRule
  name: TopRule
  nameWithType: LexerTokenRule<TLexerState>.TopRule
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.TopRule
  nameWithType.vb: LexerTokenRule(Of TLexerState).TopRule
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).TopRule
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.ReturnDecisionProvider*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.ReturnDecisionProvider
  name: ReturnDecisionProvider
  nameWithType: LexerTokenRule<TLexerState>.ReturnDecisionProvider
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.ReturnDecisionProvider
  nameWithType.vb: LexerTokenRule(Of TLexerState).ReturnDecisionProvider
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).ReturnDecisionProvider
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.UseDecisionProvider*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.UseDecisionProvider
  name: UseDecisionProvider
  nameWithType: LexerTokenRule<TLexerState>.UseDecisionProvider
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.UseDecisionProvider
  nameWithType.vb: LexerTokenRule(Of TLexerState).UseDecisionProvider
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).UseDecisionProvider
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.CanUse*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.CanUse
  name: CanUse
  nameWithType: LexerTokenRule<TLexerState>.CanUse
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.CanUse
  nameWithType.vb: LexerTokenRule(Of TLexerState).CanUse
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).CanUse
- uid: '{TLexerState}'
  commentId: '!:TLexerState'
  definition: TLexerState
  name: TLexerState
  nameWithType: TLexerState
  fullName: TLexerState
- uid: TLexerState
  name: TLexerState
  nameWithType: TLexerState
  fullName: TLexerState
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  commentId: M:SpiceSharpParser.Lexers.LexerRegexRule.Clone
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: Clone()
  nameWithType: LexerRegexRule.Clone()
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone()
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
    name: Clone
    nameWithType: LexerRegexRule.Clone
    fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
    name: Clone
    nameWithType: LexerRegexRule.Clone
    fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.LexerTokenRule`1.Clone*
  commentId: Overload:SpiceSharpParser.Lexers.LexerTokenRule`1.Clone
  name: Clone
  nameWithType: LexerTokenRule<TLexerState>.Clone
  fullName: SpiceSharpParser.Lexers.LexerTokenRule<TLexerState>.Clone
  nameWithType.vb: LexerTokenRule(Of TLexerState).Clone
  fullName.vb: SpiceSharpParser.Lexers.LexerTokenRule(Of TLexerState).Clone
