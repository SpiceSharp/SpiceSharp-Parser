### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.LexerInternalRule
  commentId: T:SpiceSharpParser.Lexers.LexerInternalRule
  id: LexerInternalRule
  parent: SpiceSharpParser.Lexers
  children:
  - SpiceSharpParser.Lexers.LexerInternalRule.#ctor(System.String,System.String)
  - SpiceSharpParser.Lexers.LexerInternalRule.Clone
  langs:
  - csharp
  - vb
  name: LexerInternalRule
  nameWithType: LexerInternalRule
  fullName: SpiceSharpParser.Lexers.LexerInternalRule
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerInternalRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: LexerInternalRule
    path: ../SpiceSharpParser/Lexers/LexerInternalRule.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nInternal rule of lexer. It is use for creating common regular expression to use with LexerTokeRules.\n"
  example: []
  syntax:
    content: 'public class LexerInternalRule : LexerRegexRule'
    content.vb: >-
      Public Class LexerInternalRule
          Inherits LexerRegexRule
  inheritance:
  - System.Object
  - SpiceSharpParser.Lexers.LexerRegexRule
  inheritedMembers:
  - SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  - SpiceSharpParser.Lexers.LexerRegexRule.Name
  - SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  - SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Lexers.LexerInternalRule.#ctor(System.String,System.String)
  commentId: M:SpiceSharpParser.Lexers.LexerInternalRule.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: SpiceSharpParser.Lexers.LexerInternalRule
  langs:
  - csharp
  - vb
  name: LexerInternalRule(String, String)
  nameWithType: LexerInternalRule.LexerInternalRule(String, String)
  fullName: SpiceSharpParser.Lexers.LexerInternalRule.LexerInternalRule(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerInternalRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/LexerInternalRule.cs
    startLine: 12
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.LexerInternalRule\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public LexerInternalRule(string ruleName, string regularExpression)
    parameters:
    - id: ruleName
      type: System.String
      description: Name of the rule.
    - id: regularExpression
      type: System.String
      description: Regular expression.
    content.vb: Public Sub New(ruleName As String, regularExpression As String)
  overload: SpiceSharpParser.Lexers.LexerInternalRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.LexerInternalRule.Clone
  commentId: M:SpiceSharpParser.Lexers.LexerInternalRule.Clone
  id: Clone
  parent: SpiceSharpParser.Lexers.LexerInternalRule
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: LexerInternalRule.Clone()
  fullName: SpiceSharpParser.Lexers.LexerInternalRule.Clone()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/LexerInternalRule.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Clone
    path: ../SpiceSharpParser/Lexers/LexerInternalRule.cs
    startLine: 23
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers
  summary: "\nClones the current instance.\n"
  example: []
  syntax:
    content: public override LexerRegexRule Clone()
    return:
      type: SpiceSharpParser.Lexers.LexerRegexRule
      description: "\nA new instance of <xref href=\"SpiceSharpParser.Lexers.LexerInternalRule\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function Clone As LexerRegexRule
  overridden: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  overload: SpiceSharpParser.Lexers.LexerInternalRule.Clone*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: SpiceSharpParser.Lexers
  commentId: N:SpiceSharpParser.Lexers
  name: SpiceSharpParser.Lexers
  nameWithType: SpiceSharpParser.Lexers
  fullName: SpiceSharpParser.Lexers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.Lexers.LexerRegexRule
  commentId: T:SpiceSharpParser.Lexers.LexerRegexRule
  parent: SpiceSharpParser.Lexers
  name: LexerRegexRule
  nameWithType: LexerRegexRule
  fullName: SpiceSharpParser.Lexers.LexerRegexRule
- uid: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: IgnoreCase
  nameWithType: LexerRegexRule.IgnoreCase
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.IgnoreCase
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Name
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.Name
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: Name
  nameWithType: LexerRegexRule.Name
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Name
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: RegularExpressionPattern
  nameWithType: LexerRegexRule.RegularExpressionPattern
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpressionPattern
- uid: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  commentId: P:SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: RegularExpression
  nameWithType: LexerRegexRule.RegularExpression
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.RegularExpression
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.LexerInternalRule
  commentId: T:SpiceSharpParser.Lexers.LexerInternalRule
  name: LexerInternalRule
  nameWithType: LexerInternalRule
  fullName: SpiceSharpParser.Lexers.LexerInternalRule
- uid: SpiceSharpParser.Lexers.LexerInternalRule.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.LexerInternalRule.#ctor
  name: LexerInternalRule
  nameWithType: LexerInternalRule.LexerInternalRule
  fullName: SpiceSharpParser.Lexers.LexerInternalRule.LexerInternalRule
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  commentId: M:SpiceSharpParser.Lexers.LexerRegexRule.Clone
  parent: SpiceSharpParser.Lexers.LexerRegexRule
  name: Clone()
  nameWithType: LexerRegexRule.Clone()
  fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone()
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
    name: Clone
    nameWithType: LexerRegexRule.Clone
    fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Lexers.LexerRegexRule.Clone
    name: Clone
    nameWithType: LexerRegexRule.Clone
    fullName: SpiceSharpParser.Lexers.LexerRegexRule.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.LexerInternalRule.Clone*
  commentId: Overload:SpiceSharpParser.Lexers.LexerInternalRule.Clone
  name: Clone
  nameWithType: LexerInternalRule.Clone
  fullName: SpiceSharpParser.Lexers.LexerInternalRule.Clone
