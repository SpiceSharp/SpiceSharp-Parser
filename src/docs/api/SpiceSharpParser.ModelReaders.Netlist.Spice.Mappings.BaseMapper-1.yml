### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  id: BaseMapper`1
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.#ctor
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.ContainsKey(System.String,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Count
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Elements
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetEnumerator
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetValue(System.String,System.Boolean)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map(System.String,`0)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map(System.String[],`0)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.System#Collections#IEnumerable#GetEnumerator
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  langs:
  - csharp
  - vb
  name: BaseMapper<TElement>
  nameWithType: BaseMapper<TElement>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: BaseMapper
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 14
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nBase mapper.\n"
  example: []
  syntax:
    content: 'public class BaseMapper<TElement> : IMapper<TElement>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable where TElement : class'
    typeParameters:
    - id: TElement
      description: "\nType of the element.\n"
    content.vb: >-
      Public Class BaseMapper(Of TElement As Class)
          Implements IMapper(Of TElement), IEnumerable(Of KeyValuePair(Of String, TElement)), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.ControlMapper
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.EntityGeneratorMapper
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.ExporterMapper
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.ModelGeneratorMapper
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.WaveformMapper
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: BaseMapper(Of TElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement)
  name.vb: BaseMapper(Of TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.#ctor
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.#ctor
  id: '#ctor'
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: BaseMapper()
  nameWithType: BaseMapper<TElement>.BaseMapper()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.BaseMapper()
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 20
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public BaseMapper()
    content.vb: Public Sub New
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.#ctor*
  nameWithType.vb: BaseMapper(Of TElement).BaseMapper()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).BaseMapper()
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Count
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Count
  id: Count
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: BaseMapper<TElement>.Count
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Count
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Count
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 28
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nGets the count of elements in mapper.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Count*
  nameWithType.vb: BaseMapper(Of TElement).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Count
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Elements
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Elements
  id: Elements
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: BaseMapper<TElement>.Elements
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Elements
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Elements
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 33
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nGets the mapping key to element.\n"
  example: []
  syntax:
    content: protected Dictionary<string, TElement> Elements { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,{TElement}}
    content.vb: Protected ReadOnly Property Elements As Dictionary(Of String, TElement)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Elements*
  nameWithType.vb: BaseMapper(Of TElement).Elements
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Elements
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map(System.String,`0)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map(System.String,`0)
  id: Map(System.String,`0)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: Map(String, TElement)
  nameWithType: BaseMapper<TElement>.Map(String, TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Map(System.String, TElement)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Map
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 40
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nBinds key with element.\n"
  example: []
  syntax:
    content: public virtual void Map(string key, TElement element)
    parameters:
    - id: key
      type: System.String
      description: Key of the element.
    - id: element
      type: '{TElement}'
      description: Element to add.
    content.vb: Public Overridable Sub Map(key As String, element As TElement)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.Map(System.String,{TElement})
  nameWithType.vb: BaseMapper(Of TElement).Map(String, TElement)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Map(System.String, TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map(System.String[],`0)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map(System.String[],`0)
  id: Map(System.String[],`0)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: Map(String[], TElement)
  nameWithType: BaseMapper<TElement>.Map(String[], TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Map(System.String[], TElement)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Map
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 50
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nBinds the element to the mapper.\n"
  example: []
  syntax:
    content: public virtual void Map(string[] keys, TElement element)
    parameters:
    - id: keys
      type: System.String[]
      description: Keys.
    - id: element
      type: '{TElement}'
      description: Element.
    content.vb: Public Overridable Sub Map(keys As String(), element As TElement)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.Map(System.String[],{TElement})
  nameWithType.vb: BaseMapper(Of TElement).Map(String(), TElement)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Map(System.String(), TElement)
  name.vb: Map(String(), TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.ContainsKey(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.ContainsKey(System.String,System.Boolean)
  id: ContainsKey(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: ContainsKey(String, Boolean)
  nameWithType: BaseMapper<TElement>.ContainsKey(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.ContainsKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ContainsKey
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 68
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nReturns a value indicating whether the mapper has a element for <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  example: []
  syntax:
    content: public bool ContainsKey(string key, bool caseSensitive)
    parameters:
    - id: key
      type: System.String
      description: "\nA key.\n"
    - id: caseSensitive
      type: System.Boolean
      description: Is key case-sensitive.
    return:
      type: System.Boolean
      description: "\nA value indicating whether the mapper has a element with given <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
    content.vb: Public Function ContainsKey(key As String, caseSensitive As Boolean) As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.ContainsKey*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.ContainsKey(System.String,System.Boolean)
  nameWithType.vb: BaseMapper(Of TElement).ContainsKey(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).ContainsKey(System.String, System.Boolean)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetValue(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetValue(System.String,System.Boolean)
  id: GetValue(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: GetValue(String, Boolean)
  nameWithType: BaseMapper<TElement>.GetValue(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.GetValue(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetValue
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 86
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nGets the element for given key.\n"
  example: []
  syntax:
    content: public TElement GetValue(string key, bool caseSensitive)
    parameters:
    - id: key
      type: System.String
      description: A key of element.
    - id: caseSensitive
      type: System.Boolean
      description: Is key name case-sensitive.
    return:
      type: '{TElement}'
      description: "\nA reference to the element.\n"
    content.vb: Public Function GetValue(key As String, caseSensitive As Boolean) As TElement
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetValue*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.GetValue(System.String,System.Boolean)
  nameWithType.vb: BaseMapper(Of TElement).GetValue(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).GetValue(System.String, System.Boolean)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  id: TryGetValue(System.String,System.Boolean,`0@)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: TryGetValue(String, Boolean, out TElement)
  nameWithType: BaseMapper<TElement>.TryGetValue(String, Boolean, out TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.TryGetValue(System.String, System.Boolean, out TElement)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: TryGetValue
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 107
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nGets the element for given key.\n"
  example: []
  syntax:
    content: public bool TryGetValue(string key, bool caseSensitive, out TElement value)
    parameters:
    - id: key
      type: System.String
      description: A key of element.
    - id: caseSensitive
      type: System.Boolean
      description: Is key name case-sensitive.
    - id: value
      type: '{TElement}'
      description: A value of element.
    return:
      type: System.Boolean
      description: "\nA reference to the element.\n"
    content.vb: Public Function TryGetValue(key As String, caseSensitive As Boolean, ByRef value As TElement) As Boolean
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.TryGetValue*
  implements:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.TryGetValue(System.String,System.Boolean,{TElement}@)
  nameWithType.vb: BaseMapper(Of TElement).TryGetValue(String, Boolean, ByRef TElement)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).TryGetValue(System.String, System.Boolean, ByRef TElement)
  name.vb: TryGetValue(String, Boolean, ByRef TElement)
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetEnumerator
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetEnumerator
  id: GetEnumerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: BaseMapper<TElement>.GetEnumerator()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetEnumerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 124
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nThe get enumerator.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<string, TElement>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
      description: "\nThe <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, TElement))
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}.GetEnumerator
  nameWithType.vb: BaseMapper(Of TElement).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).GetEnumerator()
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: BaseMapper<TElement>.IEnumerable.GetEnumerator()
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Mappings/BaseMapper.cs
    startLine: 138
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  summary: "\nThe get enumerator.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: "\nThe <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: BaseMapper(Of TElement).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{`0}
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  name: IMapper<TElement>
  nameWithType: IMapper<TElement>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>
  nameWithType.vb: IMapper(Of TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement)
  name.vb: IMapper(Of TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, TElement>>
  nameWithType: IEnumerable<KeyValuePair<String, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, TElement))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement))
  name.vb: IEnumerable(Of KeyValuePair(Of String, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
  name: IMapper<TElement>
  nameWithType: IMapper<TElement>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>
  nameWithType.vb: IMapper(Of TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement)
  name.vb: IMapper(Of TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1
    name: IMapper
    nameWithType: IMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
  name: BaseMapper<TElement>
  nameWithType: BaseMapper<TElement>
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>
  nameWithType.vb: BaseMapper(Of TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement)
  name.vb: BaseMapper(Of TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
    name: BaseMapper
    nameWithType: BaseMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1
    name: BaseMapper
    nameWithType: BaseMapper
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.#ctor*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.#ctor
  name: BaseMapper
  nameWithType: BaseMapper<TElement>.BaseMapper
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.BaseMapper
  nameWithType.vb: BaseMapper(Of TElement).BaseMapper
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).BaseMapper
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Count*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Count
  name: Count
  nameWithType: BaseMapper<TElement>.Count
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Count
  nameWithType.vb: BaseMapper(Of TElement).Count
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Elements*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Elements
  name: Elements
  nameWithType: BaseMapper<TElement>.Elements
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Elements
  nameWithType.vb: BaseMapper(Of TElement).Elements
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Elements
- uid: System.Collections.Generic.Dictionary{System.String,{TElement}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, TElement>
  nameWithType: Dictionary<String, TElement>
  fullName: System.Collections.Generic.Dictionary<System.String, TElement>
  nameWithType.vb: Dictionary(Of String, TElement)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TElement)
  name.vb: Dictionary(Of String, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.Map
  name: Map
  nameWithType: BaseMapper<TElement>.Map
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.Map
  nameWithType.vb: BaseMapper(Of TElement).Map
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).Map
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.Map(System.String,{TElement})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{`0}.Map(System.String,`0)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
  name: Map(String, TElement)
  nameWithType: IMapper<TElement>.Map(String, TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map(System.String, TElement)
  nameWithType.vb: IMapper(Of TElement).Map(String, TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map(System.String, TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
    name: Map
    nameWithType: IMapper<TElement>.Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
    name: Map
    nameWithType: IMapper(Of TElement).Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TElement}'
  commentId: '!:TElement'
  definition: TElement
  name: TElement
  nameWithType: TElement
  fullName: TElement
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
  isExternal: true
  name: Map(String, TElement)
  nameWithType: IMapper<TElement>.Map(String, TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map(System.String, TElement)
  nameWithType.vb: IMapper(Of TElement).Map(String, TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map(System.String, TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
    name: Map
    nameWithType: IMapper<TElement>.Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String,`0)
    name: Map
    nameWithType: IMapper(Of TElement).Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: TElement
  name: TElement
  nameWithType: TElement
  fullName: TElement
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.Map(System.String[],{TElement})
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{`0}.Map(System.String[],`0)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
  name: Map(String[], TElement)
  nameWithType: IMapper<TElement>.Map(String[], TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map(System.String[], TElement)
  nameWithType.vb: IMapper(Of TElement).Map(String(), TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map(System.String(), TElement)
  name.vb: Map(String(), TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
    name: Map
    nameWithType: IMapper<TElement>.Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
    name: Map
    nameWithType: IMapper(Of TElement).Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
  isExternal: true
  name: Map(String[], TElement)
  nameWithType: IMapper<TElement>.Map(String[], TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map(System.String[], TElement)
  nameWithType.vb: IMapper(Of TElement).Map(String(), TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map(System.String(), TElement)
  name.vb: Map(String(), TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
    name: Map
    nameWithType: IMapper<TElement>.Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.Map(System.String[],`0)
    name: Map
    nameWithType: IMapper(Of TElement).Map
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.ContainsKey*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.ContainsKey
  name: ContainsKey
  nameWithType: BaseMapper<TElement>.ContainsKey
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.ContainsKey
  nameWithType.vb: BaseMapper(Of TElement).ContainsKey
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).ContainsKey
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.ContainsKey(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{`0}.ContainsKey(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
  name: ContainsKey(String, Boolean)
  nameWithType: IMapper<TElement>.ContainsKey(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.ContainsKey(System.String, System.Boolean)
  nameWithType.vb: IMapper(Of TElement).ContainsKey(String, Boolean)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).ContainsKey(System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
    name: ContainsKey
    nameWithType: IMapper<TElement>.ContainsKey
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
    name: ContainsKey
    nameWithType: IMapper(Of TElement).ContainsKey
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
  isExternal: true
  name: ContainsKey(String, Boolean)
  nameWithType: IMapper<TElement>.ContainsKey(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.ContainsKey(System.String, System.Boolean)
  nameWithType.vb: IMapper(Of TElement).ContainsKey(String, Boolean)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).ContainsKey(System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
    name: ContainsKey
    nameWithType: IMapper<TElement>.ContainsKey
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.ContainsKey(System.String,System.Boolean)
    name: ContainsKey
    nameWithType: IMapper(Of TElement).ContainsKey
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetValue*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetValue
  name: GetValue
  nameWithType: BaseMapper<TElement>.GetValue
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.GetValue
  nameWithType.vb: BaseMapper(Of TElement).GetValue
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).GetValue
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.GetValue(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{`0}.GetValue(System.String,System.Boolean)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
  name: GetValue(String, Boolean)
  nameWithType: IMapper<TElement>.GetValue(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.GetValue(System.String, System.Boolean)
  nameWithType.vb: IMapper(Of TElement).GetValue(String, Boolean)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).GetValue(System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
    name: GetValue
    nameWithType: IMapper<TElement>.GetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
    name: GetValue
    nameWithType: IMapper(Of TElement).GetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
  isExternal: true
  name: GetValue(String, Boolean)
  nameWithType: IMapper<TElement>.GetValue(String, Boolean)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.GetValue(System.String, System.Boolean)
  nameWithType.vb: IMapper(Of TElement).GetValue(String, Boolean)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).GetValue(System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
    name: GetValue
    nameWithType: IMapper<TElement>.GetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.GetValue(System.String,System.Boolean)
    name: GetValue
    nameWithType: IMapper(Of TElement).GetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.TryGetValue*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.TryGetValue
  name: TryGetValue
  nameWithType: BaseMapper<TElement>.TryGetValue
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.TryGetValue
  nameWithType.vb: BaseMapper(Of TElement).TryGetValue
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).TryGetValue
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}.TryGetValue(System.String,System.Boolean,{TElement}@)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{`0}.TryGetValue(System.String,System.Boolean,`0@)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper{{TElement}}
  definition: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  name: TryGetValue(String, Boolean, TElement)
  nameWithType: IMapper<TElement>.TryGetValue(String, Boolean, TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.TryGetValue(System.String, System.Boolean, TElement)
  nameWithType.vb: IMapper(Of TElement).TryGetValue(String, Boolean, TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).TryGetValue(System.String, System.Boolean, TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
    name: TryGetValue
    nameWithType: IMapper<TElement>.TryGetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
    name: TryGetValue
    nameWithType: IMapper(Of TElement).TryGetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
  isExternal: true
  name: TryGetValue(String, Boolean, TElement)
  nameWithType: IMapper<TElement>.TryGetValue(String, Boolean, TElement)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.TryGetValue(System.String, System.Boolean, TElement)
  nameWithType.vb: IMapper(Of TElement).TryGetValue(String, Boolean, TElement)
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).TryGetValue(System.String, System.Boolean, TElement)
  spec.csharp:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
    name: TryGetValue
    nameWithType: IMapper<TElement>.TryGetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper<TElement>.TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper`1.TryGetValue(System.String,System.Boolean,`0@)
    name: TryGetValue
    nameWithType: IMapper(Of TElement).TryGetValue
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.IMapper(Of TElement).TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetEnumerator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.GetEnumerator
  name: GetEnumerator
  nameWithType: BaseMapper<TElement>.GetEnumerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.GetEnumerator
  nameWithType.vb: BaseMapper(Of TElement).GetEnumerator
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, TElement>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, TElement)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, TElement>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, TElement)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,{TElement}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, TElement>>
  nameWithType: IEnumerator<KeyValuePair<String, TElement>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, TElement>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, TElement))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, TElement))
  name.vb: IEnumerator(Of KeyValuePair(Of String, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: BaseMapper<TElement>.IEnumerable.GetEnumerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper<TElement>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: BaseMapper(Of TElement).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: SpiceSharpParser.ModelReaders.Netlist.Spice.Mappings.BaseMapper(Of TElement).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
