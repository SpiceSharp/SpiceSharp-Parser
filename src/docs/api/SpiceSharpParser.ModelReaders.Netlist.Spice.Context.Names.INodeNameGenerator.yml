### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  commentId: T:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  id: INodeNameGenerator
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  children:
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  - SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  langs:
  - csharp
  - vb
  name: INodeNameGenerator
  nameWithType: INodeNameGenerator
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  type: Interface
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: INodeNameGenerator
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 7
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nInterface for all node name generators.\n"
  example: []
  syntax:
    content: public interface INodeNameGenerator
    content.vb: Public Interface INodeNameGenerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  id: RootName
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  langs:
  - csharp
  - vb
  name: RootName
  nameWithType: INodeNameGenerator.RootName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: RootName
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 12
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets the root name.\n"
  example: []
  syntax:
    content: string RootName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property RootName As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  id: Globals
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  langs:
  - csharp
  - vb
  name: Globals
  nameWithType: INodeNameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Globals
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 17
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets the globals.\n"
  example: []
  syntax:
    content: IEnumerable<string> Globals { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: ReadOnly Property Globals As IEnumerable(Of String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  commentId: P:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  id: Children
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: INodeNameGenerator.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Children
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 22
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGets children of node name generator.\n"
  example: []
  syntax:
    content: List<INodeNameGenerator> Children { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator}
    content.vb: ReadOnly Property Children As List(Of INodeNameGenerator)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  id: Generate(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  langs:
  - csharp
  - vb
  name: Generate(String)
  nameWithType: INodeNameGenerator.Generate(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Generate
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 31
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nGenerates a node id for circuit.\n"
  example: []
  syntax:
    content: string Generate(string nodeName)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name.
    return:
      type: System.String
      description: "\nA node identifier.\n"
    content.vb: Function Generate(nodeName As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate*
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  id: Parse(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: INodeNameGenerator.Parse(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parse
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 40
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nParses a path and generate a node id.\n"
  example: []
  syntax:
    content: string Parse(string path)
    parameters:
    - id: path
      type: System.String
      description: Node path.
    return:
      type: System.String
      description: "\nA node name.\n"
    content.vb: Function Parse(path As String) As String
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse*
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  commentId: M:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  id: SetGlobal(System.String)
  parent: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  langs:
  - csharp
  - vb
  name: SetGlobal(String)
  nameWithType: INodeNameGenerator.SetGlobal(String)
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SetGlobal
    path: ../SpiceSharpParser/ModelReaders/Netlist/Spice/Context/Names/INodeNameGenerator.cs
    startLine: 46
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  summary: "\nMakes a pin name a global pin name.\n"
  example: []
  syntax:
    content: void SetGlobal(string pinName)
    parameters:
    - id: pinName
      type: System.String
      description: Pin name.
    content.vb: Sub SetGlobal(pinName As String)
  overload: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal*
references:
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  commentId: N:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  name: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  nameWithType: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
  name: RootName
  nameWithType: INodeNameGenerator.RootName
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.RootName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
  name: Globals
  nameWithType: INodeNameGenerator.Globals
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Globals
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
  name: Children
  nameWithType: INodeNameGenerator.Children
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Children
- uid: System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator}
  commentId: T:System.Collections.Generic.List{SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<INodeNameGenerator>
  nameWithType: List<INodeNameGenerator>
  fullName: System.Collections.Generic.List<SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator>
  nameWithType.vb: List(Of INodeNameGenerator)
  fullName.vb: System.Collections.Generic.List(Of SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator)
  name.vb: List(Of INodeNameGenerator)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    name: INodeNameGenerator
    nameWithType: INodeNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
    name: INodeNameGenerator
    nameWithType: INodeNameGenerator
    fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate
  name: Generate
  nameWithType: INodeNameGenerator.Generate
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Generate
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse
  name: Parse
  nameWithType: INodeNameGenerator.Parse
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.Parse
- uid: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal*
  commentId: Overload:SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal
  name: SetGlobal
  nameWithType: INodeNameGenerator.SetGlobal
  fullName: SpiceSharpParser.ModelReaders.Netlist.Spice.Context.Names.INodeNameGenerator.SetGlobal
