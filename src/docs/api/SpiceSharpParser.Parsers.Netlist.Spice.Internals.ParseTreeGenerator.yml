### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  commentId: T:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  id: ParseTreeGenerator
  parent: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  children:
  - SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.#ctor(System.Boolean)
  - SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[],System.String)
  - SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive
  langs:
  - csharp
  - vb
  name: ParseTreeGenerator
  nameWithType: ParseTreeGenerator
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParseTreeGenerator
    path: ../SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  summary: "\nA parser tree generator for Spice netlist based on grammar from SpiceGrammar.txt.\nIt&apos;s a hand written LL(*) parser.\n"
  example: []
  syntax:
    content: public class ParseTreeGenerator
    content.vb: Public Class ParseTreeGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.#ctor(System.Boolean)
  commentId: M:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  langs:
  - csharp
  - vb
  name: ParseTreeGenerator(Boolean)
  nameWithType: ParseTreeGenerator.ParseTreeGenerator(Boolean)
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.ParseTreeGenerator(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
    startLine: 18
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ParseTreeGenerator(bool isDotStatementNameCaseSensitive)
    parameters:
    - id: isDotStatementNameCaseSensitive
      type: System.Boolean
      description: Are dot statements case-sensitive.
    content.vb: Public Sub New(isDotStatementNameCaseSensitive As Boolean)
  overload: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive
  commentId: P:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive
  id: IsDotStatementNameCaseSensitive
  parent: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  langs:
  - csharp
  - vb
  name: IsDotStatementNameCaseSensitive
  nameWithType: ParseTreeGenerator.IsDotStatementNameCaseSensitive
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IsDotStatementNameCaseSensitive
    path: ../SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
    startLine: 59
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  syntax:
    content: protected bool IsDotStatementNameCaseSensitive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property IsDotStatementNameCaseSensitive As Boolean
  overload: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[],System.String)
  commentId: M:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[],System.String)
  id: GetParseTree(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[],System.String)
  parent: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  langs:
  - csharp
  - vb
  name: GetParseTree(SpiceToken[], String)
  nameWithType: ParseTreeGenerator.GetParseTree(SpiceToken[], String)
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[], System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetParseTree
    path: ../SpiceSharpParser/Parsers/Netlist/Spice/Internals/ParseTreeGenerator.cs
    startLine: 69
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  summary: "\nGenerates a parse tree for SPICE grammar.\n"
  example: []
  syntax:
    content: public ParseTreeNonTerminalNode GetParseTree(SpiceToken[] tokens, string rootSymbol)
    parameters:
    - id: tokens
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[]
      description: An array of tokens.
    - id: rootSymbol
      type: System.String
      description: A root symbol of parse tree.
    return:
      type: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
      description: "\nA parse tree.\n"
    content.vb: Public Function GetParseTree(tokens As SpiceToken(), rootSymbol As String) As ParseTreeNonTerminalNode
  overload: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree*
  nameWithType.vb: ParseTreeGenerator.GetParseTree(SpiceToken(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken(), System.String)
  name.vb: GetParseTree(SpiceToken(), String)
references:
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  commentId: N:SpiceSharpParser.Parsers.Netlist.Spice.Internals
  name: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  nameWithType: SpiceSharpParser.Parsers.Netlist.Spice.Internals
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  commentId: T:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
  name: ParseTreeGenerator
  nameWithType: ParseTreeGenerator
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.#ctor*
  commentId: Overload:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.#ctor
  name: ParseTreeGenerator
  nameWithType: ParseTreeGenerator.ParseTreeGenerator
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.ParseTreeGenerator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive*
  commentId: Overload:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive
  name: IsDotStatementNameCaseSensitive
  nameWithType: ParseTreeGenerator.IsDotStatementNameCaseSensitive
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.IsDotStatementNameCaseSensitive
- uid: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree*
  commentId: Overload:SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree
  name: GetParseTree
  nameWithType: ParseTreeGenerator.GetParseTree
  fullName: SpiceSharpParser.Parsers.Netlist.Spice.Internals.ParseTreeGenerator.GetParseTree
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[]
  isExternal: true
  name: SpiceToken[]
  nameWithType: SpiceToken[]
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken[]
  nameWithType.vb: SpiceToken()
  fullName.vb: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken()
  name.vb: SpiceToken()
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  commentId: T:SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
  parent: SpiceSharpParser.Parsers.Netlist
  name: ParseTreeNonTerminalNode
  nameWithType: ParseTreeNonTerminalNode
  fullName: SpiceSharpParser.Parsers.Netlist.ParseTreeNonTerminalNode
- uid: SpiceSharpParser.Parsers.Netlist
  commentId: N:SpiceSharpParser.Parsers.Netlist
  name: SpiceSharpParser.Parsers.Netlist
  nameWithType: SpiceSharpParser.Parsers.Netlist
  fullName: SpiceSharpParser.Parsers.Netlist
