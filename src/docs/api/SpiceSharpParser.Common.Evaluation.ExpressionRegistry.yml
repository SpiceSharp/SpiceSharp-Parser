### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  commentId: T:SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  id: ExpressionRegistry
  parent: SpiceSharpParser.Common.Evaluation
  children:
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.#ctor(System.Boolean,System.Boolean)
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expression,System.Collections.Generic.ICollection{System.String})
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression,System.Collections.Generic.ICollection{System.String})
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate(System.String,SpiceSharpParser.Common.Evaluation.Expression)
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies(System.String,System.Collections.Generic.ICollection{System.String})
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions(System.String)
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression(System.String)
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies
  - SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions
  langs:
  - csharp
  - vb
  name: ExpressionRegistry
  nameWithType: ExpressionRegistry
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ExpressionRegistry
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 6
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public class ExpressionRegistry
    content.vb: Public Class ExpressionRegistry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.#ctor(System.Boolean,System.Boolean)
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.#ctor(System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean)'
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: ExpressionRegistry(Boolean, Boolean)
  nameWithType: ExpressionRegistry.ExpressionRegistry(Boolean, Boolean)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ExpressionRegistry(System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 13
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Common.Evaluation.ExpressionRegistry\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ExpressionRegistry(bool isParameterNameCaseSensitive, bool isExpressionNameCaseSensitive)
    parameters:
    - id: isParameterNameCaseSensitive
      type: System.Boolean
      description: Is parameter name case-sensitive.
    - id: isExpressionNameCaseSensitive
      type: System.Boolean
      description: Is expression name case-sensitive.
    content.vb: Public Sub New(isParameterNameCaseSensitive As Boolean, isExpressionNameCaseSensitive As Boolean)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive
  id: IsParameterNameCaseSensitive
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: IsParameterNameCaseSensitive
  nameWithType: ExpressionRegistry.IsParameterNameCaseSensitive
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IsParameterNameCaseSensitive
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 27
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets a value indicating whether parameter names are case sensitive.\n"
  example: []
  syntax:
    content: public bool IsParameterNameCaseSensitive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsParameterNameCaseSensitive As Boolean
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive
  id: IsExpressionNameCaseSensitive
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: IsExpressionNameCaseSensitive
  nameWithType: ExpressionRegistry.IsExpressionNameCaseSensitive
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: IsExpressionNameCaseSensitive
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 32
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets a value indicating whether expression names are case sensitive.\n"
  example: []
  syntax:
    content: public bool IsExpressionNameCaseSensitive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExpressionNameCaseSensitive As Boolean
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters
  id: Parameters
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: ExpressionRegistry.Parameters
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Parameters
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 37
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the dictionary of parameters.\n"
  example: []
  syntax:
    content: protected Dictionary<string, Expression> Parameters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
    content.vb: Protected ReadOnly Property Parameters As Dictionary(Of String, Expression)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions
  id: NamedExpressions
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: NamedExpressions
  nameWithType: ExpressionRegistry.NamedExpressions
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: NamedExpressions
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 42
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the dictionary of named expressions.\n"
  example: []
  syntax:
    content: protected Dictionary<string, NamedExpression> NamedExpressions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression}
    content.vb: Protected ReadOnly Property NamedExpressions As Dictionary(Of String, NamedExpression)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions
  id: UnnamedExpressions
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: UnnamedExpressions
  nameWithType: ExpressionRegistry.UnnamedExpressions
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: UnnamedExpressions
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 47
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the collection of unnamed expressions.\n"
  example: []
  syntax:
    content: protected ICollection<Expression> UnnamedExpressions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{SpiceSharpParser.Common.Evaluation.Expression}
    content.vb: Protected ReadOnly Property UnnamedExpressions As ICollection(Of Expression)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies
  id: ParametersDependencies
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: ParametersDependencies
  nameWithType: ExpressionRegistry.ParametersDependencies
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParametersDependencies
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 52
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the dictionary of dependent parameters on parameter.\n"
  example: []
  syntax:
    content: protected Dictionary<string, HashSet<string>> ParametersDependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}}
    content.vb: Protected ReadOnly Property ParametersDependencies As Dictionary(Of String, HashSet(Of String))
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies
  commentId: P:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies
  id: ParametersExpressionsDependencies
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: ParametersExpressionsDependencies
  nameWithType: ExpressionRegistry.ParametersExpressionsDependencies
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: ParametersExpressionsDependencies
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 57
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the dictionary of dependent expressions on parameter.\n"
  example: []
  syntax:
    content: protected Dictionary<string, List<Expression>> ParametersExpressionsDependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.Expression}}
    content.vb: Protected ReadOnly Property ParametersExpressionsDependencies As Dictionary(Of String, List(Of Expression))
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames
  id: GetExpressionNames
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: GetExpressionNames()
  nameWithType: ExpressionRegistry.GetExpressionNames()
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpressionNames
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 65
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets expression names.\n"
  example: []
  syntax:
    content: public HashSet<string> GetExpressionNames()
    return:
      type: System.Collections.Generic.HashSet{System.String}
      description: "\nEnumerable of expression names.\n"
    content.vb: Public Function GetExpressionNames As HashSet(Of String)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions(System.String)
  id: GetDependentExpressions(System.String)
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: GetDependentExpressions(String)
  nameWithType: ExpressionRegistry.GetDependentExpressions(String)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetDependentExpressions
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 77
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets expressions that depend on given parameter.\n"
  example: []
  syntax:
    content: public IEnumerable<Expression> GetDependentExpressions(string parameterName)
    parameters:
    - id: parameterName
      type: System.String
      description: A parameter name.
    return:
      type: System.Collections.Generic.IEnumerable{SpiceSharpParser.Common.Evaluation.Expression}
      description: "\nAn enumerable of expressions.\n"
    content.vb: Public Function GetDependentExpressions(parameterName As String) As IEnumerable(Of Expression)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression(System.String)
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression(System.String)
  id: GetExpression(System.String)
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: GetExpression(String)
  nameWithType: ExpressionRegistry.GetExpression(String)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetExpression
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 101
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nGets the expression with given name.\n"
  example: []
  syntax:
    content: public NamedExpression GetExpression(string expressionName)
    parameters:
    - id: expressionName
      type: System.String
      description: Expression name.
    return:
      type: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
      description: "\nA named expression.\n"
    content.vb: Public Function GetExpression(expressionName As String) As NamedExpression
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate(System.String,SpiceSharpParser.Common.Evaluation.Expression)
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate(System.String,SpiceSharpParser.Common.Evaluation.Expression)
  id: AddOrUpdate(System.String,SpiceSharpParser.Common.Evaluation.Expression)
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: AddOrUpdate(String, Expression)
  nameWithType: ExpressionRegistry.AddOrUpdate(String, Expression)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate(System.String, SpiceSharpParser.Common.Evaluation.Expression)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AddOrUpdate
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 111
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  syntax:
    content: public void AddOrUpdate(string parameterName, Expression parameterExpression)
    parameters:
    - id: parameterName
      type: System.String
    - id: parameterExpression
      type: SpiceSharpParser.Common.Evaluation.Expression
    content.vb: Public Sub AddOrUpdate(parameterName As String, parameterExpression As Expression)
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expression,System.Collections.Generic.ICollection{System.String})
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expression,System.Collections.Generic.ICollection{System.String})
  id: Add(SpiceSharpParser.Common.Evaluation.Expression,System.Collections.Generic.ICollection{System.String})
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: Add(Expression, ICollection<String>)
  nameWithType: ExpressionRegistry.Add(Expression, ICollection<String>)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expression, System.Collections.Generic.ICollection<System.String>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Add
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 121
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nAdds an expression to registry.\n"
  example: []
  syntax:
    content: public void Add(Expression expression, ICollection<string> parameters)
    parameters:
    - id: expression
      type: SpiceSharpParser.Common.Evaluation.Expression
      description: Expression to add.
    - id: parameters
      type: System.Collections.Generic.ICollection{System.String}
      description: Parameters of the expression.
    content.vb: Public Sub Add(expression As Expression, parameters As ICollection(Of String))
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add*
  nameWithType.vb: ExpressionRegistry.Add(Expression, ICollection(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expression, System.Collections.Generic.ICollection(Of System.String))
  name.vb: Add(Expression, ICollection(Of String))
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression,System.Collections.Generic.ICollection{System.String})
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression,System.Collections.Generic.ICollection{System.String})
  id: Add(SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression,System.Collections.Generic.ICollection{System.String})
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: Add(NamedExpression, ICollection<String>)
  nameWithType: ExpressionRegistry.Add(NamedExpression, ICollection<String>)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression, System.Collections.Generic.ICollection<System.String>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Add
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 151
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nAdds named expression to registry.\n"
  example: []
  syntax:
    content: public void Add(NamedExpression namedExpression, ICollection<string> parameters)
    parameters:
    - id: namedExpression
      type: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
      description: Named expression to add.
    - id: parameters
      type: System.Collections.Generic.ICollection{System.String}
      description: Parameters of the expression.
    content.vb: Public Sub Add(namedExpression As NamedExpression, parameters As ICollection(Of String))
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add*
  nameWithType.vb: ExpressionRegistry.Add(NamedExpression, ICollection(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add(SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression, System.Collections.Generic.ICollection(Of System.String))
  name.vb: Add(NamedExpression, ICollection(Of String))
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies(System.String,System.Collections.Generic.ICollection{System.String})
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies(System.String,System.Collections.Generic.ICollection{System.String})
  id: AddOrUpdateParameterDependencies(System.String,System.Collections.Generic.ICollection{System.String})
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: AddOrUpdateParameterDependencies(String, ICollection<String>)
  nameWithType: ExpressionRegistry.AddOrUpdateParameterDependencies(String, ICollection<String>)
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies(System.String, System.Collections.Generic.ICollection<System.String>)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: AddOrUpdateParameterDependencies
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 187
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nUpdates parameter dependencies.\n"
  example: []
  syntax:
    content: public void AddOrUpdateParameterDependencies(string parameterName, ICollection<string> dependentParameters)
    parameters:
    - id: parameterName
      type: System.String
      description: Parameter name.
    - id: dependentParameters
      type: System.Collections.Generic.ICollection{System.String}
      description: Dependent parameters.
    content.vb: Public Sub AddOrUpdateParameterDependencies(parameterName As String, dependentParameters As ICollection(Of String))
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies*
  nameWithType.vb: ExpressionRegistry.AddOrUpdateParameterDependencies(String, ICollection(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies(System.String, System.Collections.Generic.ICollection(Of System.String))
  name.vb: AddOrUpdateParameterDependencies(String, ICollection(Of String))
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone
  commentId: M:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone
  id: Clone
  parent: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ExpressionRegistry.Clone()
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone()
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Clone
    path: ../SpiceSharpParser/Common/Evaluation/ExpressionRegistry.cs
    startLine: 219
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Common.Evaluation
  summary: "\nClones the registry.\n"
  example: []
  syntax:
    content: public ExpressionRegistry Clone()
    return:
      type: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
      description: "\nA clone of registry.\n"
    content.vb: Public Function Clone As ExpressionRegistry
  overload: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.Common.Evaluation
  commentId: N:SpiceSharpParser.Common.Evaluation
  name: SpiceSharpParser.Common.Evaluation
  nameWithType: SpiceSharpParser.Common.Evaluation
  fullName: SpiceSharpParser.Common.Evaluation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  commentId: T:SpiceSharpParser.Common.Evaluation.ExpressionRegistry
  parent: SpiceSharpParser.Common.Evaluation
  name: ExpressionRegistry
  nameWithType: ExpressionRegistry
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.#ctor*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.#ctor
  name: ExpressionRegistry
  nameWithType: ExpressionRegistry.ExpressionRegistry
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ExpressionRegistry
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive
  name: IsParameterNameCaseSensitive
  nameWithType: ExpressionRegistry.IsParameterNameCaseSensitive
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsParameterNameCaseSensitive
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive
  name: IsExpressionNameCaseSensitive
  nameWithType: ExpressionRegistry.IsExpressionNameCaseSensitive
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.IsExpressionNameCaseSensitive
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters
  name: Parameters
  nameWithType: ExpressionRegistry.Parameters
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Parameters
- uid: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Expression>
  nameWithType: Dictionary<String, Expression>
  fullName: System.Collections.Generic.Dictionary<System.String, SpiceSharpParser.Common.Evaluation.Expression>
  nameWithType.vb: Dictionary(Of String, Expression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SpiceSharpParser.Common.Evaluation.Expression)
  name.vb: Dictionary(Of String, Expression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions
  name: NamedExpressions
  nameWithType: ExpressionRegistry.NamedExpressions
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.NamedExpressions
- uid: System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, NamedExpression>
  nameWithType: Dictionary<String, NamedExpression>
  fullName: System.Collections.Generic.Dictionary<System.String, SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression>
  nameWithType.vb: Dictionary(Of String, NamedExpression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression)
  name.vb: Dictionary(Of String, NamedExpression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
    name: NamedExpression
    nameWithType: NamedExpression
    fullName: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
    name: NamedExpression
    nameWithType: NamedExpression
    fullName: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions
  name: UnnamedExpressions
  nameWithType: ExpressionRegistry.UnnamedExpressions
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.UnnamedExpressions
- uid: System.Collections.Generic.ICollection{SpiceSharpParser.Common.Evaluation.Expression}
  commentId: T:System.Collections.Generic.ICollection{SpiceSharpParser.Common.Evaluation.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Expression>
  nameWithType: ICollection<Expression>
  fullName: System.Collections.Generic.ICollection<SpiceSharpParser.Common.Evaluation.Expression>
  nameWithType.vb: ICollection(Of Expression)
  fullName.vb: System.Collections.Generic.ICollection(Of SpiceSharpParser.Common.Evaluation.Expression)
  name.vb: ICollection(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies
  name: ParametersDependencies
  nameWithType: ExpressionRegistry.ParametersDependencies
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersDependencies
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, HashSet<String>>
  nameWithType: Dictionary<String, HashSet<String>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.HashSet<System.String>>
  nameWithType.vb: Dictionary(Of String, HashSet(Of String))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.HashSet(Of System.String))
  name.vb: Dictionary(Of String, HashSet(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies
  name: ParametersExpressionsDependencies
  nameWithType: ExpressionRegistry.ParametersExpressionsDependencies
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.ParametersExpressionsDependencies
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.Expression}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SpiceSharpParser.Common.Evaluation.Expression}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<Expression>>
  nameWithType: Dictionary<String, List<Expression>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<SpiceSharpParser.Common.Evaluation.Expression>>
  nameWithType.vb: Dictionary(Of String, List(Of Expression))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of SpiceSharpParser.Common.Evaluation.Expression))
  name.vb: Dictionary(Of String, List(Of Expression))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames
  name: GetExpressionNames
  nameWithType: ExpressionRegistry.GetExpressionNames
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpressionNames
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: T:System.Collections.Generic.HashSet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: System.Collections.Generic.HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions
  name: GetDependentExpressions
  nameWithType: ExpressionRegistry.GetDependentExpressions
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetDependentExpressions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{SpiceSharpParser.Common.Evaluation.Expression}
  commentId: T:System.Collections.Generic.IEnumerable{SpiceSharpParser.Common.Evaluation.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<SpiceSharpParser.Common.Evaluation.Expression>
  nameWithType.vb: IEnumerable(Of Expression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SpiceSharpParser.Common.Evaluation.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Common.Evaluation.Expression
    name: Expression
    nameWithType: Expression
    fullName: SpiceSharpParser.Common.Evaluation.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression
  name: GetExpression
  nameWithType: ExpressionRegistry.GetExpression
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.GetExpression
- uid: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
  commentId: T:SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
  parent: SpiceSharpParser.Common.Evaluation.Expressions
  name: NamedExpression
  nameWithType: NamedExpression
  fullName: SpiceSharpParser.Common.Evaluation.Expressions.NamedExpression
- uid: SpiceSharpParser.Common.Evaluation.Expressions
  commentId: N:SpiceSharpParser.Common.Evaluation.Expressions
  name: SpiceSharpParser.Common.Evaluation.Expressions
  nameWithType: SpiceSharpParser.Common.Evaluation.Expressions
  fullName: SpiceSharpParser.Common.Evaluation.Expressions
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate
  name: AddOrUpdate
  nameWithType: ExpressionRegistry.AddOrUpdate
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdate
- uid: SpiceSharpParser.Common.Evaluation.Expression
  commentId: T:SpiceSharpParser.Common.Evaluation.Expression
  parent: SpiceSharpParser.Common.Evaluation
  name: Expression
  nameWithType: Expression
  fullName: SpiceSharpParser.Common.Evaluation.Expression
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add
  name: Add
  nameWithType: ExpressionRegistry.Add
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Add
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies
  name: AddOrUpdateParameterDependencies
  nameWithType: ExpressionRegistry.AddOrUpdateParameterDependencies
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.AddOrUpdateParameterDependencies
- uid: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone*
  commentId: Overload:SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone
  name: Clone
  nameWithType: ExpressionRegistry.Clone
  fullName: SpiceSharpParser.Common.Evaluation.ExpressionRegistry.Clone
