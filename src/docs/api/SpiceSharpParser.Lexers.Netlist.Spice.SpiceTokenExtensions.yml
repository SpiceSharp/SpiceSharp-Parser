### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  id: SpiceTokenExtensions
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  children:
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  langs:
  - csharp
  - vb
  name: SpiceTokenExtensions
  nameWithType: SpiceTokenExtensions
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceTokenExtensions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SpiceTokenExtensions
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceTokenExtensions.cs
    startLine: 7
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nExtensions for <xref href=\"SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public static class SpiceTokenExtensions
    content.vb: Public Module SpiceTokenExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  id: Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  isExtensionMethod: true
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  langs:
  - csharp
  - vb
  name: Is(SpiceToken, SpiceTokenType)
  nameWithType: SpiceTokenExtensions.Is(SpiceToken, SpiceTokenType)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken, SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceTokenExtensions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Is
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceTokenExtensions.cs
    startLine: 17
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nChecks whether the SPICE token is given type.\n"
  example: []
  syntax:
    content: public static bool Is(this SpiceToken token, SpiceTokenType type)
    parameters:
    - id: token
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
      description: A token to check.
    - id: type
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
      description: A given type.
    return:
      type: System.Boolean
      description: "\nTrue if <code data-dev-comment-type=\"paramref\" class=\"paramref\">token</code> is given type.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Is(token As SpiceToken, type As SpiceTokenType) As Boolean
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  id: Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  isExtensionMethod: true
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  langs:
  - csharp
  - vb
  name: Equal(SpiceToken, String, Boolean)
  nameWithType: SpiceTokenExtensions.Equal(SpiceToken, String, Boolean)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceTokenExtensions.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: Equal
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceTokenExtensions.cs
    startLine: 31
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nChecks whether the SPICE token has specified lexem.\n"
  example: []
  syntax:
    content: public static bool Equal(this SpiceToken token, string lexem, bool caseSensitive)
    parameters:
    - id: token
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
      description: A token to check.
    - id: lexem
      type: System.String
      description: A given lexem.
    - id: caseSensitive
      type: System.Boolean
      description: Is lexem case sensitive.
    return:
      type: System.Boolean
      description: "\nTrue if <code data-dev-comment-type=\"paramref\" class=\"paramref\">token</code> has specified lexem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Equal(token As SpiceToken, lexem As String, caseSensitive As Boolean) As Boolean
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceToken
  nameWithType: SpiceToken
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
- uid: SpiceSharpParser.Lexers.Netlist.Spice
  commentId: N:SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceSharpParser.Lexers.Netlist.Spice
  nameWithType: SpiceSharpParser.Lexers.Netlist.Spice
  fullName: SpiceSharpParser.Lexers.Netlist.Spice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is
  name: Is
  nameWithType: SpiceTokenExtensions.Is
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceTokenType
  nameWithType: SpiceTokenType
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal
  name: Equal
  nameWithType: SpiceTokenExtensions.Equal
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
