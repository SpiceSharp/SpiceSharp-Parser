### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  id: SpiceLexer
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  children:
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings)
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens(System.String)
  langs:
  - csharp
  - vb
  name: SpiceLexer
  nameWithType: SpiceLexer
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexer.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SpiceLexer
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexer.cs
    startLine: 9
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nA lexer for SPICE netlists.\n"
  example: []
  syntax:
    content: public class SpiceLexer
    content.vb: Public Class SpiceLexer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings)
  id: '#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings)'
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  langs:
  - csharp
  - vb
  name: SpiceLexer(SpiceLexerSettings)
  nameWithType: SpiceLexer.SpiceLexer(SpiceLexerSettings)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.SpiceLexer(SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexer.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexer.cs
    startLine: 18
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SpiceLexer(SpiceLexerSettings options)
    parameters:
    - id: options
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
      description: options for lexer.
    content.vb: Public Sub New(options As SpiceLexerSettings)
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens(System.String)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens(System.String)
  id: GetTokens(System.String)
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  langs:
  - csharp
  - vb
  name: GetTokens(String)
  nameWithType: SpiceLexer.GetTokens(String)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens(System.String)
  type: Method
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexer.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: GetTokens
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceLexer.cs
    startLine: 31
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nGets tokens for SPICE netlist.\n"
  example: []
  syntax:
    content: public IEnumerable<SpiceToken> GetTokens(string netlistText)
    parameters:
    - id: netlistText
      type: System.String
      description: A string with SPICE netlist.
    return:
      type: System.Collections.Generic.IEnumerable{SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken}
      description: "\nAn enumerable of tokens.\n"
    content.vb: Public Function GetTokens(netlistText As String) As IEnumerable(Of SpiceToken)
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SpiceSharpParser.Lexers.Netlist.Spice
  commentId: N:SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceSharpParser.Lexers.Netlist.Spice
  nameWithType: SpiceSharpParser.Lexers.Netlist.Spice
  fullName: SpiceSharpParser.Lexers.Netlist.Spice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
  name: SpiceLexer
  nameWithType: SpiceLexer
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.#ctor
  name: SpiceLexer
  nameWithType: SpiceLexer.SpiceLexer
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.SpiceLexer
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceLexerSettings
  nameWithType: SpiceLexerSettings
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexerSettings
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens
  name: GetTokens
  nameWithType: SpiceLexer.GetTokens
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceLexer.GetTokens
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken}
  commentId: T:System.Collections.Generic.IEnumerable{SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SpiceToken>
  nameWithType: IEnumerable<SpiceToken>
  fullName: System.Collections.Generic.IEnumerable<SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken>
  nameWithType.vb: IEnumerable(Of SpiceToken)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken)
  name.vb: IEnumerable(Of SpiceToken)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
