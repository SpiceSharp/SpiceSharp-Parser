### YamlMime:ManagedReference
items:
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  id: SpiceToken
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  children:
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType,System.String,System.Int32)
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType
  langs:
  - csharp
  - vb
  name: SpiceToken
  nameWithType: SpiceToken
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  type: Class
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceToken.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SpiceToken
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceToken.cs
    startLine: 5
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nA token from SPICE netlist.\n"
  example: []
  syntax:
    content: 'public class SpiceToken : Token'
    content.vb: >-
      Public Class SpiceToken
          Inherits Token
  inheritance:
  - System.Object
  - SpiceSharpParser.Lexers.Token
  inheritedMembers:
  - SpiceSharpParser.Lexers.Token.Type
  - SpiceSharpParser.Lexers.Token.LineNumber
  - SpiceSharpParser.Lexers.Token.Lexem
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  - SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(System.String,System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType,System.String,System.Int32)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType,System.String,System.Int32)
  id: '#ctor(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType,System.String,System.Int32)'
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  langs:
  - csharp
  - vb
  name: SpiceToken(SpiceTokenType, String, Int32)
  nameWithType: SpiceToken.SpiceToken(SpiceTokenType, String, Int32)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceToken(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType, System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceToken.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: .ctor
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceToken.cs
    startLine: 10
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nInitializes a new instance of the <xref href=\"SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SpiceToken(SpiceTokenType tokenType, string lexem, int lineNumber = 0)
    parameters:
    - id: tokenType
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
    - id: lexem
      type: System.String
    - id: lineNumber
      type: System.Int32
    content.vb: Public Sub New(tokenType As SpiceTokenType, lexem As String, lineNumber As Integer = 0)
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType
  commentId: P:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType
  id: SpiceTokenType
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  langs:
  - csharp
  - vb
  name: SpiceTokenType
  nameWithType: SpiceToken.SpiceTokenType
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType
  type: Property
  source:
    remote:
      path: src/SpiceSharpParser/Lexers/Netlist/Spice/SpiceToken.cs
      branch: master
      repo: https://github.com/marcin-golebiowski/SpiceSharpParser.git
    id: SpiceTokenType
    path: ../SpiceSharpParser/Lexers/Netlist/Spice/SpiceToken.cs
    startLine: 19
  assemblies:
  - SpiceSharpParser
  namespace: SpiceSharpParser.Lexers.Netlist.Spice
  summary: "\nGets token type.\n"
  example: []
  syntax:
    content: public SpiceTokenType SpiceTokenType { get; }
    parameters: []
    return:
      type: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
    content.vb: Public ReadOnly Property SpiceTokenType As SpiceTokenType
  overload: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SpiceSharpParser.Lexers.Netlist.Spice
  commentId: N:SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceSharpParser.Lexers.Netlist.Spice
  nameWithType: SpiceSharpParser.Lexers.Netlist.Spice
  fullName: SpiceSharpParser.Lexers.Netlist.Spice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SpiceSharpParser.Lexers.Token
  commentId: T:SpiceSharpParser.Lexers.Token
  parent: SpiceSharpParser.Lexers
  name: Token
  nameWithType: Token
  fullName: SpiceSharpParser.Lexers.Token
- uid: SpiceSharpParser.Lexers.Token.Type
  commentId: P:SpiceSharpParser.Lexers.Token.Type
  parent: SpiceSharpParser.Lexers.Token
  name: Type
  nameWithType: Token.Type
  fullName: SpiceSharpParser.Lexers.Token.Type
- uid: SpiceSharpParser.Lexers.Token.LineNumber
  commentId: P:SpiceSharpParser.Lexers.Token.LineNumber
  parent: SpiceSharpParser.Lexers.Token
  name: LineNumber
  nameWithType: Token.LineNumber
  fullName: SpiceSharpParser.Lexers.Token.LineNumber
- uid: SpiceSharpParser.Lexers.Token.Lexem
  commentId: P:SpiceSharpParser.Lexers.Token.Lexem
  parent: SpiceSharpParser.Lexers.Token
  name: Lexem
  nameWithType: Token.Lexem
  fullName: SpiceSharpParser.Lexers.Token.Lexem
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  definition: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  name: Is(SpiceTokenType)
  nameWithType: SpiceTokenExtensions.Is(SpiceTokenType)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
    name: Is
    nameWithType: SpiceTokenExtensions.Is
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
    name: SpiceTokenType
    nameWithType: SpiceTokenType
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
    name: Is
    nameWithType: SpiceTokenExtensions.Is
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
    name: SpiceTokenType
    nameWithType: SpiceTokenType
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(System.String,System.Boolean)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  parent: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  definition: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  name: Equal(String, Boolean)
  nameWithType: SpiceTokenExtensions.Equal(String, Boolean)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(System.String,System.Boolean)
    name: Equal
    nameWithType: SpiceTokenExtensions.Equal
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(System.String,System.Boolean)
    name: Equal
    nameWithType: SpiceTokenExtensions.Equal
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SpiceSharpParser.Lexers
  commentId: N:SpiceSharpParser.Lexers
  name: SpiceSharpParser.Lexers
  nameWithType: SpiceSharpParser.Lexers
  fullName: SpiceSharpParser.Lexers
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  name: Is(SpiceToken, SpiceTokenType)
  nameWithType: SpiceTokenExtensions.Is(SpiceToken, SpiceTokenType)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken, SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
    name: Is
    nameWithType: SpiceTokenExtensions.Is
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
    name: SpiceTokenType
    nameWithType: SpiceTokenType
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType)
    name: Is
    nameWithType: SpiceTokenExtensions.Is
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Is
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
    name: SpiceTokenType
    nameWithType: SpiceTokenType
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceTokenExtensions
  nameWithType: SpiceTokenExtensions
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  commentId: M:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
  isExternal: true
  name: Equal(SpiceToken, String, Boolean)
  nameWithType: SpiceTokenExtensions.Equal(SpiceToken, String, Boolean)
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken, System.String, System.Boolean)
  spec.csharp:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
    name: Equal
    nameWithType: SpiceTokenExtensions.Equal
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal(SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken,System.String,System.Boolean)
    name: Equal
    nameWithType: SpiceTokenExtensions.Equal
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenExtensions.Equal
  - name: (
    nameWithType: (
    fullName: (
  - uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
    name: SpiceToken
    nameWithType: SpiceToken
    fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceToken
  nameWithType: SpiceToken
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.#ctor*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.#ctor
  name: SpiceToken
  nameWithType: SpiceToken.SpiceToken
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceToken
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  commentId: T:SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
  parent: SpiceSharpParser.Lexers.Netlist.Spice
  name: SpiceTokenType
  nameWithType: SpiceTokenType
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceTokenType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType*
  commentId: Overload:SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType
  name: SpiceTokenType
  nameWithType: SpiceToken.SpiceTokenType
  fullName: SpiceSharpParser.Lexers.Netlist.Spice.SpiceToken.SpiceTokenType
